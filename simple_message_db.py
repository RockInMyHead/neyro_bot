#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Ñ–∞–π–ª–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import json
import os
import time
from datetime import datetime
from typing import List, Dict, Any

class SimpleMessageDB:
    def __init__(self, db_file="messages.json"):
        self.db_file = db_file
        self.messages = []
        self.load_messages()
    
    def load_messages(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.db_file):
            try:
                with open(self.db_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.messages = data.get('messages', [])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                self.messages = []
    
    def save_messages(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.db_file, 'w', encoding='utf-8') as f:
                json.dump({'messages': self.messages}, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def add_message(self, user_id: int, username: str, first_name: str, message: str, source: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            def safe_encode(text):
                if isinstance(text, str):
                    return text.encode('utf-8', errors='ignore').decode('utf-8')
                return str(text)
            
            message_data = {
                'user_id': user_id,
                'username': safe_encode(username),
                'first_name': safe_encode(first_name),
                'message': safe_encode(message),
                'timestamp': time.time(),
                'source': safe_encode(source)
            }
            
            self.messages.append(message_data)
            self.save_messages()
            
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î: {safe_encode(first_name)} ({source}): {safe_encode(message)[:30]}...")
            
        except UnicodeDecodeError as e:
            print(f"‚ùå UnicodeDecodeError –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            safe_message_data = {
                'user_id': user_id,
                'username': 'user',
                'first_name': 'User',
                'message': 'Message with encoding issues',
                'timestamp': time.time(),
                'source': source
            }
            self.messages.append(safe_message_data)
            self.save_messages()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def get_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        current_time = time.time()
        recent_threshold = current_time - 15  # 15 —Å–µ–∫—É–Ω–¥
        
        recent_messages = [msg for msg in self.messages if msg['timestamp'] > recent_threshold]
        unique_users = len(set(msg['user_id'] for msg in self.messages))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º
        messages_by_hour = {}
        for msg in self.messages:
            hour = datetime.fromtimestamp(msg['timestamp']).hour
            messages_by_hour[hour] = messages_by_hour.get(hour, 0) + 1
        
        return {
            'total_messages': len(self.messages),
            'unique_users_count': unique_users,
            'recent_messages_count': len(recent_messages),
            'messages_by_hour': messages_by_hour,
            'last_reset': current_time,
            'uptime_hours': 0.1  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        }
    
    def get_messages(self, limit=50):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return self.messages[-limit:]
    
    def get_user_messages_only(self, limit=50):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –±–æ—Ç–∞)"""
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (source = mini_app, telegram –∏ —Ç.–¥., –Ω–æ –Ω–µ bot)
        user_messages = [msg for msg in self.messages if msg.get('source') != 'bot']
        return user_messages[-limit:]
    
    def clean_old_messages(self, max_age_seconds=20):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        current_time = time.time()
        cutoff_time = current_time - max_age_seconds
        
        old_count = len(self.messages)
        self.messages = [msg for msg in self.messages if msg['timestamp'] > cutoff_time]
        new_count = len(self.messages)
        
        if old_count != new_count:
            self.save_messages()
            print(f"üßπ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {old_count - new_count} (–æ—Å—Ç–∞–ª–æ—Å—å: {new_count})")
        
        return old_count - new_count
    
    def reset_stats(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.messages = []
        self.save_messages()
        print("üóëÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
        return len(self.messages)
    
    def clear_all_messages(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        count = len(self.messages)
        self.messages = []
        self.save_messages()
        print(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return count

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
message_db = SimpleMessageDB()
