#!/usr/bin/env python3
"""
Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
Mini App —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ enhanced_bot.py
"""

from flask import Flask, render_template, send_from_directory, request, jsonify, session
from flask_cors import CORS
import time
import os
import logging
import asyncio
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Import existing handlers
from simple_message_db import message_db
from openai_client import get_openai_response
from gemini_client import generate_image_with_retry, GeminiQuotaError
from content_filter import check_content_safety, sanitize_image_prompt

# OLD: Keep legacy imports for compatibility with old endpoints
from image_queue_manager import queue_manager
from batch_image_generator import batch_generator

# NEW: Import smart batch management system
from smart_batch_manager import smart_batch_manager, BatchStatus
from sequential_batch_processor import sequential_processor
from PIL import Image, ImageOps
from io import BytesIO
import threading
import time
import asyncio
import requests
import base64
from config import BOT_TOKEN, GENERATED_IMAGES_FOLDER, NEW_BOT_TOKEN

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º—Ç–æ–≤
from prompt_manager import get_current_base_prompt, update_base_prompt, get_prompt_info

def _process_and_compress_image(image_path: str) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–∞–∫ –≤ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –±–∞—Ç—á–µ–π)
    
    Args:
        image_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        
    Returns:
        str: –ü—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    """
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∫–∞–∫ –≤ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –±–∞—Ç—á–µ–π)
        IMAGE_SIZE = (1920, 1280)
        
        with Image.open(image_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∏ –æ–±—Ä–µ–∑–∫–æ–π
            img = ImageOps.fit(img, IMAGE_SIZE, Image.Resampling.LANCZOS)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _processed
            base_name = os.path.splitext(os.path.basename(image_path))[0]
            processed_filename = f"{base_name}_processed.png"
            processed_path = os.path.join(GENERATED_IMAGES_FOLDER, processed_filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            img.save(processed_path, 'PNG', optimize=True)
            
            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {IMAGE_SIZE[0]}x{IMAGE_SIZE[1]} -> {processed_filename}")
            
            # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if os.path.exists(image_path) and image_path != processed_path:
                os.remove(image_path)
                logger.info(f"üóëÔ∏è –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {os.path.basename(image_path)}")
            
            return processed_path
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        logger.info("üíæ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return image_path

def auto_generation_worker():
    """
    –ù–æ–≤—ã–π —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π
    
    –õ–æ–≥–∏–∫–∞:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    2. –°–æ–∑–¥–∞–µ—Ç –±–∞—Ç—á–∏ (10 –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–ª–∏ –ø–æ 1 —Å–æ–æ–±—â–µ–Ω–∏—é)
    3. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π –±–∞—Ç—á:
       - –°–æ–∑–¥–∞–µ—Ç –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ LLM
       - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
       - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    4. –ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ü–∏–∫–ª
    """
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π...")
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            next_batch = smart_batch_manager.get_next_batch()
            
            if not next_batch:
                time.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –Ω–µ—Ç –±–∞—Ç—á–µ–π
                continue
            
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {next_batch.batch_id} —Å {next_batch.message_count} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á —á–µ—Ä–µ–∑ sequential_processor
            result = sequential_processor.process_batch(next_batch)
            
            if result:
                logger.info(f"‚úÖ –ë–∞—Ç—á {next_batch.batch_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            else:
                logger.warning(f"‚ö†Ô∏è –ë–∞—Ç—á {next_batch.batch_id} –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            time.sleep(2)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
            time.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
generation_thread = threading.Thread(target=auto_generation_worker, daemon=True)
generation_thread.start()
logger.info("üöÄ –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π –∑–∞–ø—É—â–µ–Ω")

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__, static_folder='static', template_folder='templates')
app.secret_key = 'your-secret-key-here'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
last_admin_message_time = 0
chat_clear_timestamp = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(user_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API"""
    try:
        url = f"https://api.telegram.org/bot{NEW_BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': user_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        response = requests.post(url, data=json.dumps(data), headers={'Content-Type': 'application/json'}, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result.get('description')}")
                return False
        else:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

def send_telegram_notification_with_button(user_id, notification_text, button_text="üé¨ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞", web_app_url=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞"""
    try:
        url = f"https://api.telegram.org/bot{NEW_BOT_TOKEN}/sendMessage"
        
        # –ï—Å–ª–∏ URL –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        if not web_app_url:
            web_app_url = "https://t.me/neyro_bot"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞
        
        data = {
            'chat_id': user_id,
            'text': notification_text,
            'parse_mode': 'Markdown',
            'reply_markup': {
                'inline_keyboard': [[
                    {
                        'text': button_text,
                        'url': web_app_url
                    }
                ]]
            }
        }
        
        response = requests.post(url, data=json.dumps(data), headers={'Content-Type': 'application/json'}, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result.get('description')}")
                return False
        else:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def require_admin_auth(f):
    def decorated_function(*args, **kwargs):
        if not session.get('admin_authenticated'):
            return jsonify({'success': False, 'error': 'Authentication required'}), 401
        return f(*args, **kwargs)
    decorated_function.__name__ = f.__name__
    return decorated_function

# Admin Login Page
@app.route('/admin/login')
def admin_login_page():
    return render_template('admin_login.html')

# Admin App Page
@app.route('/admin')
def admin_app():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not session.get('admin_authenticated'):
        return render_template('admin_login.html')
    return render_template('admin_mini_app.html')

# Admin API endpoints
@app.route('/api/admin/stats', methods=['GET'])
@require_admin_auth
def admin_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    message_db.load_messages()
    stats = message_db.get_stats()
    return jsonify(stats)

@app.route('/api/admin/messages', methods=['GET'])
def admin_messages():
    message_db.load_messages()
    all_messages = message_db.messages
    return jsonify(all_messages)

@app.route('/api/admin/export', methods=['GET'])
def admin_export():
    message_db.load_messages()
    all_messages = message_db.messages
    return jsonify(all_messages)

@app.route('/api/admin/reset', methods=['POST'])
def admin_reset():
    message_db.reset_stats()
    return jsonify({'success': True, 'message': 'Stats reset successfully'})

@app.route('/api/admin/mixed-text', methods=['POST'])
def admin_mixed_text():
    # Accept empty request body
    data = request.get_json(force=True) or {}
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_db.load_messages()
        all_messages = message_db.messages
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∏ –±–æ—Ç)
        user_messages = [msg for msg in all_messages if msg.get('source') in ['telegram', 'mini_app']]
        
        if not user_messages:
            return jsonify({
                'success': False,
                'error': 'No user messages found',
                'mixed_text': '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
            })
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        recent_messages = user_messages[-10:]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        messages_text = []
        for msg in recent_messages:
            username = msg.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            message_text = msg.get('message', '')
            messages_text.append(f"{username}: {message_text}")
        
        combined_text = "\n".join(messages_text)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        mix_prompt = f"""
–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:

{combined_text}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –û–±—ä–µ–¥–∏–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏ –≤ –æ–¥–∏–Ω —Å–≤—è–∑–Ω—ã–π —Ç–µ–∫—Å—Ç
- –°–æ—Ö—Ä–∞–Ω–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
- –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º
- –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç OpenAI
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            mixed_text = loop.run_until_complete(get_openai_response(mix_prompt))
            loop.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
            mixed_text = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"
        
        return jsonify({
            'success': True,
            'mixed_text': mixed_text,
            'source_messages': len(recent_messages)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_mixed_text: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'mixed_text': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π'
        })

# Smart Batch Management API endpoints
@app.route('/api/admin/smart-batches/stats', methods=['GET'])
@require_admin_auth
def smart_batches_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–º–Ω—ã—Ö –±–∞—Ç—á–µ–π"""
    try:
        stats = smart_batch_manager.get_stats()
        return jsonify({
            'success': True,
            'stats': stats
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞—Ç—á–µ–π: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/admin/smart-batches/list', methods=['GET'])
def smart_batches_list():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞—Ç—á–µ–π"""
    try:
        batches = smart_batch_manager.get_all_batches()
        batches_data = []
        for batch in batches:
            batches_data.append({
                'batch_id': batch.batch_id,
                'status': batch.status.value,
                'message_count': batch.message_count,
                'created_at': batch.created_at,
                'completed_at': batch.completed_at,
                'mixed_text': batch.mixed_text,
                'image_path': batch.image_path
            })
        return jsonify({
            'success': True,
            'batches': batches_data
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞—Ç—á–µ–π: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/admin/smart-batches/create', methods=['POST'])
def smart_batches_create():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –±–∞—Ç—á–∏ –∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        batches = smart_batch_manager.create_batches()
        return jsonify({
            'success': True,
            'message': f'–°–æ–∑–¥–∞–Ω–æ {len(batches)} –±–∞—Ç—á–µ–π',
            'batches_count': len(batches)
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ç—á–µ–π: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/admin/smart-batches/process-next', methods=['POST'])
def smart_batches_process_next():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–∞—Ç—á
        pending_batches = smart_batch_manager.get_pending_batches()
        
        if not pending_batches:
            return jsonify({
                'success': False,
                'message': '–ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π'
            })
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞—Ç—á
        batch = pending_batches[0]
        result = sequential_processor.process_batch(batch)
        
        if result:
            return jsonify({
                'success': True,
                'message': f'–ë–∞—Ç—á {batch.batch_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
                'batch_id': batch.batch_id
            })
        else:
            return jsonify({
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {batch.batch_id}'
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/admin/smart-batches/current-mixed-text', methods=['GET'])
def smart_batches_current_mixed_text():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–∞—Ç—á
        completed_batches = smart_batch_manager.get_completed_batches()
        
        if not completed_batches:
            return jsonify({
                'success': False,
                'message': '–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π'
            })
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ç—á
        latest_batch = completed_batches[-1]
        
        return jsonify({
            'success': True,
            'mixed_text': latest_batch.mixed_text or '–¢–µ–∫—Å—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
            'batch_id': latest_batch.batch_id,
            'completed_at': latest_batch.completed_at
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/admin/smart-batches/images', methods=['GET'])
def smart_batches_images():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±–∞—Ç—á–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        completed_batches = smart_batch_manager.get_completed_batches()
        images_data = []
        
        for batch in completed_batches:
            if batch.image_path and os.path.exists(batch.image_path):
                filename = os.path.basename(batch.image_path)
                image_url = f"/generated_images/{filename}"
                images_data.append({
                    'batch_id': batch.batch_id,
                    'mixed_text': batch.mixed_text or '–¢–µ–∫—Å—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
                    'image_url': image_url,
                    'image_path': batch.image_path,
                    'completed_at': batch.completed_at * 1000 if batch.completed_at else 0,
                    'processing_time': (batch.completed_at - batch.created_at) if batch.completed_at and batch.created_at else 0,
                    'message_count': batch.message_count
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        images_data.sort(key=lambda x: x.get('completed_at', 0), reverse=True)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –±–∞—Ç—á–µ–π, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏
        if not images_data and os.path.exists(GENERATED_IMAGES_FOLDER):
            import glob
            image_files = glob.glob(os.path.join(GENERATED_IMAGES_FOLDER, "*.png"))
            image_files.sort(key=os.path.getmtime, reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            
            for image_file in image_files:
                filename = os.path.basename(image_file)
                image_url = f"/generated_images/{filename}"
                images_data.append({
                    'batch_id': f"file_{filename}",
                    'mixed_text': f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {filename}",
                    'image_url': image_url,
                    'image_path': image_file,
                    'completed_at': os.path.getmtime(image_file) * 1000,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                    'processing_time': 0,
                    'message_count': 1
                })
        
        return jsonify({
            'success': True,
            'images': images_data,
            'count': len(images_data)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

# Admin message management
@app.route('/api/admin/clear-messages', methods=['POST'])
def admin_clear_messages():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        message_db.reset_stats()
        return jsonify({
            'success': True,
            'message': '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã'
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/admin/clear-all-chats', methods=['POST'])
def admin_clear_all_chats():
    """–û—á–∏—â–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–æ–æ–±—â–µ–Ω–∏—è, –±–∞—Ç—á–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)"""
    try:
        # –û—á–∏—â–∞–µ–º –±–∞–∑—É —Å–æ–æ–±—â–µ–Ω–∏–π
        message_db.reset_stats()
        
        # –û—á–∏—â–∞–µ–º —É–º–Ω—ã–µ –±–∞—Ç—á–∏
        smart_batch_manager.clear_all_batches()
        
        # –û—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if os.path.exists(GENERATED_IMAGES_FOLDER):
            import shutil
            shutil.rmtree(GENERATED_IMAGES_FOLDER)
            os.makedirs(GENERATED_IMAGES_FOLDER, exist_ok=True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–æ–≤
        global chat_clear_timestamp
        chat_clear_timestamp = time.time()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Telegram
        try:
            message_db.load_messages()
            all_messages = message_db.messages
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Telegram
            telegram_users = set()
            for msg in all_messages:
                if msg.get('source') == 'telegram' and msg.get('user_id') is not None:
                    telegram_users.add(msg['user_id'])
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(telegram_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            
            sent_count = 0
            for user_id in telegram_users:
                try:
                    clear_notification_text = "üîÑ **–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**\n\n–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º!"
                    success = send_telegram_message(user_id, clear_notification_text)
                    if success:
                        sent_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞ –∏–∑ {len(telegram_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—á–∏—Å—Ç–∫–µ: {e}")
        
        return jsonify({
            'success': True,
            'message': '–í—Å—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞',
            'notifications_sent': sent_count if 'sent_count' in locals() else 0
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —á–∞—Ç–æ–≤: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/check-chat-clear-status', methods=['GET'])
def check_chat_clear_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ –æ—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞"""
    global chat_clear_timestamp
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å timestamp –æ—á–∏—Å—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    if chat_clear_timestamp is not None:
        timestamp = chat_clear_timestamp
        chat_clear_timestamp = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è
        return jsonify({
            "success": True,
            "chat_cleared": True,
            "clear_timestamp": timestamp
        })
    
    return jsonify({
        "success": True,
        "chat_cleared": False,
        "clear_timestamp": None
    })

# Admin concert message system
@app.route('/api/admin/send-concert-message', methods=['POST'])
@require_admin_auth
def admin_send_concert_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–∫–æ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'No data provided'}), 400
        
        message = data.get('message', '').strip()
        if not message:
            return jsonify({'success': False, 'error': 'Message is required'}), 400
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        try:
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î: {message[:100]}...")
            message_db.add_message(
                user_id=0,
                username='Admin',
                first_name='Admin',
                message=message,
                source='admin'
            )
            logger.info("‚úÖ –ê–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
            global last_admin_message_time
            last_admin_message_time = time.time()
            logger.info("üöÄ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Telegram
        try:
            message_db.load_messages()
            all_messages = message_db.messages
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Telegram
            telegram_users = set()
            for msg in all_messages:
                if msg.get('source') == 'telegram' and msg.get('user_id') is not None:
                    telegram_users.add(msg['user_id'])
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(telegram_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            logger.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {list(telegram_users)}")
            
            sent_count = 0
            for user_id in telegram_users:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                    notification_text = f"üé¨ **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!**\n\n{message}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å."
                    success = send_telegram_notification_with_button(
                        user_id, 
                        notification_text, 
                        "üí¨ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞"
                    )
                    if success:
                        sent_count += 1
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {len(telegram_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            return jsonify({
                'success': True,
                'message': f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                'total_users': len(telegram_users)
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {e}")
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}'
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_send_concert_message: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

# Base prompt management
@app.route('/api/admin/update-base-prompt', methods=['POST'])
def admin_update_base_prompt():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è AI"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'No data provided'}), 400
        
        prompt_content = data.get('prompt', '').strip()
        if not prompt_content:
            return jsonify({'success': False, 'error': 'Prompt is required'}), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º—Ç —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        update_base_prompt(prompt_content)
        
        logger.info(f"‚úÖ –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {prompt_content[:100]}...")
        
        return jsonify({
            'success': True,
            'message': '–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            'prompt': prompt_content
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/admin/generate-film-description', methods=['POST'])
def generate_film_description():
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–º—Ç–∞"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'No data provided'}), 400
        
        technical_prompt = data.get('technical_prompt', '').strip()
        if not technical_prompt:
            return jsonify({'success': False, 'error': 'Technical prompt is required'}), 400
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
        film_prompt = f"""
–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:

{technical_prompt}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–æ–∑–¥–∞–π –û–î–ù–û –ó–ê–í–ï–†–®–ï–ù–ù–û–ï –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π –ù–ï –ë–û–õ–ï–ï 250 —Å–∏–º–≤–æ–ª–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π —è—Ä–∫–∏–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
- –°–¥–µ–ª–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
- –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –∏ —ç–º–æ—Ü–∏—è—Ö
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç OpenAI
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            film_description = loop.run_until_complete(get_openai_response(film_prompt))
            loop.close()
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 250 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            if len(film_description) > 250:
                film_description = film_description[:250].rsplit(' ', 1)[0] + '...'
            
            logger.info(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {film_description[:100]}...")
            
            return jsonify({
                'success': True,
                'description': film_description,
                'length': len(film_description)
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞: {e}")
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}'
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_film_description: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

# Authentication endpoints
@app.route('/api/admin/login', methods=['POST'])
def admin_login():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        data = request.get_json()
        password = data.get('password', '')
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—É—é)
        if password == 'admin123':  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
            session['admin_authenticated'] = True
            return jsonify({'success': True, 'message': 'Login successful'})
        else:
            return jsonify({'success': False, 'error': 'Invalid password'}), 401
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/admin/logout', methods=['POST'])
def admin_logout():
    """–í—ã—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        session.pop('admin_authenticated', None)
        return jsonify({'success': True, 'message': 'Logout successful'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/admin/check-auth', methods=['GET'])
def check_admin_auth():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        is_authenticated = session.get('admin_authenticated', False)
        return jsonify({
            'success': True,
            'authenticated': is_authenticated
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

# Base prompt endpoints
@app.route('/api/admin/get-base-prompt', methods=['GET'])
def get_base_prompt():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç"""
    try:
        prompt_info = get_prompt_info()
        return jsonify({
            'success': True,
            'prompt': prompt_info['prompt'],
            'length': prompt_info['length'],
            'preview': prompt_info['preview']
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/admin/generate-custom-image', methods=['POST'])
def generate_custom_image():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –∏ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'No data provided'}), 400
        
        custom_prompt = data.get('custom_prompt', '').strip()
        if not custom_prompt:
            return jsonify({'success': False, 'error': 'Custom prompt is required'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç
        base_prompt = get_current_base_prompt()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ–º—Ç—ã
        full_prompt = f"{custom_prompt} {base_prompt}"
        
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–º—Ç–æ–º: {full_prompt[:100]}...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(GENERATED_IMAGES_FOLDER, exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path = generate_image_with_retry(full_prompt)
            
            if image_path and os.path.exists(image_path):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL (–∫–∞–∫ –≤ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –±–∞—Ç—á–µ–π)
                processed_image_path = _process_and_compress_image(image_path)
                
                filename = os.path.basename(processed_image_path)
                image_url = f"/generated_images/{filename}"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                try:
                    with Image.open(processed_image_path) as img:
                        image_width, image_height = img.size
                        image_size_info = f"{image_width}x{image_height}"
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    image_size_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {filename} ({image_size_info})")
                
                return jsonify({
                    'success': True,
                    'image_url': image_url,
                    'image_path': processed_image_path,
                    'filename': filename,
                    'prompt': full_prompt,
                    'image_size': image_size_info,
                    'processed': True
                })
            else:
                return jsonify({
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}'
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_custom_image: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        })

# Serve generated images
@app.route('/generated_images/<filename>')
def serve_generated_image(filename):
    """–û—Ç–¥–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        return send_from_directory(GENERATED_IMAGES_FOLDER, filename)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–¥–∞—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {filename}: {e}")
        return "Image not found", 404

# Global error handlers
@app.errorhandler(UnicodeDecodeError)
def handle_unicode_error(e):
    logger.error(f"UnicodeDecodeError: {e}")
    return jsonify({
        'success': False,
        'error': 'Character encoding error',
        'message': 'Invalid character encoding detected'
    }), 400

@app.errorhandler(UnicodeError)
def handle_unicode_error_general(e):
    logger.error(f"UnicodeError: {e}")
    return jsonify({
        'success': False,
        'error': 'Unicode error',
        'message': 'Text encoding issue detected'
    }), 400

@app.errorhandler(Exception)
def handle_general_error(e):
    logger.error(f"Unhandled exception: {e}")
    return jsonify({
        'success': False,
        'error': 'Internal server error',
        'message': 'An unexpected error occurred'
    }), 500

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(GENERATED_IMAGES_FOLDER, exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ Neuroevent...")
    print("üìä –î–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000/admin")
    print("üîê –õ–æ–≥–∏–Ω: admin123")
    print("üé≠ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    app.run(host='0.0.0.0', port=8000, debug=True)
