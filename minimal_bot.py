#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è Mini App
–¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å" –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
"""

import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import BOT_TOKEN
from openai_client import get_openai_response, test_openai_connection
from message_collector import message_collector
from simple_message_db import message_db
from question_system import question_system

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è Mini App
    mini_app_button = InlineKeyboardButton(
        "–ù–∞—á–∞—Ç—å", 
        web_app=WebAppInfo(url="https://neuroevent.ru/")
    )
    
    keyboard = [[mini_app_button]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üöÄ",  # –≠–º–æ–¥–∑–∏ —Ä–∞–∫–µ—Ç—ã –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /app
async def app_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç Mini App –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    mini_app_button = InlineKeyboardButton(
        "–ù–∞—á–∞—Ç—å", 
        web_app=WebAppInfo(url="https://neuroevent.ru/")
    )
    reply_markup = InlineKeyboardMarkup([[mini_app_button]])
    
    await update.message.reply_text(
        "üöÄ",  # –≠–º–æ–¥–∑–∏ —Ä–∞–∫–µ—Ç—ã –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∫–∞–∑–∞ Mini App
async def show_mini_app_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É Mini App –ø—Ä–∏ –ª—é–±–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏"""
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è Mini App
    mini_app_button = InlineKeyboardButton(
        "–ù–∞—á–∞—Ç—å", 
        web_app=WebAppInfo(url="https://neuroevent.ru/")
    )
    
    keyboard = [[mini_app_button]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üöÄ",  # –≠–º–æ–¥–∑–∏ —Ä–∞–∫–µ—Ç—ã –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OpenAI"""
    user_message = update.message.text
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (ID: {user.id}): {user_message}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
    message_collector.add_message(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        message=user_message,
        source='telegram'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª–æ–≤—É—é –ë–î
    message_db.add_message(
        user_id=user.id,
        username=user.username or f"user_{user.id}",
        first_name=user.first_name,
        message=user_message,
        source='telegram'
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await update.message.chat.send_action("typing")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        ai_response = await get_openai_response(user_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(ai_response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
        message_db.add_message(
            user_id=0,  # ID –±–æ—Ç–∞ = 0
            username="neyro_bot",
            first_name="–ù–µ–π—Ä–æ-–±–æ—Ç",
            message=ai_response,
            source='bot'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
        next_question = question_system.get_next_question(user.id)
        if next_question:
            # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –≤–æ–ø—Ä–æ—Å–æ–º
            await asyncio.sleep(2)
            await update.message.reply_text(next_question)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
            message_db.add_message(
                user_id=0,  # ID –±–æ—Ç–∞ = 0
                username="neyro_bot",
                first_name="–ù–µ–π—Ä–æ-–±–æ—Ç",
                message=next_question,
                source='bot'
            )
        
        logger.info(f"OpenAI response sent to user {user.first_name} (ID: {user.id})")
        
    except Exception as e:
        logger.error(f"Error processing message: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # Fallback –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        fallback_response = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å–µ–π—á–∞—Å —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –ø–æ–∑–∂–µ! üòä"
        )
        await update.message.reply_text(fallback_response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
    logger.warning(f'Update {update} caused error {context.error}')

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI...")
    if test_openai_connection():
        print("‚úÖ OpenAI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ OpenAI. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("app", app_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É Mini App)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, show_mini_app_button))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
