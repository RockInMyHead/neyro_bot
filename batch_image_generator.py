"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –±–∞—Ç—á–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import asyncio
import time
import httpx
import base64
import uuid
import os
from typing import List, Dict, Optional
from PIL import Image, ImageOps
from io import BytesIO
from image_queue_manager import queue_manager, Batch
from openai_client import get_openai_response
from config import GEMINI_API_KEY, GEMINI_URL, GENERATED_IMAGES_FOLDER
from gemini_client import generate_image_with_retry, GeminiQuotaError

class BatchImageGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –±–∞—Ç—á–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.is_processing = False
        self.current_batch_id: Optional[str] = None
        
    async def process_next_batch(self) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á –≤ –æ—á–µ—Ä–µ–¥–∏"""
        if self.is_processing:
            print("‚ö†Ô∏è –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –±–∞—Ç—á")
            return False
        
        batch = queue_manager.get_next_batch()
        if not batch:
            print("üì≠ –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –±–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False
        
        self.is_processing = True
        self.current_batch_id = batch.id
        
        try:
            print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞ {batch.id} —Å {len(batch.requests)} –∑–∞–ø—Ä–æ—Å–∞–º–∏")
            
            # 1. –°–æ–∑–¥–∞–µ–º –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –±–∞—Ç—á–∞
            mixed_text = await self._create_mixed_text(batch)
            print(f"üìù –°–æ–∑–¥–∞–Ω –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {mixed_text[:100]}...")
            
            # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±–∞—Ç—á–∞
            generated_images = await self._generate_batch_images(batch, mixed_text)
            print(f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generated_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # 3. –ó–∞–≤–µ—Ä—à–∞–µ–º –±–∞—Ç—á
            queue_manager.complete_batch(batch.id, mixed_text, generated_images)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {batch.id}: {e}")
            queue_manager.fail_batch(batch.id, str(e))
            return False
            
        finally:
            self.is_processing = False
            self.current_batch_id = None
    
    async def _create_mixed_text(self, batch: Batch) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –±–∞—Ç—á–∞"""
        messages_list = [req.message for req in batch.requests]
        
        if not messages_list:
            return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."
        
        prompt = f"""–°–æ–∑–¥–∞–π —Å–≤—è–∑–Ω—ã–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –µ–¥–∏–Ω–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ.

–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'; '.join(messages_list)}

–í–ê–ñ–ù–û: 
- –ú–∞–∫—Å–∏–º—É–º 150 —Å–ª–æ–≤
- –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤—è–∑–Ω—ã–º –∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞–∑—ã –∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
- –°–æ–∑–¥–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
- –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
        
        mixed_text = await get_openai_response(prompt)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–µ–≤–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        mixed_text += " –ú—Ä–∞—á–Ω—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Ä–µ–∞–ª–∏–∑–º –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –ü–∏—Ä–∞—Ç–æ–≤ –∫–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è; –º–æ—Ä—Å–∫–∞—è –¥—ã–º–∫–∞, –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —Ä–∏–º-—Å–≤–µ—Ç; –ø–∞–ª–∏—Ç—Ä–∞: —Å—Ç–∞–ª—å/—Å–≤–∏–Ω–µ—Ü –≤–æ–¥—ã, –∏–∑—É–º—Ä—É–¥/–±–∏—Ä—é–∑–∞, –º–æ—Ö, –º–æ–∫—Ä–æ–µ –¥–µ—Ä–µ–≤–æ, –ø–∞—Ç–∏–Ω–∞ –±—Ä–æ–Ω–∑—ã, —è–Ω—Ç–∞—Ä–Ω—ã–µ –±–ª–∏–∫–∏; —Ñ–∞–∫—Ç—É—Ä—ã: —Å–æ–ª—å –Ω–∞ –∫–∞–Ω–∞—Ç–∞—Ö, –∫–∞–º–µ–Ω—å, —Ä–≤–∞–Ω–∞—è –ø–∞—Ä—É—Å–∏–Ω–∞, –±—Ä—ã–∑–≥–∏; —à–∏—Ä–æ–∫–∏–π –ø–ª–∞–Ω, –º–∞—Å—à—Ç–∞–±, –±–µ–∑ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏—Ü."
        
        return mixed_text
    
    async def _generate_batch_images(self, batch: Batch, mixed_text: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±–∞—Ç—á–∞"""
        generated_images = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        # (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å)
        try:
            image_path = await self._generate_single_image(mixed_text, batch.id)
            if image_path:
                generated_images.append(image_path)
                print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            raise
        
        return generated_images
    
    async def _generate_single_image(self, prompt: str, batch_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∫–≤–æ—Ç—ã"""
        print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–∞—Ç—á–∞ {batch_id}...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∫–≤–æ—Ç—ã
            full_prompt = f"–°–æ–∑–¥–∞–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {prompt}"
            image_b64 = await generate_image_with_retry(full_prompt)
            
        except GeminiQuotaError as e:
            print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Gemini API: {e}")
            if e.retry_after:
                print(f"‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥")
            raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ({e})")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            raise
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        filename = f"batch_{batch_id}_{uuid.uuid4().hex[:8]}_{int(time.time())}.png"
        filepath = os.path.join(GENERATED_IMAGES_FOLDER, filename)
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ 1920x1280
        image_data = base64.b64decode(image_b64)
        
        try:
            with Image.open(BytesIO(image_data)) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∏ –æ–±—Ä–µ–∑–∫–æ–π –ø–æ —Ü–µ–Ω—Ç—Ä—É
                img = ImageOps.fit(img, (1920, 1280), Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG
                img.save(filepath, 'PNG')
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–æ —Ä–∞–∑–º–µ—Ä–∞ 1920x1280 –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        except Exception as e:
            # –ï—Å–ª–∏ PIL –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª: {e}")
            with open(filepath, 'wb') as f:
                f.write(image_data)
        
        return filepath
    
    def get_batch_status(self, batch_id: str) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ç—á–∞"""
        batch = queue_manager._find_batch(batch_id)
        if not batch:
            return None
        
        return {
            "batch_id": batch.id,
            "status": batch.status,
            "requests_count": len(batch.requests),
            "created_at": batch.created_at,
            "started_at": batch.started_at,
            "completed_at": batch.completed_at,
            "mixed_text": batch.mixed_text,
            "generated_images_count": len(batch.generated_images) if batch.generated_images else 0,
            "generated_images": batch.generated_images or []
        }
    
    def get_processing_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return {
            "is_processing": self.is_processing,
            "current_batch_id": self.current_batch_id
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
batch_generator = BatchImageGenerator()


