#!/usr/bin/env python3
"""
–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –±–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
"""

import asyncio
import logging
import time
import os
import base64
from typing import Optional, List, Dict
from PIL import Image, ImageOps
from io import BytesIO

from smart_batch_manager import smart_batch_manager, BatchStatus, SmartBatch
from openai_client import get_openai_response
from gemini_client import generate_image_with_retry, GeminiQuotaError
from config import GENERATED_IMAGES_FOLDER

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞
try:
    from prompt_manager import get_current_base_prompt
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –∏–º–ø–æ—Ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    def get_current_base_prompt():
        return "–ú—Ä–∞—á–Ω—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Ä–µ–∞–ª–∏–∑–º –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –ü–∏—Ä–∞—Ç–æ–≤ –∫–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è; –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å –ø–∞—Ä—É—Å–∞–º–∏ –∏ –ø—É—à–∫–∞–º–∏; –ø–∏—Ä–∞—Ç—ã; –º–æ—Ä—Å–∫–∞—è –¥—ã–º–∫–∞, –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —Ä–∏–º-—Å–≤–µ—Ç; –ø–∞–ª–∏—Ç—Ä–∞: —Å—Ç–∞–ª—å/—Å–≤–∏–Ω–µ—Ü –≤–æ–¥—ã, –∏–∑—É–º—Ä—É–¥/–±–∏—Ä—é–∑–∞, –º–æ—Ö, –º–æ–∫—Ä–æ–µ –¥–µ—Ä–µ–≤–æ, –ø–∞—Ç–∏–Ω–∞ –±—Ä–æ–Ω–∑—ã, —è–Ω—Ç–∞—Ä–Ω—ã–µ –±–ª–∏–∫–∏; —Ñ–∞–∫—Ç—É—Ä—ã: —Å–æ–ª—å –Ω–∞ –∫–∞–Ω–∞—Ç–∞—Ö, –∫–∞–º–µ–Ω—å, —Ä–≤–∞–Ω–∞—è –ø–∞—Ä—É—Å–∏–Ω–∞, –±—Ä—ã–∑–≥–∏; —à–∏—Ä–æ–∫–∏–π –ø–ª–∞–Ω, –º–∞—Å—à—Ç–∞–±, –±–µ–∑ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏—Ü"


class SequentialBatchProcessor:
    """
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –±–∞—Ç—á–µ–π
    
    –õ–æ–≥–∏–∫–∞:
    1. –ë–µ—Ä–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    2. –°–æ–∑–¥–∞–µ—Ç –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ LLM (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)
    3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    4. –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    5. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∞—Ç—á—É
    """
    
    MAX_MIXED_TEXT_LENGTH = 100
    IMAGE_SIZE = (1920, 1280)
    
    def __init__(self):
        self.is_processing = False
        self.current_batch_id: Optional[str] = None
        self.processing_stats = {
            'total_processed': 0,
            'total_failed': 0,
            'total_images_generated': 0,
            'average_processing_time': 0.0
        }
        
        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(GENERATED_IMAGES_FOLDER, exist_ok=True)
        
        logger.info("üöÄ SequentialBatchProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def process_next_batch(self) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –±–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if self.is_processing:
            logger.warning("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á
        batch = smart_batch_manager.get_next_batch()
        if not batch:
            logger.debug("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False
        
        self.is_processing = True
        self.current_batch_id = batch.id
        
        try:
            logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {batch.id[:8]} —Å {batch.message_count} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
            
            # –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–û–±—Ä–∞–±–æ—Ç–∫–∞"
            smart_batch_manager.update_batch_status(batch.id, BatchStatus.PROCESSING)
            
            # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            mixed_text = await self._create_mixed_text(batch)
            logger.info(f"‚úÖ –ú–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω ({len(mixed_text)} —Å–∏–º–≤–æ–ª–æ–≤): {mixed_text}")
            
            smart_batch_manager.update_batch_status(
                batch.id, 
                BatchStatus.MIXED, 
                mixed_text=mixed_text
            )
            
            # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path = await self._generate_and_save_image(batch, mixed_text)
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path}")
            
            # –®–∞–≥ 4: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            smart_batch_manager.update_batch_status(
                batch.id,
                BatchStatus.COMPLETED,
                image_path=image_path
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_stats(batch, success=True)
            
            processing_time = batch.processing_time or 0.0
            logger.info(f"üéâ –ë–∞—Ç—á {batch.id[:8]} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {processing_time:.2f}s")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {batch.id[:8]}: {e}", exc_info=True)
            
            smart_batch_manager.update_batch_status(
                batch.id,
                BatchStatus.FAILED,
                error_message=str(e)
            )
            
            self._update_stats(batch, success=False)
            return False
            
        finally:
            self.is_processing = False
            self.current_batch_id = None
    
    async def _create_mixed_text(self, batch: SmartBatch) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —è—Ä–∫–∏–π –∏ –∫—Ä–∞—Å–∏–≤—ã–π –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –±–∞—Ç—á–∞
        
        Args:
            batch: –ë–∞—Ç—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            str: –ú–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)
        """
        messages_content = [msg.content for msg in batch.messages]
        
        if not messages_content:
            raise ValueError("–ë–∞—Ç—á –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
        if len(messages_content) == 1:
            single_message = messages_content[0]
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if len(single_message) <= self.MAX_MIXED_TEXT_LENGTH:
                return single_message
            
            # –ò–Ω–∞—á–µ —Å–æ–∫—Ä–∞—â–∞–µ–º —á–µ—Ä–µ–∑ LLM
            prompt = f"""–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —è—Ä–∫–æ–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ {self.MAX_MIXED_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤:

–°–æ–æ–±—â–µ–Ω–∏–µ: {single_message}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ú–∞–∫—Å–∏–º—É–º {self.MAX_MIXED_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤
- –Ø—Ä–∫–æ–µ –∏ –æ–±—Ä–∞–∑–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π

–ü—Ä–∏–º–µ—Ä: "–ë–µ—Å–∫—Ä–∞–π–Ω–µ–µ –º–æ—Ä–µ, —à—Ç–æ—Ä–º, –∫–æ—Ä–∞–±–ª—å –ø–∏—Ä–∞—Ç–æ–≤, –∑–æ–ª–æ—Ç—ã–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"""
        
        else:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            combined = "; ".join(messages_content)
            
            prompt = f"""–û–±—ä–µ–¥–∏–Ω–∏ —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–¥–Ω–æ —è—Ä–∫–æ–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ {self.MAX_MIXED_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤:

–°–æ–æ–±—â–µ–Ω–∏—è: {combined}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ú–∞–∫—Å–∏–º—É–º {self.MAX_MIXED_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤
- –û–±—ä–µ–¥–∏–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ –æ–±—Ä–∞–∑—ã –∏ —ç–º–æ—Ü–∏–∏
- –Ø—Ä–∫–æ–µ –∏ –∫—Ä–∞—Å–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π

–ü—Ä–∏–º–µ—Ä: "–¢—É–º–∞–Ω–Ω–æ–µ –º–æ—Ä–µ, –ø–∏—Ä–∞—Ç—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å, –º–∏—Å—Ç–∏–∫–∞, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –∑–æ–ª–æ—Ç–æ"""
        
        try:
            mixed_text = await get_openai_response(prompt)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ None
            if mixed_text is None:
                logger.warning("‚ö†Ô∏è get_openai_response –≤–µ—Ä–Ω—É–ª None, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                raise Exception("OpenAI response is None")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
            if len(mixed_text) > self.MAX_MIXED_TEXT_LENGTH:
                mixed_text = mixed_text[:self.MAX_MIXED_TEXT_LENGTH - 3] + "..."
            
            return mixed_text.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ LLM: {e}")
            
            # Fallback: –ø—Ä–æ—Å—Ç–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
            fallback = " ".join(messages_content[:3])
            if len(fallback) > self.MAX_MIXED_TEXT_LENGTH:
                fallback = fallback[:self.MAX_MIXED_TEXT_LENGTH - 3] + "..."
            
            return fallback
    
    async def _generate_and_save_image(self, batch: SmartBatch, mixed_text: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ
        
        Args:
            batch: –ë–∞—Ç—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            mixed_text: –ú–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        smart_batch_manager.update_batch_status(batch.id, BatchStatus.GENERATING)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        full_prompt = self._create_artistic_prompt(mixed_text)
        
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±–∞—Ç—á–∞ {batch.id[:8]}")
        logger.info(f"üìù –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç ({len(full_prompt)} —Å–∏–º–≤–æ–ª–æ–≤): {full_prompt[:150]}...")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Gemini API
            image_b64 = await generate_image_with_retry(full_prompt)
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
            image_data = base64.b64decode(image_b64)
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = int(time.time())
            filename = f"batch_{batch.id[:8]}_{timestamp}.png"
            filepath = os.path.join(GENERATED_IMAGES_FOLDER, filename)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self._process_and_save_image(image_data, filepath)
            
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
            return filepath
            
        except GeminiQuotaError as e:
            logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Gemini API: {e}")
            raise Exception(f"–ö–≤–æ—Ç–∞ API –ø—Ä–µ–≤—ã—à–µ–Ω–∞: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            raise
    
    def _create_artistic_prompt(self, mixed_text: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            mixed_text: –ú–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
        Returns:
            str: –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mixed_text –Ω–µ None
        if mixed_text is None:
            logger.warning("‚ö†Ô∏è mixed_text is None, using fallback")
            mixed_text = "–º–æ—Ä—Å–∫–æ–π –ø–µ–π–∑–∞–∂, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, —Ç–∞–π–Ω–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        try:
            base_prompt = get_current_base_prompt()
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞
            if isinstance(base_prompt, str):
                # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã Unicode
                safe_base_prompt = base_prompt.encode('utf-8', errors='ignore').decode('utf-8')
            else:
                safe_base_prompt = str(base_prompt)
            
            style_addition = f" {safe_base_prompt}"
        except UnicodeDecodeError as e:
            logger.error(f"UnicodeDecodeError –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞: {e}")
            # Fallback –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—Ç–∏–ª—å
            style_addition = " –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Å—Ç–∏–ª—å; —à–∏—Ä–æ–∫–∏–π –ø–ª–∞–Ω, –º–∞—Å—à—Ç–∞–±, –±–µ–∑ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏—Ü."
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            # Fallback –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—Ç–∏–ª—å
            style_addition = " –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Å—Ç–∏–ª—å; —à–∏—Ä–æ–∫–∏–π –ø–ª–∞–Ω, –º–∞—Å—à—Ç–∞–±, –±–µ–∑ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏—Ü."
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ mixed_text
        try:
            if isinstance(mixed_text, str):
                safe_mixed_text = mixed_text.encode('utf-8', errors='ignore').decode('utf-8')
            else:
                safe_mixed_text = str(mixed_text)
        except UnicodeDecodeError as e:
            logger.error(f"UnicodeDecodeError –≤ mixed_text: {e}")
            safe_mixed_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        full_prompt = f"–°–æ–∑–¥–∞–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {safe_mixed_text}{style_addition}"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø—Ä–æ–º–ø—Ç–∞
        max_prompt_length = 500
        if len(full_prompt) > max_prompt_length:
            # –°–æ–∫—Ä–∞—â–∞–µ–º —Å—Ç–∏–ª–µ–≤—É—é —á–∞—Å—Ç—å
            available_for_style = max_prompt_length - len(mixed_text) - 50
            if available_for_style > 0:
                style_addition = style_addition[:available_for_style] + "..."
                full_prompt = f"–°–æ–∑–¥–∞–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {mixed_text}{style_addition}"
            else:
                # –ï—Å–ª–∏ –¥–∞–∂–µ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                full_prompt = f"–°–æ–∑–¥–∞–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {mixed_text}"
        
        return full_prompt
    
    def _process_and_save_image(self, image_data: bytes, filepath: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ
        
        Args:
            image_data: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç–∞—Ö
            filepath: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            with Image.open(BytesIO(image_data)) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∏ –æ–±—Ä–µ–∑–∫–æ–π
                img = ImageOps.fit(img, self.IMAGE_SIZE, Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG
                img.save(filepath, 'PNG', optimize=True)
                
                logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.IMAGE_SIZE[0]}x{self.IMAGE_SIZE[1]}")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ PIL: {e}")
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            with open(filepath, 'wb') as f:
                f.write(image_data)
    
    def _update_stats(self, batch: SmartBatch, success: bool):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if success:
            self.processing_stats['total_processed'] += 1
            if batch.image_path:
                self.processing_stats['total_images_generated'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if batch.processing_time:
                current_avg = self.processing_stats['average_processing_time']
                total = self.processing_stats['total_processed']
                
                new_avg = ((current_avg * (total - 1)) + batch.processing_time) / total
                self.processing_stats['average_processing_time'] = new_avg
        else:
            self.processing_stats['total_failed'] += 1
    
    async def process_all_batches(self) -> Dict[str, int]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞—Ç—á–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –±–∞—Ç—á–µ–π")
        
        processed = 0
        failed = 0
        
        while True:
            success = await self.process_next_batch()
            
            if success:
                processed += 1
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –±–∞—Ç—á–∏
                next_batch = smart_batch_manager.get_next_batch()
                if not next_batch:
                    break
                failed += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(0.5)
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {processed} —É—Å–ø–µ—à–Ω–æ, {failed} —Å –æ—à–∏–±–∫–∞–º–∏")
        
        return {
            'processed': processed,
            'failed': failed,
            'total': processed + failed
        }
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return {
            **self.processing_stats,
            'is_processing': self.is_processing,
            'current_batch_id': self.current_batch_id
        }
    
    def reset_stats(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.processing_stats = {
            'total_processed': 0,
            'total_failed': 0,
            'total_images_generated': 0,
            'average_processing_time': 0.0
        }
        logger.info("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
sequential_processor = SequentialBatchProcessor()

