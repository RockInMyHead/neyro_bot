"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
import time
import uuid
from typing import List, Dict, Optional
from dataclasses import dataclass
from simple_message_db import message_db

@dataclass
class ImageRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    id: str
    user_id: int
    username: str
    first_name: str
    message: str
    timestamp: float
    status: str = "pending"  # pending, processing, completed, failed
    batch_id: Optional[str] = None
    generated_image_path: Optional[str] = None
    error_message: Optional[str] = None

@dataclass
class Batch:
    """–ë–∞—Ç—á –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    id: str
    requests: List[ImageRequest]
    created_at: float
    status: str = "pending"  # pending, processing, completed, failed
    started_at: Optional[float] = None
    completed_at: Optional[float] = None
    mixed_text: Optional[str] = None
    generated_images: Optional[List[str]] = None  # –ü—É—Ç–∏ –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º

class ImageQueueManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.requests: List[ImageRequest] = []
        self.batches: List[Batch] = []
        self.current_batch: Optional[Batch] = None
        self.batch_size = 14  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        
    def add_request(self, user_id: int, username: str, first_name: str, message: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å"""
        request_id = str(uuid.uuid4())
        request = ImageRequest(
            id=request_id,
            user_id=user_id,
            username=username,
            first_name=first_name,
            message=message,
            timestamp=time.time()
        )
        
        self.requests.append(request)
        print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å: {request_id} –æ—Ç {first_name}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –±–∞—Ç—á –µ—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        self._try_create_batch()
        
        return request_id
    
    def _try_create_batch(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∞—Ç—á –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        pending_requests = [r for r in self.requests if r.status == "pending"]
        
        if len(pending_requests) >= self.batch_size:
            # –°–æ–∑–¥–∞–µ–º –±–∞—Ç—á –∏–∑ –ø–µ—Ä–≤—ã—Ö 14 –∑–∞–ø—Ä–æ—Å–æ–≤
            batch_requests = pending_requests[:self.batch_size]
            
            batch_id = str(uuid.uuid4())
            batch = Batch(
                id=batch_id,
                requests=batch_requests,
                created_at=time.time()
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–æ–≤
            for request in batch_requests:
                request.batch_id = batch_id
                request.status = "in_batch"
            
            self.batches.append(batch)
            print(f"üéØ –°–æ–∑–¥–∞–Ω –±–∞—Ç—á {batch_id} —Å {len(batch_requests)} –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    
    def get_next_batch(self) -> Optional[Batch]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.current_batch and self.current_batch.status == "processing":
            return None  # –¢–µ–∫—É—â–∏–π –±–∞—Ç—á –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π pending –±–∞—Ç—á
        for batch in self.batches:
            if batch.status == "pending":
                self.current_batch = batch
                return batch
        
        return None
    
    def start_batch_processing(self, batch_id: str):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞"""
        batch = self._find_batch(batch_id)
        if batch:
            batch.status = "processing"
            batch.started_at = time.time()
            print(f"üöÄ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {batch_id}")
    
    def complete_batch(self, batch_id: str, mixed_text: str, generated_images: List[str]):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞"""
        batch = self._find_batch(batch_id)
        if batch:
            batch.status = "completed"
            batch.completed_at = time.time()
            batch.mixed_text = mixed_text
            batch.generated_images = generated_images
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–∞—Ç—á–µ
            for request in batch.requests:
                request.status = "completed"
            
            print(f"‚úÖ –ë–∞—Ç—á {batch_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generated_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    def fail_batch(self, batch_id: str, error_message: str):
        """–ü–æ–º–µ—á–∞–µ—Ç –±–∞—Ç—á –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π"""
        batch = self._find_batch(batch_id)
        if batch:
            batch.status = "failed"
            batch.completed_at = time.time()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–∞—Ç—á–µ
            for request in batch.requests:
                request.status = "failed"
                request.error_message = error_message
            
            print(f"‚ùå –ë–∞—Ç—á {batch_id} –ø—Ä–æ–≤–∞–ª–µ–Ω: {error_message}")
    
    def _find_batch(self, batch_id: str) -> Optional[Batch]:
        """–ù–∞—Ö–æ–¥–∏—Ç –±–∞—Ç—á –ø–æ ID"""
        for batch in self.batches:
            if batch.id == batch_id:
                return batch
        return None
    
    def get_queue_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏"""
        total_requests = len(self.requests)
        pending_requests = len([r for r in self.requests if r.status == "pending"])
        in_batch_requests = len([r for r in self.requests if r.status == "in_batch"])
        processing_requests = len([r for r in self.requests if r.status == "processing"])
        completed_requests = len([r for r in self.requests if r.status == "completed"])
        failed_requests = len([r for r in self.requests if r.status == "failed"])
        
        total_batches = len(self.batches)
        pending_batches = len([b for b in self.batches if b.status == "pending"])
        processing_batches = len([b for b in self.batches if b.status == "processing"])
        completed_batches = len([b for b in self.batches if b.status == "completed"])
        failed_batches = len([b for b in self.batches if b.status == "failed"])
        
        return {
            "total_requests": total_requests,
            "pending_requests": pending_requests,
            "in_batch_requests": in_batch_requests,
            "processing_requests": processing_requests,
            "completed_requests": completed_requests,
            "failed_requests": failed_requests,
            "total_batches": total_batches,
            "pending_batches": pending_batches,
            "processing_batches": processing_batches,
            "completed_batches": completed_batches,
            "failed_batches": failed_batches,
            "current_batch_id": self.current_batch.id if self.current_batch else None,
            "batch_size": self.batch_size
        }
    
    def get_current_batch(self) -> Optional[Batch]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π –±–∞—Ç—á"""
        return self.current_batch
    
    def get_batch_requests(self, batch_id: str) -> List[ImageRequest]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –±–∞—Ç—á–∞"""
        batch = self._find_batch(batch_id)
        return batch.requests if batch else []
    
    def clear_completed_requests(self, older_than_hours: int = 24):
        """–û—á–∏—â–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        cutoff_time = time.time() - (older_than_hours * 3600)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        old_requests = [r for r in self.requests if r.status in ["completed", "failed"] and r.timestamp < cutoff_time]
        self.requests = [r for r in self.requests if r not in old_requests]
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±–∞—Ç—á–∏
        old_batches = [b for b in self.batches if b.status in ["completed", "failed"] and b.created_at < cutoff_time]
        self.batches = [b for b in self.batches if b not in old_batches]
        
        print(f"üßπ –û—á–∏—â–µ–Ω–æ {len(old_requests)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ {len(old_batches)} —Å—Ç–∞—Ä—ã—Ö –±–∞—Ç—á–µ–π")
        return len(old_requests) + len(old_batches)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
queue_manager = ImageQueueManager()
