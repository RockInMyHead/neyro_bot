#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
"""

import asyncio
import aiohttp
import time
import json
import random

BASE_URL = "http://localhost:8000"

async def test_unicode_handling(session):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É Unicode –æ—à–∏–±–æ–∫"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Unicode –æ—à–∏–±–æ–∫...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    test_cases = [
        "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "–°–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏: üòÄüéâüöÄ",
        "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: \x00\x01\x02",
        "–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç: –ø—Ä–∏–≤–µ—Ç –º–∏—Ä",
        "–°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: Hello ‰∏ñÁïå üåç"
    ]
    
    success_count = 0
    error_count = 0
    
    for i, message in enumerate(test_cases):
        try:
            async with session.post(
                f"{BASE_URL}/api/chat",
                json={
                    'message': message,
                    'user_id': f'test_unicode_{i}',
                    'username': f'user_{i}',
                    'first_name': f'User {i}'
                },
                timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                if response.status < 400:
                    success_count += 1
                    print(f"  ‚úÖ –¢–µ—Å—Ç {i+1}: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                else:
                    error_count += 1
                    print(f"  ‚ùå –¢–µ—Å—Ç {i+1}: HTTP {response.status}")
        except Exception as e:
            error_count += 1
            print(f"  ‚ùå –¢–µ—Å—Ç {i+1}: –û—à–∏–±–∫–∞ {e}")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç Unicode —Ç–µ—Å—Ç–æ–≤: {success_count} —É—Å–ø–µ—à–Ω—ã—Ö, {error_count} –æ—à–∏–±–æ–∫")
    return success_count, error_count

async def test_endpoint_methods(session):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã HTTP –¥–ª—è endpoints"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –º–µ—Ç–æ–¥—ã endpoints...")
    
    endpoints = [
        ('GET', '/api/chat?user_id=123'),
        ('POST', '/api/chat'),
        ('GET', '/api/mini-app/latest-message'),
        ('GET', '/api/check-chat-clear-status')
    ]
    
    success_count = 0
    error_count = 0
    
    for method, endpoint in endpoints:
        try:
            if method == 'GET':
                async with session.get(f"{BASE_URL}{endpoint}", timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status < 400:
                        success_count += 1
                        print(f"  ‚úÖ {method} {endpoint}: HTTP {response.status}")
                    else:
                        error_count += 1
                        print(f"  ‚ùå {method} {endpoint}: HTTP {response.status}")
            elif method == 'POST':
                async with session.post(
                    f"{BASE_URL}{endpoint}",
                    json={'message': 'test', 'user_id': 123},
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status < 400:
                        success_count += 1
                        print(f"  ‚úÖ {method} {endpoint}: HTTP {response.status}")
                    else:
                        error_count += 1
                        print(f"  ‚ùå {method} {endpoint}: HTTP {response.status}")
        except Exception as e:
            error_count += 1
            print(f"  ‚ùå {method} {endpoint}: –û—à–∏–±–∫–∞ {e}")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç HTTP –º–µ—Ç–æ–¥–æ–≤: {success_count} —É—Å–ø–µ—à–Ω—ã—Ö, {error_count} –æ—à–∏–±–æ–∫")
    return success_count, error_count

async def test_concurrent_requests(session, num_requests=20):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {num_requests} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    tasks = []
    for i in range(num_requests):
        task = session.post(
            f"{BASE_URL}/api/chat",
            json={
                'message': f'Concurrent test message {i}',
                'user_id': f'concurrent_{i}',
                'username': f'user_{i}',
                'first_name': f'User {i}'
            },
            timeout=aiohttp.ClientTimeout(total=10)
        )
        tasks.append(task)
    
    start_time = time.time()
    results = await asyncio.gather(*tasks, return_exceptions=True)
    end_time = time.time()
    
    success_count = sum(1 for r in results if not isinstance(r, Exception) and r.status < 400)
    error_count = len(results) - success_count
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_count} —É—Å–ø–µ—à–Ω—ã—Ö, {error_count} –æ—à–∏–±–æ–∫")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f}s")
    
    return success_count, error_count

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("="*50)
    
    connector = aiohttp.TCPConnector(limit=50, limit_per_host=25)
    timeout = aiohttp.ClientTimeout(total=30)
    
    async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
        # –¢–µ—Å—Ç 1: Unicode –æ–±—Ä–∞–±–æ—Ç–∫–∞
        unicode_success, unicode_errors = await test_unicode_handling(session)
        
        # –¢–µ—Å—Ç 2: HTTP –º–µ—Ç–æ–¥—ã
        method_success, method_errors = await test_endpoint_methods(session)
        
        # –¢–µ—Å—Ç 3: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        concurrent_success, concurrent_errors = await test_concurrent_requests(session)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        total_success = unicode_success + method_success + concurrent_success
        total_errors = unicode_errors + method_errors + concurrent_errors
        
        print("\n" + "="*50)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("="*50)
        print(f"‚úÖ –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {total_success}")
        print(f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {(total_success / (total_success + total_errors) * 100):.1f}%")
        
        if total_errors == 0:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        elif total_errors < 5:
            print("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")

if __name__ == "__main__":
    asyncio.run(main())
