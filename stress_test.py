#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Neuroevent Bot
–§–æ–∫—É—Å –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

import asyncio
import aiohttp
import time
import json
import random
import statistics
from datetime import datetime
import threading
import sys

BASE_URL = "https://neuroevent.ru"

class StressTester:
    def __init__(self):
        self.results = {
            'scenarios': {},
            'critical_errors': [],
            'performance_issues': []
        }
        self.lock = threading.Lock()
    
    def log(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
    
    async def test_concurrent_messages(self, session, num_users=100):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.log(f"üì® –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {num_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        start_time = time.time()
        tasks = []
        
        for i in range(num_users):
            message_data = {
                'message': f'Stress test message from user {i}',
                'user_id': f'stress_user_{i}'
            }
            task = self.send_message(session, message_data)
            tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        end_time = time.time()
        
        successful = sum(1 for r in results if isinstance(r, dict) and r.get('success', False))
        failed = len(results) - successful
        
        scenario_result = {
            'name': 'Concurrent Messages',
            'users': num_users,
            'duration': end_time - start_time,
            'successful': successful,
            'failed': failed,
            'success_rate': (successful / len(results)) * 100,
            'avg_time': (end_time - start_time) / len(results)
        }
        
        self.results['scenarios']['concurrent_messages'] = scenario_result
        self.log(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{len(results)} —É—Å–ø–µ—à–Ω—ã—Ö ({scenario_result['success_rate']:.1f}%)")
        
        return scenario_result
    
    async def test_admin_panel_load(self, session, num_admins=20):
        """–¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        self.log(f"üë®‚Äçüíº –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å {num_admins} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")
        
        start_time = time.time()
        tasks = []
        
        for i in range(num_admins):
            task = self.simulate_admin_session(session, f'admin_{i}')
            tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        end_time = time.time()
        
        successful = sum(1 for r in results if isinstance(r, dict) and r.get('success', False))
        failed = len(results) - successful
        
        scenario_result = {
            'name': 'Admin Panel Load',
            'admins': num_admins,
            'duration': end_time - start_time,
            'successful': successful,
            'failed': failed,
            'success_rate': (successful / len(results)) * 100,
            'avg_time': (end_time - start_time) / len(results)
        }
        
        self.results['scenarios']['admin_panel'] = scenario_result
        self.log(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{len(results)} —É—Å–ø–µ—à–Ω—ã—Ö ({scenario_result['success_rate']:.1f}%)")
        
        return scenario_result
    
    async def test_image_generation_stress(self, session, num_requests=50):
        """–¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        self.log(f"üñºÔ∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ({num_requests} –∑–∞–ø—Ä–æ—Å–æ–≤)")
        
        start_time = time.time()
        tasks = []
        
        for i in range(num_requests):
            task = self.test_image_generation(session, f'image_test_{i}')
            tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        end_time = time.time()
        
        successful = sum(1 for r in results if isinstance(r, dict) and r.get('success', False))
        failed = len(results) - successful
        
        scenario_result = {
            'name': 'Image Generation Stress',
            'requests': num_requests,
            'duration': end_time - start_time,
            'successful': successful,
            'failed': failed,
            'success_rate': (successful / len(results)) * 100,
            'avg_time': (end_time - start_time) / len(results)
        }
        
        self.results['scenarios']['image_generation'] = scenario_result
        self.log(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{len(results)} —É—Å–ø–µ—à–Ω—ã—Ö ({scenario_result['success_rate']:.1f}%)")
        
        return scenario_result
    
    async def test_database_stress(self, session, num_operations=200):
        """–¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.log(f"üóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ({num_operations} –æ–ø–µ—Ä–∞—Ü–∏–π)")
        
        start_time = time.time()
        tasks = []
        
        for i in range(num_operations):
            task = self.test_database_operation(session, f'db_test_{i}')
            tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        end_time = time.time()
        
        successful = sum(1 for r in results if isinstance(r, dict) and r.get('success', False))
        failed = len(results) - successful
        
        scenario_result = {
            'name': 'Database Stress',
            'operations': num_operations,
            'duration': end_time - start_time,
            'successful': successful,
            'failed': failed,
            'success_rate': (successful / len(results)) * 100,
            'avg_time': (end_time - start_time) / len(results)
        }
        
        self.results['scenarios']['database'] = scenario_result
        self.log(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{len(results)} —É—Å–ø–µ—à–Ω—ã—Ö ({scenario_result['success_rate']:.1f}%)")
        
        return scenario_result
    
    async def send_message(self, session, message_data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            async with session.post(
                f"{BASE_URL}/api/message",
                json=message_data,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                return {
                    'success': response.status < 400,
                    'status': response.status,
                    'response_time': time.time()
                }
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'response_time': time.time()
            }
    
    async def simulate_admin_session(self, session, admin_id):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω endpoints
            endpoints = [
                '/api/admin/check-auth',
                '/api/admin/smart-batches/stats',
                '/api/admin/smart-batches/list',
                '/api/admin/messages'
            ]
            
            start_time = time.time()
            for endpoint in endpoints:
                async with session.get(f"{BASE_URL}{endpoint}", timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status >= 400:
                        return {
                            'success': False,
                            'error': f'HTTP {response.status} on {endpoint}',
                            'response_time': time.time()
                        }
            
            return {
                'success': True,
                'response_time': time.time() - start_time
            }
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'response_time': time.time()
            }
    
    async def test_image_generation(self, session, test_id):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            async with session.get(
                f"{BASE_URL}/api/admin/smart-batches/images",
                timeout=aiohttp.ClientTimeout(total=60)
            ) as response:
                return {
                    'success': response.status < 400,
                    'status': response.status,
                    'response_time': time.time()
                }
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'response_time': time.time()
            }
    
    async def test_database_operation(self, session, test_id):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏
            async with session.get(
                f"{BASE_URL}/api/chat?user_id={test_id}",
                timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                return {
                    'success': response.status < 400,
                    'status': response.status,
                    'response_time': time.time()
                }
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'response_time': time.time()
            }
    
    async def run_stress_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã"""
        self.log("üî• –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
        
        connector = aiohttp.TCPConnector(limit=100, limit_per_host=50)
        timeout = aiohttp.ClientTimeout(total=60)
        
        async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            try:
                async with session.get(f"{BASE_URL}/", timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status != 200:
                        self.log(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status}")
                        return
            except Exception as e:
                self.log(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
                return
            
            self.log("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            await self.test_concurrent_messages(session, 100)
            await asyncio.sleep(2)
            
            await self.test_admin_panel_load(session, 20)
            await asyncio.sleep(2)
            
            await self.test_image_generation_stress(session, 30)
            await asyncio.sleep(2)
            
            await self.test_database_stress(session, 100)
    
    def generate_stress_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "="*80)
        print("üî• –û–¢–ß–ï–¢ –û –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        print("="*80)
        
        for scenario_name, result in self.results['scenarios'].items():
            print(f"\nüìä {result['name']}:")
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result['success_rate']:.1f}%")
            print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {result['successful']}")
            print(f"   –û—à–∏–±–æ–∫: {result['failed']}")
            print(f"   –í—Ä–µ–º—è: {result['duration']:.2f}s")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é: {result['avg_time']:.3f}s")
            
            # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
            if result['success_rate'] < 90:
                self.results['critical_errors'].append(f"{result['name']}: –Ω–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å ({result['success_rate']:.1f}%)")
            
            if result['avg_time'] > 5.0:
                self.results['performance_issues'].append(f"{result['name']}: –º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ({result['avg_time']:.3f}s)")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:")
        
        if self.results['critical_errors']:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for error in self.results['critical_errors']:
                print(f"   ‚Ä¢ {error}")
        
        if self.results['performance_issues']:
            print("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
            for issue in self.results['performance_issues']:
                print(f"   ‚Ä¢ {issue}")
        
        if not self.results['critical_errors'] and not self.results['performance_issues']:
            print("‚úÖ –°–ò–°–¢–ï–ú–ê –£–°–¢–û–ô–ß–ò–í–ê –ö –ù–ê–ì–†–£–ó–ö–ï!")
            print("   ‚Ä¢ –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
            print("   ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")
            print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        else:
            print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
            print("   ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–µ—Ä–∞")
            print("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
            print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        
        print("="*80)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî• NEUROEVENT BOT - –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("="*60)
    
    tester = StressTester()
    
    try:
        await tester.run_stress_tests()
        tester.generate_stress_report()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    try:
        import aiohttp
    except ImportError:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å aiohttp: pip install aiohttp")
        sys.exit(1)
    
    asyncio.run(main())
