#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Neuroevent Bot
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 1000 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import aiohttp
import time
import json
import random
import statistics
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
import threading
import sys
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BASE_URL = "https://neuroevent.ru"
TEST_USERS = 1000
CONCURRENT_REQUESTS = 50
TEST_DURATION = 300  # 5 –º–∏–Ω—É—Ç
REQUEST_TIMEOUT = 30

class LoadTester:
    def __init__(self):
        self.results = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'response_times': [],
            'errors': {},
            'endpoints': {},
            'start_time': None,
            'end_time': None
        }
        self.lock = threading.Lock()
        
    def log(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
    
    async def make_request(self, session, method, url, data=None, headers=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏"""
        start_time = time.time()
        
        try:
            async with session.request(
                method, url, 
                json=data, 
                headers=headers,
                timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
            ) as response:
                response_time = time.time() - start_time
                
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
                content = await response.text()
                
                with self.lock:
                    self.results['total_requests'] += 1
                    self.results['response_times'].append(response_time)
                    
                    if response.status < 400:
                        self.results['successful_requests'] += 1
                    else:
                        self.results['failed_requests'] += 1
                        error_key = f"HTTP_{response.status}"
                        self.results['errors'][error_key] = self.results['errors'].get(error_key, 0) + 1
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ endpoint
                    endpoint = url.replace(BASE_URL, '')
                    if endpoint not in self.results['endpoints']:
                        self.results['endpoints'][endpoint] = {
                            'requests': 0,
                            'success': 0,
                            'errors': 0,
                            'avg_time': 0,
                            'times': []
                        }
                    
                    ep = self.results['endpoints'][endpoint]
                    ep['requests'] += 1
                    ep['times'].append(response_time)
                    ep['avg_time'] = statistics.mean(ep['times'])
                    
                    if response.status < 400:
                        ep['success'] += 1
                    else:
                        ep['errors'] += 1
                
                return {
                    'status': response.status,
                    'response_time': response_time,
                    'content_length': len(content),
                    'success': response.status < 400
                }
                
        except asyncio.TimeoutError:
            response_time = time.time() - start_time
            with self.lock:
                self.results['total_requests'] += 1
                self.results['failed_requests'] += 1
                self.results['errors']['TIMEOUT'] = self.results['errors'].get('TIMEOUT', 0) + 1
                self.results['response_times'].append(response_time)
            
            return {
                'status': 'TIMEOUT',
                'response_time': response_time,
                'content_length': 0,
                'success': False
            }
            
        except Exception as e:
            response_time = time.time() - start_time
            with self.lock:
                self.results['total_requests'] += 1
                self.results['failed_requests'] += 1
                error_key = f"EXCEPTION_{type(e).__name__}"
                self.results['errors'][error_key] = self.results['errors'].get(error_key, 0) + 1
                self.results['response_times'].append(response_time)
            
            return {
                'status': 'ERROR',
                'response_time': response_time,
                'content_length': 0,
                'success': False,
                'error': str(e)
            }
    
    async def test_mini_app_endpoints(self, session, user_id):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoints Mini App"""
        endpoints = [
            ('GET', '/api/mini-app/latest-message'),
            ('GET', '/api/check-chat-clear-status'),
            ('POST', '/api/message', {'message': f'Test message from user {user_id}', 'user_id': f'user_{user_id}'}),
            ('GET', '/api/chat', {'user_id': f'user_{user_id}'})
        ]
        
        tasks = []
        for method, endpoint, *data in endpoints:
            url = f"{BASE_URL}{endpoint}"
            data = data[0] if data else None
            tasks.append(self.make_request(session, method, url, data))
        
        return await asyncio.gather(*tasks, return_exceptions=True)
    
    async def test_admin_endpoints(self, session, admin_id):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoints Admin Panel"""
        endpoints = [
            ('GET', '/api/admin/check-auth'),
            ('GET', '/api/admin/smart-batches/stats'),
            ('GET', '/api/admin/smart-batches/list'),
            ('GET', '/api/admin/smart-batches/current-mixed-text'),
            ('GET', '/api/admin/smart-batches/images'),
            ('GET', '/api/admin/messages')
        ]
        
        tasks = []
        for method, endpoint in endpoints:
            url = f"{BASE_URL}{endpoint}"
            tasks.append(self.make_request(session, method, url))
        
        return await asyncio.gather(*tasks, return_exceptions=True)
    
    async def test_static_resources(self, session, user_id):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã"""
        static_files = [
            '/static/mini_app/mini_app.css',
            '/static/mini_app/mini_app.js',
            '/static/mini_app/neuroevent_logo.png',
            '/static/admin_app/admin_mini_app.css',
            '/static/admin_app/admin_mini_app.js'
        ]
        
        tasks = []
        for file_path in static_files:
            url = f"{BASE_URL}{file_path}"
            tasks.append(self.make_request(session, 'GET', url))
        
        return await asyncio.gather(*tasks, return_exceptions=True)
    
    async def simulate_user_session(self, session, user_id, user_type='mini_app'):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if user_type == 'mini_app':
                # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Mini App
                await self.test_mini_app_endpoints(session, user_id)
                await asyncio.sleep(random.uniform(0.1, 0.5))  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await self.test_static_resources(session, user_id)
                
            elif user_type == 'admin':
                # –°–∏–º—É–ª—è—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await self.test_admin_endpoints(session, user_id)
                await asyncio.sleep(random.uniform(0.2, 1.0))  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def run_load_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.log(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {TEST_USERS} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        self.log(f"üéØ –¶–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä: {BASE_URL}")
        self.log(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: {TEST_DURATION} —Å–µ–∫—É–Ω–¥")
        self.log(f"üîÑ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {CONCURRENT_REQUESTS}")
        
        self.results['start_time'] = time.time()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        connector = aiohttp.TCPConnector(
            limit=CONCURRENT_REQUESTS * 2,
            limit_per_host=CONCURRENT_REQUESTS,
            ttl_dns_cache=300,
            use_dns_cache=True,
        )
        
        timeout = aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
        
        async with aiohttp.ClientSession(
            connector=connector,
            timeout=timeout,
            headers={'User-Agent': 'Neuroevent Load Tester 1.0'}
        ) as session:
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            self.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...")
            try:
                async with session.get(f"{BASE_URL}/", timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        self.log("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                    else:
                        self.log(f"‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
            except Exception as e:
                self.log(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.log("üî• –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            
            start_time = time.time()
            end_time = start_time + TEST_DURATION
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            tasks = []
            user_count = 0
            
            while time.time() < end_time and user_count < TEST_USERS:
                # –°–æ–∑–¥–∞–µ–º –±–∞—Ç—á –∑–∞–¥–∞—á
                batch_tasks = []
                for _ in range(min(CONCURRENT_REQUESTS, TEST_USERS - user_count)):
                    user_type = 'mini_app' if random.random() < 0.9 else 'admin'  # 90% –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 10% –∞–¥–º–∏–Ω–æ–≤
                    task = self.simulate_user_session(session, user_count, user_type)
                    batch_tasks.append(task)
                    user_count += 1
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á
                if batch_tasks:
                    await asyncio.gather(*batch_tasks, return_exceptions=True)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                await asyncio.sleep(0.1)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                elapsed = time.time() - start_time
                if int(elapsed) % 30 == 0 and int(elapsed) > 0:
                    self.log(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {self.results['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        self.results['end_time'] = time.time()
        self.log("‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        if not self.results['response_times']:
            self.log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        total_time = self.results['end_time'] - self.results['start_time']
        rps = self.results['total_requests'] / total_time if total_time > 0 else 0
        
        success_rate = (self.results['successful_requests'] / self.results['total_requests'] * 100) if self.results['total_requests'] > 0 else 0
        
        response_times = self.results['response_times']
        avg_response_time = statistics.mean(response_times)
        median_response_time = statistics.median(response_times)
        p95_response_time = sorted(response_times)[int(len(response_times) * 0.95)]
        p99_response_time = sorted(response_times)[int(len(response_times) * 0.99)]
        
        print("\n" + "="*80)
        print("üìä –û–¢–ß–ï–¢ –û –ù–ê–ì–†–£–ó–û–ß–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        print("="*80)
        print(f"üéØ –¶–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä: {BASE_URL}")
        print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {TEST_USERS}")
        print(f"üìà –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {rps:.2f}")
        print()
        
        print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.results['total_requests']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {self.results['successful_requests']} ({success_rate:.2f}%)")
        print(f"   –û—à–∏–±–æ–∫: {self.results['failed_requests']} ({100-success_rate:.2f}%)")
        print()
        
        print("‚è±Ô∏è  –í–†–ï–ú–Ø –û–¢–í–ï–¢–ê:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_response_time:.3f}s")
        print(f"   –ú–µ–¥–∏–∞–Ω–∞: {median_response_time:.3f}s")
        print(f"   95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {p95_response_time:.3f}s")
        print(f"   99-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {p99_response_time:.3f}s")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max(response_times):.3f}s")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {min(response_times):.3f}s")
        print()
        
        if self.results['errors']:
            print("‚ùå –û–®–ò–ë–ö–ò:")
            for error, count in self.results['errors'].items():
                print(f"   {error}: {count}")
            print()
        
        print("üîó –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û ENDPOINTS:")
        for endpoint, stats in self.results['endpoints'].items():
            success_rate_ep = (stats['success'] / stats['requests'] * 100) if stats['requests'] > 0 else 0
            print(f"   {endpoint}:")
            print(f"     –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['requests']}")
            print(f"     –£—Å–ø–µ—à–Ω—ã—Ö: {stats['success']} ({success_rate_ep:.1f}%)")
            print(f"     –û—à–∏–±–æ–∫: {stats['errors']}")
            print(f"     –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_time']:.3f}s")
            print()
        
        # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
        print("üéØ –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–û–î–ê–ö–®–ï–ù–£:")
        issues = []
        
        if success_rate < 95:
            issues.append(f"–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_rate:.1f}%")
        
        if avg_response_time > 2.0:
            issues.append(f"–í—ã—Å–æ–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.3f}s")
        
        if p95_response_time > 5.0:
            issues.append(f"–í—ã—Å–æ–∫–∏–π 95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {p95_response_time:.3f}s")
        
        if rps < 100:
            issues.append(f"–ù–∏–∑–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {rps:.1f} RPS")
        
        if issues:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–´:")
            for issue in issues:
                print(f"   ‚Ä¢ {issue}")
            print()
            print("üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤")
            print("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
            print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–≥—Ä—É–∑–∫–∏")
        else:
            print("‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
            print("   ‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            print("   ‚Ä¢ –ü—Ä–∏–µ–º–ª–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞")
            print("   ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π")
        
        print("="*80)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ NEUROEVENT BOT - –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("="*60)
    
    tester = LoadTester()
    
    try:
        await tester.run_load_test()
        tester.generate_report()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import aiohttp
    except ImportError:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å aiohttp: pip install aiohttp")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    asyncio.run(main())
