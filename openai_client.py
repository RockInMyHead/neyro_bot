#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API
"""

import openai
from config import OPENAI_API_KEY
import logging
import httpx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
PROXY_HOST = "185.68.186.35"
PROXY_PORT = 8000
PROXY_USERNAME = "uTGXAk"
PROXY_PASSWORD = "oYDLdR"

# –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏
http_client = httpx.Client(
    proxies={
        "http://": f"http://{PROXY_USERNAME}:{PROXY_PASSWORD}@{PROXY_HOST}:{PROXY_PORT}",
        "https://": f"http://{PROXY_USERNAME}:{PROXY_PASSWORD}@{PROXY_HOST}:{PROXY_PORT}"
    }
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏
client = openai.OpenAI(
    api_key=OPENAI_API_KEY,
    http_client=http_client
)

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–æ—Ç–∞
SYSTEM_PROMPT = """–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–µ Main Strings Orchestra. 

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–æ–Ω—Å —Ñ–∏–ª—å–º–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º - –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ
2. –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å - –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –µ–≥–æ –∑–∞ –æ—Ç–≤–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ –∏ –≤–µ–∂–ª–∏–≤–æ
3. –ù–ï –∑–∞–¥–∞–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
4. –ù–ï –≥–æ–≤–æ—Ä–∏ –æ –º—É–∑—ã–∫–µ
5. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É

–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:
- –ù–∞ –∞–Ω–æ–Ω—Å: "–ü–æ–Ω—è–ª, –∂–¥—É –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∑—Ä–∏—Ç–µ–ª–µ–π!"
- –ù–∞ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! ‚ú®" –∏–ª–∏ "–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! üé¨"
- –ù–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç: "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
"""

async def get_openai_response(user_message: str, conversation_history: list = None) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conversation_history (list): –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç OpenAI
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
        messages = [{"role": "system", "content": SYSTEM_PROMPT}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if conversation_history:
            for msg in conversation_history[-10:]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ Mini App –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI
                role = "user" if msg.get('isUser', False) else "assistant"
                messages.append({
                    "role": role,
                    "content": msg.get('message', '')
                })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_message})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=500,
            temperature=0.7,
            top_p=1.0,
            frequency_penalty=0.0,
            presence_penalty=0.0
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
        ai_response = response.choices[0].message.content.strip()
        
        logger.info(f"OpenAI response generated for message: {user_message[:50]}...")
        return ai_response
        
    except openai.APIError as e:
        logger.error(f"OpenAI API error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòî"
    
    except openai.RateLimitError as e:
        logger.error(f"OpenAI rate limit error: {e}")
        return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚è∞"
    
    except openai.APIConnectionError as e:
        logger.error(f"OpenAI connection error: {e}")
        return "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. üåê"
    
    except Exception as e:
        logger.error(f"Unexpected error in OpenAI client: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üîß"

def test_openai_connection() -> bool:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
    """
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."}],
            max_tokens=10
        )
        logger.info("OpenAI connection test successful")
        return True
    except Exception as e:
        logger.error(f"OpenAI connection test failed: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)
async def get_quick_response(user_message: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
    
    Args:
        user_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        str: –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
    """
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."},
                {"role": "user", "content": user_message}
            ],
            max_tokens=150,
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        logger.error(f"Error in quick response: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–µ–π—á–∞—Å. üòî"
