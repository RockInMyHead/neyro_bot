// –ê–¥–º–∏–Ω Mini App JavaScript
let tg = null;
let updateInterval = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    if (Telegram.WebApp) {
        Telegram.WebApp.ready();
        Telegram.WebApp.expand();
        
        tg = Telegram.WebApp;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        document.body.setAttribute('data-theme', tg.colorScheme);
        document.body.style.backgroundColor = tg.backgroundColor || '#ffffff';
        document.body.style.color = tg.textColor || '#000000';
        
        console.log('üîß –ê–¥–º–∏–Ω Mini App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        startAutoUpdate();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        loadInitialData();
        
    } else {
        console.error('Telegram WebApp API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        startAutoUpdate();
        loadInitialData();
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    try {
        await refreshMessages();
        await generateMixedText();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

function startAutoUpdate() {
    updateInterval = setInterval(async () => {
        try {
            await refreshMessages();
            await generateMixedText();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        }
    }, 15000); // 15 —Å–µ–∫—É–Ω–¥
    
    console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (–∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥)');
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function stopAutoUpdate() {
    if (updateInterval) {
        clearInterval(updateInterval);
        updateInterval = null;
        console.log('‚èπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async function refreshMessages() {
    try {
        const response = await fetch('/api/admin/messages');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            updateMessagesDisplay(data.messages);
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
function updateMessagesDisplay(messages) {
    const container = document.getElementById('messages-container');
    
    if (!messages || messages.length === 0) {
        container.innerHTML = '<div class="no-messages">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>';
        return;
    }
    
    container.innerHTML = messages.map(msg => `
        <div class="message-item">
            <div class="message-header">
                <span class="message-user">${msg.first_name}</span>
                <span class="message-time">${formatTime(msg.timestamp)}</span>
            </div>
            <div class="message-text">${msg.message}</div>
            <div class="message-source">–ò—Å—Ç–æ—á–Ω–∏–∫: ${msg.source}</div>
        </div>
    `).join('');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async function generateMixedText() {
    try {
        const response = await fetch('/api/admin/mixed-text', {
            method: 'POST'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            updateMixedTextDisplay(data.mixed_text);
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function updateMixedTextDisplay(mixedText) {
    document.getElementById('mixed-text').textContent = mixedText;
    document.getElementById('mixed-text-time').textContent = 
        `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleTimeString()}`;
}

// –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function resetStats() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?')) {
        return;
    }
    
    try {
        const response = await fetch('/api/admin/reset', {
            method: 'POST'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞', 'success');
            await refreshMessages();
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'error');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
async function exportData() {
    try {
        const response = await fetch('/api/admin/export');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            const blob = new Blob([JSON.stringify(data.data, null, 2)], {
                type: 'application/json'
            });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `admin_data_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
        showNotification('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(timestamp) {
    const date = new Date(timestamp * 1000);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    const style = document.createElement('style');
    style.innerHTML = `
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 6px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
        }
        .notification-success { background: #28a745; }
        .notification-error { background: #dc3545; }
        .notification-info { background: #17a2b8; }
        .notification-warning { background: #ffc107; color: #212529; }
        
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `;
    document.head.appendChild(style);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.animation = 'slideIn 0.3s ease-out reverse';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (Telegram.WebApp) {
    Telegram.WebApp.onEvent('viewport_changed', function() {
        console.log('Viewport changed');
    });
    
    Telegram.WebApp.onEvent('theme_changed', function() {
        document.body.setAttribute('data-theme', Telegram.WebApp.colorScheme);
    });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –º–∏–∫—Å–∞
let currentImageData = null;

async function generateImageFromMix() {
    const btn = document.getElementById('generateImageBtn');
    const loading = document.getElementById('imageLoading');
    const result = document.getElementById('generatedImageResult');
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        btn.disabled = true;
        loading.style.display = 'block';
        result.style.display = 'none';
        
        const startTime = Date.now();
        
        const response = await fetch('/api/admin/generate-image', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({})
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            const generationTime = ((Date.now() - startTime) / 1000).toFixed(1);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            currentImageData = data;
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏
            const img = document.getElementById('generatedImage');
            img.src = data.filepath;
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏
            document.getElementById('imagePrompt').textContent = data.prompt;
            document.getElementById('imageSize').textContent = formatFileSize(data.file_size);
            document.getElementById('imageTime').textContent = `${generationTime}—Å`;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result.style.display = 'block';
            
            showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        btn.disabled = false;
        loading.style.display = 'none';
    }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function downloadGeneratedImage() {
    if (!currentImageData) {
        showNotification('–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è', 'error');
        return;
    }
    
    try {
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const link = document.createElement('a');
        link.href = currentImageData.filepath;
        link.download = currentImageData.filename || `generated_${Date.now()}.png`;
        link.target = '_blank';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return Math.round((bytes / Math.pow(k, i)) * 100) / 100 + ' ' + sizes[i];
}

// ===== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ê–ó–û–í–´–ú–ò –ü–†–û–ú–¢–ê–ú–ò =====

// –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º—Ç—ã —Ñ–∏–ª—å–º–æ–≤
const basePrompts = {
    pirates: "–ü–∏—Ä–∞—Ç—ã –ö–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è\n–ú—Ä–∞—á–Ω—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Ä–µ–∞–ª–∏–∑–º –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –ü–∏—Ä–∞—Ç–æ–≤ –∫–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è; –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å –ø–∞—Ä—É—Å–∞–º–∏ –∏ –ø—É—à–∫–∞–º–∏; –ø–∏—Ä–∞—Ç—ã; –º–æ—Ä—Å–∫–∞—è –¥—ã–º–∫–∞, –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —Ä–∏–º-—Å–≤–µ—Ç; –ø–∞–ª–∏—Ç—Ä–∞: —Å—Ç–∞–ª—å/—Å–≤–∏–Ω–µ—Ü –≤–æ–¥—ã, –∏–∑—É–º—Ä—É–¥/–±–∏—Ä—é–∑–∞, –º–æ—Ö, –º–æ–∫—Ä–æ–µ –¥–µ—Ä–µ–≤–æ, –ø–∞—Ç–∏–Ω–∞ –±—Ä–æ–Ω–∑—ã, —è–Ω—Ç–∞—Ä–Ω—ã–µ –±–ª–∏–∫–∏; —Ñ–∞–∫—Ç—É—Ä—ã: —Å–æ–ª—å –Ω–∞ –∫–∞–Ω–∞—Ç–∞—Ö, –∫–∞–º–µ–Ω—å, —Ä–≤–∞–Ω–∞—è –ø–∞—Ä—É—Å–∏–Ω–∞, –±—Ä—ã–∑–≥–∏; —à–∏—Ä–æ–∫–∏–π –ø–ª–∞–Ω, –º–∞—Å—à—Ç–∞–±, –±–µ–∑ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏—Ü.",
    got: "–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤\n–ú—Ä–∞—á–Ω—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Ä–µ–∞–ª–∏–∑–º –ø–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∞ –ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤; –∑–∞–º–æ–∫, –¥—Ä–∞–∫–æ–Ω; —Å—É—Ä–æ–≤–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –º—è–≥–∫–∞—è –¥—ã–º–∫–∞; –ø–∞–ª–∏—Ç—Ä–∞: —Å–ª–∞–Ω—Ü–µ–≤—ã–π —Å–µ—Ä—ã–π, —Å—Ç–∞–ª—å, —Ö–æ–ª–æ–¥–Ω—ã–π —Å–∏–Ω–∏–π, –æ—Ö—Ä–∞/—Ç–µ—Ä—Ä–∞–∫–æ—Ç–∞, –≤—ã—Ü–≤–µ—Ç—à–∏–µ —Ç–∫–∞–Ω–∏, —Ç—ë–º–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, —Ç—ë–ø–ª—ã–µ —Å–≤–µ—á–∏/—Ñ–∞–∫–µ–ª—ã; —Ñ–∞–∫—Ç—É—Ä—ã: –∫–∞–º–µ–Ω—å/—à–∏—Ñ–µ—Ä, —à–µ—Ä—Å—Ç—å/–º–µ—Ö, –∫–æ–∂–∞, –∫–æ–≤–∞–Ω–æ–µ –∂–µ–ª–µ–∑–æ; —à–∏—Ä–æ–∫–∏–π –ø–ª–∞–Ω, –º–∞—Å—à—Ç–∞–±, –±–µ–∑ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏—Ü.",
    sherlock: "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å\n–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Ä–µ–∞–ª–∏–∑–º BBC Sherlock: –¥–æ–∂–¥–ª–∏–≤—ã–π –õ–æ–Ω–¥–æ–Ω, –º–æ–∫—Ä—ã–π –∞—Å—Ñ–∞–ª—å—Ç, –∫–∏—Ä–ø–∏—á/—Å—Ç–µ–∫–ª–æ; –ø–∞–ª–∏—Ç—Ä–∞ —Ö–æ–ª–æ–¥–Ω—ã–π —Å–∏–Ω–∏–π/—Ü–∏–∞–Ω + —Ç—ë–ø–ª—ã–µ —Ñ–æ–Ω–∞—Ä–∏; –±–µ–∑ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏—Ü; –±–æ–∫–æ–≤–æ–π/–∫–æ–Ω—Ç—Ä–æ–≤—ã–π —Å–≤–µ—Ç, –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –∏ –±–ª–∏–∫–∏, –º–µ–ª–∫–æ–µ –±–æ–∫–µ, –º–∞–ª–∞—è –ì–†–ò–ü; –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã, –ª—ë–≥–∫–æ–µ –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ.",
    ghostbusters: "–û—Ö–æ—Ç–Ω–∏–∫–∏ –∑–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è–º–∏\n–ö–∏–Ω–æ—Ä–µ–∞–ª–∏–∑–º –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ '80s –≤ –¥—É—Ö–µ —Ñ–∏–ª—å–º–æ–≤ –û—Ö–æ—Ç–Ω–∏–∫–∏ –∑–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è–º–∏: —Ç—É–º–∞–Ω, –æ–±—ä—ë–º–Ω—ã–π —Å–≤–µ—Ç, –Ω–µ–æ–Ω-–∑–µ–ª—ë–Ω—ã–µ —ç–∫—Ç–æ–ø–∞—Ä—ã, —Ç—ë–ø–ª—ã–µ —Ñ–æ–Ω–∞—Ä–∏, lens flare, –ø—Ä–∏–∑—Ä–∞–∫–∏, –ª–æ–≤—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–∑—Ä–∞–∫–æ–≤, –∏–∑ –æ—Ä—É–∂–∏—è –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤ –∫—Ä–∞—Å–Ω—ã–µ —Å –∂–µ–ª—Ç—ã–º –∫–∞–∫ –º–æ–ª–Ω–∏–∏ –ª—É—á–∏.",
    interstellar: "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä\n–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π hard-sci-fi —Ä–µ–∞–ª–∏–∑–º –ø–æ —Ñ–∏–ª—å–º—É –ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä: —á–∏—Å—Ç–∞—è –æ–ø—Ç–∏–∫–∞, –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –º—è–≥–∫–∞—è –¥—ã–º–∫–∞; –ø–∞–ª–∏—Ç—Ä–∞ —Ö–æ–ª–æ–¥–Ω—ã–π —Å–∏–Ω–∏–π/—Å—Ç–∞–ª—å, —É–≥–æ–ª—å–Ω—ã–π —á—ë—Ä–Ω—ã–π, –ø—ã–ª—å–Ω–∞—è –æ—Ö—Ä–∞, —è–Ω—Ç–∞—Ä–Ω–æ–µ —Å–æ–ª–Ω—Ü–µ, –±–µ–ª—ã–µ —Å–∫–∞—Ñ–∞–Ω–¥—Ä—ã; –∑–≤—ë–∑–¥–Ω—ã–µ –ø–æ–ª—è, –ª—ë–≥–∫–æ–µ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –ª–∏–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ–Ω–∫–∏–π lens flare, –æ–±—ä—ë–º–Ω—ã–π —Å–≤–µ—Ç/–ø—ã–ª—å, —à–∏—Ä–æ–∫–∏–µ –ø–ª–∞–Ω—ã, –º–∞—Å—à—Ç–∞–± –∏ –≤—Ä–µ–º—è.",
    leon: "–õ–µ–æ–Ω\n–ù–µ–æ-–Ω—É–∞—Ä '90s –ø–æ —Ñ–∏–ª—å–º—É –õ–µ–æ–Ω, –ù—å—é-–ô–æ—Ä–∫: —Ç—ë–ø–ª—ã–π –≤–æ–ª—å—Ñ—Ä–∞–º, —Ö–æ–ª–æ–¥–Ω—ã–π —Ñ–ª—É–æ—Ä–µ—Å—Ü–µ–Ω—Ç, –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —É–∑–∫–∞—è –ì–†–ò–ü, –Ω–∏–∑–∫–∏–µ —Ä–∞–∫—É—Ä—Å—ã, –ø–æ–ª–æ—Å—ã —Å–≤–µ—Ç–∞ –æ—Ç –∂–∞–ª—é–∑–∏; –º–æ–∫—Ä—ã–π –∞—Å—Ñ–∞–ª—å—Ç, –æ—Ç—Ä–∞–∂–µ–Ω–∏—è, –¥—ã–º/–ø—ã–ª—å –≤ –ª—É—á–∞—Ö, –º—è–≥–∫–æ–µ –±–æ–∫–µ, –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ; –ø–∞–ª–∏—Ç—Ä–∞ –æ–ª–∏–≤–∫–æ–≤—ã–π/—Ö–∞–∫–∏, —á—ë—Ä–Ω—ã–π, —Å–µ—Ä—ã–π –±–µ—Ç–æ–Ω, –ª–∞—Ç—É–Ω—å; –±–µ–∑ —á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π.",
    batman: "–ë—ç—Ç–º–µ–Ω\n–ö–∏–Ω–æ—Ä–µ–∞–ª–∏–∑–º –Ω–µ–æ-–Ω—É–∞—Ä ¬´–ë—ç—Ç–º–µ–Ω (–ù–æ–ª–∞–Ω–∞)¬ª: –¥–æ–∂–¥–ª–∏–≤—ã–π –Ω–æ—á–Ω–æ–π –º–µ–≥–∞–ø–æ–ª–∏—Å, –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Ç—ë–ø–ª—ã—Ö –Ω–∞—Ç—Ä–∏–µ–≤—ã—Ö —Ñ–æ–Ω–∞—Ä–µ–π –∏ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ —Ü–∏–∞–Ω–∞; –æ–±—ä—ë–º–Ω—ã–π —Å–≤–µ—Ç/–¥—ã–º, –Ω–µ–æ–Ω–æ–≤—ã–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–æ–∫—Ä–æ–º –∞—Å—Ñ–∞–ª—å—Ç–µ, –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–Ω–∏, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω, –ª—ë–≥–∫–æ–µ –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ.",
    rocky: "–†–æ–∫–∫–∏\n–ì—Ä–∏—Ç—Ç–∏-–¥—Ä–∞–º–∞ –ø–æ —Ñ–∏–ª—å–º—É ¬´–†–æ–∫–∫–∏¬ª: –Ω–∞—Ç—Ä–∏–µ–≤—ã–µ —Ñ–æ–Ω–∞—Ä–∏, —Å—ã—Ä—ã–µ —Å–ø–æ—Ä—Ç–∑–∞–ª—ã, –ø–æ—Ç –∏ –º–µ–ª; —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏; –ø–∞–ª–∏—Ç—Ä–∞ –∫–∏—Ä–ø–∏—á, —Å—Ç–∞–ª—å, –≤—ã—Ü–≤–µ—Ç—à–∏–π –∏–Ω–¥–∏–≥–æ; –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Ö–æ–ª–æ–¥–∞ —É–ª–∏—Ü—ã –∏ —Ç—ë–ø–ª–æ–≥–æ –ª–∞–º–ø–æ–≤–æ–≥–æ —Å–≤–µ—Ç–∞; –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
    gladiator: "–ì–ª–∞–¥–∏–∞—Ç–æ—Ä\n–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —ç–ø–∏–∫ –ø–æ —Ñ–∏–ª—å–º—É ¬´–ì–ª–∞–¥–∏–∞—Ç–æ—Ä¬ª: –∞—Ä–µ–Ω–∞ –≤ –ø—ã–ª–∏, –ª—É—á–∏ —Å–æ–ª–Ω—Ü–∞, –∫–æ–∂–∞/—Å—Ç–∞–ª—å/–ª—ë–Ω, –≥—É–ª —Ç–æ–ª–ø—ã, –∫–æ–Ω—Ç—Ä–æ–≤—ã–π —Å–≤–µ—Ç; –ø–∞–ª–∏—Ç—Ä–∞ –æ—Ö—Ä–∞, –ø–µ—Å–æ–∫, —Ä–∂–∞–≤–æ–µ –∑–æ–ª–æ—Ç–æ –∏ —Ö–æ–ª–æ–¥–Ω–∞—è —Å—Ç–∞–ª—å, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
    mission: "–ú–∏—Å—Å–∏—è: –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞\n–¢–µ—Ö–Ω–æ-—à–ø–∏–æ–Ω—Å–∫–∏–π —Ç—Ä–∏–ª–ª–µ—Ä –ø–æ —Ñ–∏–ª—å–º—É ¬´–ú–∏—Å—Å–∏—è: –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞¬ª: —Å—Ç–µ–∫–ª–æ –∏ —Å—Ç–∞–ª—å, —Ü–∏–∞–Ω–æ–≤—ã–µ —Ä–µ—Ñ–ª–µ–∫—Å—ã, —Ç—Ä–æ—Å—ã, –±–ª–∏–∫–∏; —Ä–∏—Ç–º —Ç–∏–∫–∞–µ—Ç, —á–∏—Å—Ç—ã–µ —Å–∏–ª—É—ç—Ç—ã –≥–∞–¥–∂–µ—Ç–æ–≤, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
    professionnel: "Le Professionnel (1981)\n–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –Ω–µ–æ-–Ω—É–∞—Ä –ø–æ —Ñ–∏–ª—å–º—É ¬´Le Professionnel¬ª (1981): –ø–∞—Ä–∏–∂—Å–∫–∏–π –∫–∞–º–µ–Ω—å –ø–æ—Å–ª–µ –¥–æ–∂–¥—è, –¥—ã–º –≤ –ª—É—á–∞—Ö, —Ç—Ä–µ–Ω—á –∏ —Ç–µ–Ω—å —à–ª—è–ø—ã; –ø–∞–ª–∏—Ç—Ä–∞ —Å–µ–ø–∏—è, –æ–ª–∏–≤–∞, –≥—Ä–∞—Ñ–∏—Ç, –ª–∞—Ç—É–Ω—å; –º—è–≥–∫–∞—è –≤–∏–Ω—å–µ—Ç–∫–∞, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    starwars: "–ó–≤—ë–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã\n–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞ –ø–æ ¬´–ó–≤—ë–∑–¥–Ω—ã–º –≤–æ–π–Ω–∞–º¬ª: ¬´–∏—Å—Ç—ë—Ä—Ç–∞—è —Ç–µ—Ö–Ω–∏–∫–∞¬ª, –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏, –≥–∏–ø–µ—Ä–ø—Ä–æ–ª—ë—Ç—ã, –¥–≤–æ–π–Ω—ã–µ —Å–æ–ª–Ω—Ü–∞; –ª–∞–∑–µ—Ä–Ω—ã–µ –º–µ—á–∏, –¥—Ä–æ–∏–¥—ã, —Ç—É–º–∞–Ω –æ–±—ä—ë–º–∞; –ø–∞–ª–∏—Ç—Ä–∞ –ø—É—Å—Ç—ã–Ω–Ω—ã—Ö –æ—Ö—Ä –∏ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –∫–æ—Å–º–æ—Å–∞, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    killbill: "–£–±–∏—Ç—å –ë–∏–ª–ª–∞\n–ì—Ä–∞—Ñ–∏—á–Ω—ã–π –≥—Ä–∏–Ω–¥—Ö–∞—É—Å –ø–æ —Ñ–∏–ª—å–º—É ¬´–£–±–∏—Ç—å –ë–∏–ª–ª–∞¬ª: –∂—ë—Å—Ç–∫–∏–π –±–æ–∫–æ–≤–æ–π –∏ –∫–æ–Ω—Ç—Ä–æ–≤—ã–π —Å–≤–µ—Ç, —Ä–µ–∑–∫–∏–µ —Ç–µ–Ω–∏; –ø–∞–ª–∏—Ç—Ä–∞ –∂—ë–ª—Ç—ã–π+—á—ë—Ä–Ω—ã–π, –∞–ª—ã–π, —Ç—ë–º–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, —Å—Ç–∞–ª—å; –∫–æ–∂–∞, —à—ë–ª–∫, –±—Ä—ã–∑–≥–∏, –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    love: "–ú—ã. –í–µ—Ä–∏–º –≤ –ª—é–±–æ–≤—å\n–ò–Ω–¥–∏-—Ä–æ–º–¥—Ä–∞–º–∞ –ø–æ —Ñ–∏–ª—å–º—É ¬´–ú—ã. –í–µ—Ä–∏–º –≤ –ª—é–±–æ–≤—å¬ª: –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–≤–µ—Ç, –º—è–≥–∫–æ–µ –±–æ–∫–µ; –ø–∞—Å—Ç–µ–ª—å –∏ —Ç—ë–ø–ª—ã–π —è–Ω—Ç–∞—Ä—å –ø—Ä–æ—Ç–∏–≤ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–≥–æ —Å–µ—Ä–æ-–≥–æ–ª—É–±–æ–≥–æ; —à–æ—Ä–æ—Ö —Ç–∫–∞–Ω–∏, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    intouchables: "1+1\n–¢—ë–ø–ª–∞—è –¥—Ä–∞–º–µ–¥–∏ –ø–æ —Ñ–∏–ª—å–º—É ¬´1+1¬ª: —è–Ω—Ç–∞—Ä–Ω—ã–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä—ã –∏ –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–µ —ç–∫—Å—Ç–µ—Ä—å–µ—Ä—ã, –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –∫–∞–¥—Ä–µ, –ø–∞–ª–∏—Ç—Ä–∞ —Å–ª–æ–Ω–æ–≤–∞—è –∫–æ—Å—Ç—å, —Ç—ë–º–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, –≥—Ä–∞—Ñ–∏—Ç; –º—è–≥–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    bond: "–ê–≥–µ–Ω—Ç 007\n–ì–ª—è–Ω—Ü–µ–≤—ã–π —à–ø–∏–æ–Ω–∞–∂ –ø–æ —Ñ—Ä–∞–Ω—à–∏–∑–µ ¬´–ê–≥–µ–Ω—Ç 007¬ª: —Å–º–æ–∫–∏–Ω–≥–∏, –∫–∞–∑–∏–Ω–æ, –ø–µ–Ω—Ç—Ö–∞—É—Å—ã, –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–∫–∞—Ü–∏–∏; —Ü–∏–∞–Ω –∏ –∑–æ–ª–æ—Ç–æ, –∞–Ω–∞–º–æ—Ä—Ñ–Ω—ã–µ –±–ª–∏–∫–∏, —Ç–æ—á–Ω—ã–π –∫–ª—é—á–µ–≤–æ–π —Å–≤–µ—Ç; –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    pulp: "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ\n–ù–µ–æ-–Ω—É–∞—Ä '90s –ø–æ —Ñ–∏–ª—å–º—É ¬´–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ¬ª: —Ä–µ—Ç—Ä–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, –≤–∏–Ω–∏–ª, –∏—Ä–æ–Ω–∏—á–Ω—ã–π –ø–∞—Ñ–æ—Å; –ø–∞–ª–∏—Ç—Ä–∞ –≥–æ—Ä—á–∏—Ü–∞, –≤–∏—à–Ω—è, —á—ë—Ä–Ω—ã–π; –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    soviet: "–°–≤–æ–π —Å—Ä–µ–¥–∏ —á—É–∂–∏—Ö, —á—É–∂–æ–π —Å—Ä–µ–¥–∏ —Å–≤–æ–∏—Ö\n–°–æ–≤–µ—Ç—Å–∫–∏–π –æ—Å—Ç–µ—Ä–Ω –ø–æ —Ñ–∏–ª—å–º—É ¬´–°–≤–æ–π —Å—Ä–µ–¥–∏ —á—É–∂–∏—Ö, —á—É–∂–æ–π —Å—Ä–µ–¥–∏ —Å–≤–æ–∏—Ö¬ª: —Å—Ç–µ–ø—å, –º–∏—Ä–∞–∂, –ø—ã–ª—å–Ω—ã–π —ç—à–µ–ª–æ–Ω, –ª–æ—à–∞–¥–∏ –∏ –∫–æ–∂–∞–Ω–∫–∏; —à–∏—Ä–æ–∫–∏–µ –ø–∞–Ω–æ—Ä–∞–º—ã; –ø–∞–ª–∏—Ç—Ä–∞ –æ—Ö—Ä–∞, –ø–µ–ø–µ–ª, –≤—ã–≥–æ—Ä–µ–≤—à–∞—è —Å–∏–Ω—å, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    swan: "–õ–µ–±–µ–¥–∏–Ω–æ–µ –æ–∑–µ—Ä–æ\n–ë–∞–ª–µ—Ç ¬´–õ–µ–±–µ–¥–∏–Ω–æ–µ –æ–∑–µ—Ä–æ¬ª: —Å—Ü–µ–Ω–∞ —É –ª—É–Ω–Ω–æ–≥–æ –æ–∑–µ—Ä–∞, —Ç—É–º–∞–Ω –∏ –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è; –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Ä—É–∫ –∏ –ø–∞, —Ç—é–ª–µ–≤—ã–µ –ø–∞—á–∫–∏, –ø–µ—Ä—å—è, –ø—É–∞–Ω—Ç—ã. –ü–∞–ª–∏—Ç—Ä–∞ —Ö–æ–ª–æ–¥–Ω—ã–π —Å–∏–Ω–∏–π –∏ —Å–µ—Ä–µ–±—Ä–æ + –º—è–≥–∫–∏–π —Ç—ë–ø–ª—ã–π —Å–≤–µ—Ç —Ä–∞–º–ø—ã; –∫–æ–Ω—Ç—Ä–æ–≤—ã–π ¬´–ª—É–Ω–Ω—ã–π¬ª —Ä–∏–º-—Å–≤–µ—Ç, –ª—ë–≥–∫–∞—è –¥—ã–º–∫–∞, –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è, –±–∞—Ä—Ö–∞—Ç –∏ –¥–µ—Ä–µ–≤–æ –¥–µ–∫–æ—Ä–∞, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω"
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è drag & drop
let draggedElement = null;
let draggedIndex = -1;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    const promptSelect = document.getElementById('base-prompt');
    const customPromptGroup = document.getElementById('custom-prompt-group');
    const promptText = document.getElementById('prompt-text');
    
    if (promptSelect && customPromptGroup && promptText) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
        promptSelect.addEventListener('change', function() {
            const selectedValue = this.value;
            
            if (selectedValue === 'custom') {
                customPromptGroup.style.display = 'block';
                promptText.textContent = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç...';
            } else {
                customPromptGroup.style.display = 'none';
                promptText.textContent = basePrompts[selectedValue] || basePrompts.default;
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º—Ç–∞
        const customPromptText = document.getElementById('custom-prompt-text');
        if (customPromptText) {
            customPromptText.addEventListener('input', function() {
                if (promptSelect.value === 'custom') {
                    promptText.textContent = this.value || '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç...';
                }
            });
        }
    }
});

async function updateBasePrompt() {
    const promptSelect = document.getElementById('base-prompt');
    const customPromptText = document.getElementById('custom-prompt-text');
    
    if (!promptSelect) {
        showNotification('–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    const selectedType = promptSelect.value;
    let promptContent;
    
    if (selectedType === 'custom') {
        if (!customPromptText || !customPromptText.value.trim()) {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç', 'warning');
            return;
        }
        promptContent = customPromptText.value.trim();
    } else {
        promptContent = basePrompts[selectedType] || basePrompts.default;
    }
    
    try {
        const response = await fetch('/api/admin/update-base-prompt', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt_type: selectedType,
                prompt_content: promptContent
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showNotification(`–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç "${selectedType}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!`, 'success');
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞', 'error');
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–æ–≤
function loadPromptList() {
    const promptList = document.getElementById('prompt-list');
    if (!promptList) return;
    
    promptList.innerHTML = '';
    
    Object.entries(basePrompts).forEach(([key, content], index) => {
        const promptItem = createPromptItem(key, content, index);
        promptList.appendChild(promptItem);
    });
}

function createPromptItem(key, content, index) {
    const item = document.createElement('div');
    item.className = 'prompt-item';
    item.draggable = true;
    item.dataset.index = index;
    item.dataset.key = key;
    
    const lines = content.split('\n');
    const title = lines[0];
    const description = lines.slice(1).join(' ');
    
    item.innerHTML = `
        <div class="prompt-item-header">
            <div class="prompt-item-title">${title}</div>
            <div class="prompt-item-actions">
                <button class="prompt-item-btn edit" onclick="editPrompt('${key}', ${index})">‚úèÔ∏è</button>
                <button class="prompt-item-btn delete" onclick="deletePrompt('${key}', ${index})">üóëÔ∏è</button>
            </div>
        </div>
        <div class="prompt-item-content" onclick="togglePromptContent(this)">
            ${description}
        </div>
        <div class="prompt-edit-form" id="edit-form-${key}">
            <input type="text" id="edit-title-${key}" value="${title}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞">
            <textarea id="edit-content-${key}" placeholder="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º—Ç–∞">${content}</textarea>
            <div class="prompt-edit-actions">
                <button class="save" onclick="savePrompt('${key}', ${index})">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button class="cancel" onclick="cancelEdit('${key}')">‚ùå –û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop
    item.addEventListener('dragstart', handleDragStart);
    item.addEventListener('dragend', handleDragEnd);
    item.addEventListener('dragover', handleDragOver);
    item.addEventListener('drop', handleDrop);
    
    return item;
}

function togglePromptContent(element) {
    element.classList.toggle('expanded');
}

function editPrompt(key, index) {
    const form = document.getElementById(`edit-form-${key}`);
    if (form) {
        form.classList.add('active');
    }
}

function cancelEdit(key) {
    const form = document.getElementById(`edit-form-${key}`);
    if (form) {
        form.classList.remove('active');
    }
}

function savePrompt(key, index) {
    const titleInput = document.getElementById(`edit-title-${key}`);
    const contentInput = document.getElementById(`edit-content-${key}`);
    
    if (!titleInput || !contentInput) return;
    
    const newTitle = titleInput.value.trim();
    const newContent = contentInput.value.trim();
    
    if (!newTitle || !newContent) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'warning');
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º—Ç
    basePrompts[key] = newContent;
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    loadPromptList();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç
    updatePromptSelect();
    
    showNotification(`–ü—Ä–æ–º—Ç "${newTitle}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!`, 'success');
}

function deletePrompt(key, index) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º—Ç?')) {
        delete basePrompts[key];
        loadPromptList();
        updatePromptSelect();
        showNotification('–ü—Ä–æ–º—Ç —É–¥–∞–ª–µ–Ω!', 'success');
    }
}

function addNewPrompt() {
    const key = 'custom_' + Date.now();
    const title = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞:');
    
    if (!title) return;
    
    const content = prompt('–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º—Ç–∞:');
    if (!content) return;
    
    basePrompts[key] = content;
    loadPromptList();
    updatePromptSelect();
    showNotification(`–ù–æ–≤—ã–π –ø—Ä–æ–º—Ç "${title}" –¥–æ–±–∞–≤–ª–µ–Ω!`, 'success');
}

function updatePromptSelect() {
    const select = document.getElementById('base-prompt');
    if (!select) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const currentValue = select.value;
    
    // –û—á–∏—â–∞–µ–º –æ–ø—Ü–∏–∏ (–∫—Ä–æ–º–µ custom)
    select.innerHTML = '<option value="custom">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π</option>';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–º—Ç—ã
    Object.entries(basePrompts).forEach(([key, content]) => {
        const lines = content.split('\n');
        const title = lines[0];
        const option = document.createElement('option');
        option.value = key;
        option.textContent = title;
        select.appendChild(option);
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    if (currentValue && basePrompts[currentValue]) {
        select.value = currentValue;
    }
}

// Drag & Drop —Ñ—É–Ω–∫—Ü–∏–∏
function handleDragStart(e) {
    draggedElement = this;
    draggedIndex = parseInt(this.dataset.index);
    this.classList.add('dragging');
}

function handleDragEnd(e) {
    this.classList.remove('dragging');
    draggedElement = null;
    draggedIndex = -1;
}

function handleDragOver(e) {
    e.preventDefault();
    this.classList.add('drag-over');
}

function handleDrop(e) {
    e.preventDefault();
    this.classList.remove('drag-over');
    
    if (draggedElement && draggedElement !== this) {
        const dropIndex = parseInt(this.dataset.index);
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ
        const promptEntries = Object.entries(basePrompts);
        const draggedItem = promptEntries[draggedIndex];
        promptEntries.splice(draggedIndex, 1);
        promptEntries.splice(dropIndex, 0, draggedItem);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–æ–º—Ç–æ–≤
        Object.keys(basePrompts).forEach(key => delete basePrompts[key]);
        promptEntries.forEach(([key, value]) => {
            basePrompts[key] = value;
        });
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        loadPromptList();
        updatePromptSelect();
        
        showNotification('–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–º—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    const promptSelect = document.getElementById('base-prompt');
    const customPromptGroup = document.getElementById('custom-prompt-group');
    const promptText = document.getElementById('prompt-text');
    
    if (promptSelect && customPromptGroup && promptText) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
        promptSelect.addEventListener('change', function() {
            const selectedValue = this.value;
            
            if (selectedValue === 'custom') {
                customPromptGroup.style.display = 'block';
                promptText.textContent = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç...';
            } else {
                customPromptGroup.style.display = 'none';
                promptText.textContent = basePrompts[selectedValue] || basePrompts.pirates;
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º—Ç–∞
        const customPromptText = document.getElementById('custom-prompt-text');
        if (customPromptText) {
            customPromptText.addEventListener('input', function() {
                if (promptSelect.value === 'custom') {
                    promptText.textContent = this.value || '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç...';
                }
            });
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    loadPromptList();
});

// ===== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–¶–ï–†–¢–û–ú =====

async function sendTrackMessage() {
    console.log('sendTrackMessage –≤—ã–∑–≤–∞–Ω–∞');
    
    const movieTitle = document.getElementById('movie-title');
    const movieDescription = document.getElementById('movie-description');
    const movieActors = document.getElementById('movie-actors');
    
    console.log('–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', {
        title: movieTitle,
        description: movieDescription,
        actors: movieActors
    });
    
    if (!movieTitle || !movieDescription || !movieActors) {
        console.error('–ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
        showNotification('–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã', 'error');
        return;
    }
    
    const titleValue = movieTitle.value.trim();
    const descriptionValue = movieDescription.value.trim();
    const actorsValue = movieActors.value.trim();
    
    console.log('–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π:', {
        title: titleValue,
        description: descriptionValue,
        actors: actorsValue
    });
    
    if (!titleValue || !descriptionValue || !actorsValue) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'warning');
        return;
    }
    
    const message = `üìΩÔ∏è **${titleValue}**

${descriptionValue}

**–ê–∫—Ç—ë—Ä—ã/–ø–µ—Ä—Å–æ–Ω–∞–∂–∏:** ${actorsValue}

---

–ö–∞–∫–∏–µ –æ–±—Ä–∞–∑—ã –∏–ª–∏ –ø–µ–π–∑–∞–∂–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç —É –≤–∞—Å, –∫–æ–≥–¥–∞ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏? 

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ 1‚Äì5 —Å–ª–æ–≤–∞–º–∏. –ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–µ–π—á–∞—Å –∏–ª–∏ –≤–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.`;
    
    try {
        const response = await fetch('/api/admin/send-concert-message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'track_message',
                content: message
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–∫–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
            movieTitle.value = '';
            movieDescription.value = '';
            movieActors.value = '';
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ç—Ä–µ–∫–æ–º:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
    }
}

async function sendAudienceResponse() {
    const aiComment = document.getElementById('ai-comment').value.trim();
    
    if (!aiComment) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –Ω–µ–π—Ä–æ–Ω–∫–∏', 'warning');
        return;
    }
    
    const message = `${aiComment}

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Ö —É—á–µ—Å—Ç—å. 
–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –º—É–∑—ã–∫–æ–π –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–∑–∞–º–∏ –Ω–∞ —Å—Ü–µ–Ω–µ!`;
    
    try {
        const response = await fetch('/api/admin/send-concert-message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'audience_response',
                content: message
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showNotification('–û—Ç–≤–µ—Ç –∑—Ä–∏—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', 'success');
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            document.getElementById('ai-comment').value = '';
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∑—Ä–∏—Ç–µ–ª—è–º:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞', 'error');
    }
}

async function sendConcertEnd() {
    const message = `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏ ‚Äî Main Strings Orchestra √ó Neuroevent.
–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ!
P.S. –û—Ç–≤–µ—Ç—ã –∞–Ω–æ–Ω–∏–º–Ω—ã.`;
    
    try {
        const response = await fetch('/api/admin/send-concert-message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'concert_end',
                content: message
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showNotification('–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML






window.refreshMessages = refreshMessages;
window.generateMixedText = generateMixedText;
window.resetStats = resetStats;
window.exportData = exportData;
window.generateImageFromMix = generateImageFromMix;
window.downloadGeneratedImage = downloadGeneratedImage;
window.updateBasePrompt = updateBasePrompt;
window.loadPromptList = loadPromptList;
window.editPrompt = editPrompt;
window.deletePrompt = deletePrompt;
window.addNewPrompt = addNewPrompt;
window.togglePromptContent = togglePromptContent;
window.savePrompt = savePrompt;
window.cancelEdit = cancelEdit;
window.sendTrackMessage = sendTrackMessage;
window.sendAudienceResponse = sendAudienceResponse;
window.sendConcertEnd = sendConcertEnd;
