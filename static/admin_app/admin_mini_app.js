// –ê–¥–º–∏–Ω Mini App JavaScript
let tg = null;
let updateInterval = null;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–º—Ç–æ–≤
let legacyPromptIndex = 0;
let promptQueue = [];
let isEditing = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    if (Telegram.WebApp) {
        Telegram.WebApp.ready();
        Telegram.WebApp.expand();
        
        tg = Telegram.WebApp;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        document.body.setAttribute('data-theme', tg.colorScheme);
        document.body.style.backgroundColor = tg.backgroundColor || '#ffffff';
        document.body.style.color = tg.textColor || '#000000';
        
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        startAutoUpdate();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        loadInitialData();
        
    } else {
        console.error('Telegram WebApp API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        startAutoUpdate();
        loadInitialData();
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function checkAdminAuth() {
    try {
        const response = await fetch('/api/admin/check-auth');
        const data = await response.json();
        return data.success;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
        const isAuthenticated = await checkAdminAuth();
        if (!isAuthenticated) {
            console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
            window.location.href = '/admin/login';
            return;
        }
        
        await refreshMessages();
        initializePromptQueue();
        
        // NEW: –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–∞—Ç—á–µ–π
        startSmartBatchAutoUpdate();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç—ã
        initializePrompts();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            if (concertPrompts.length > 0) {
                console.log('üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞');
                selectPrompt(0);
            }
        }, 1000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–º—Ç–æ–≤
function initializePromptQueue() {
    // –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º—Ç–æ–≤
    promptQueue = Object.keys(basePrompts).filter(key => key !== 'custom');
    legacyPromptIndex = 0;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º—Ç–æ–≤
    loadPromptList();
    
    // –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º—Ç–æ–≤
    // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –ø–æ–ª—è –∞–∫—Ç–µ—Ä–æ–≤ –ø–æ—Å–ª–µ selectPrompt
    if (concertPrompts.length === 0) {
        generateConcertContent();
    } else {
        console.log('üé¨ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º generateConcertContent - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º—Ç–æ–≤');
    }
}

function startAutoUpdate() {
    updateInterval = setInterval(async () => {
        try {
            await refreshMessages();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        }
    }, 15000); // 15 —Å–µ–∫—É–Ω–¥
    
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function stopAutoUpdate() {
    if (updateInterval) {
        clearInterval(updateInterval);
        updateInterval = null;
        console.log('‚èπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async function refreshMessages() {
    try {
        const response = await fetch('/api/admin/messages');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            updateMessagesDisplay(data.messages);
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
function updateMessagesDisplay(messages) {
    const container = document.getElementById('messages-container');
    
    if (!messages || messages.length === 0) {
        container.innerHTML = '<div class="no-messages">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>';
        return;
    }
    
    container.innerHTML = messages.map(msg => `
        <div class="message-item">
            <div class="message-header">
                <span class="message-user">${msg.first_name}</span>
                <span class="message-time">${formatTime(msg.timestamp)}</span>
            </div>
            <div class="message-text">${msg.message}</div>
            <div class="message-source">–ò—Å—Ç–æ—á–Ω–∏–∫: ${msg.source}</div>
        </div>
    `).join('');
}

// –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function resetStats() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?')) {
        return;
    }
    
    try {
        const response = await fetch('/api/admin/reset', {
            method: 'POST'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞', 'success');
            await refreshMessages();
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'error');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
async function exportData() {
    try {
        const response = await fetch('/api/admin/export');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            const blob = new Blob([JSON.stringify(data.data, null, 2)], {
                type: 'application/json'
            });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `admin_data_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
        showNotification('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    const style = document.createElement('style');
    style.innerHTML = `
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 6px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
        }
        .notification-success { background: #28a745; }
        .notification-error { background: #dc3545; }
        .notification-info { background: #17a2b8; }
        .notification-warning { background: #ffc107; color: #212529; }
        
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `;
    document.head.appendChild(style);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.animation = 'slideIn 0.3s ease-out reverse';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (Telegram.WebApp) {
    Telegram.WebApp.onEvent('viewport_changed', function() {
        console.log('Viewport changed');
    });
    
    Telegram.WebApp.onEvent('theme_changed', function() {
        document.body.setAttribute('data-theme', Telegram.WebApp.colorScheme);
    });
}

// ===== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ê–ó–û–í–´–ú–ò –ü–†–û–ú–¢–ê–ú–ò =====

// –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º—Ç—ã —Ñ–∏–ª—å–º–æ–≤
const basePrompts = {
    rocky: "–†–æ–∫–∫–∏\n–ì—Ä–∏—Ç—Ç–∏-–¥—Ä–∞–º–∞ –ø–æ —Ñ–∏–ª—å–º—É ¬´–†–æ–∫–∫–∏¬ª: –Ω–∞—Ç—Ä–∏–µ–≤—ã–µ —Ñ–æ–Ω–∞—Ä–∏, —Å—ã—Ä—ã–µ —Å–ø–æ—Ä—Ç–∑–∞–ª—ã, –ø–æ—Ç –∏ –º–µ–ª; —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏; –ø–∞–ª–∏—Ç—Ä–∞ –∫–∏—Ä–ø–∏—á, —Å—Ç–∞–ª—å, –≤—ã—Ü–≤–µ—Ç—à–∏–π –∏–Ω–¥–∏–≥–æ; –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Ö–æ–ª–æ–¥–∞ —É–ª–∏—Ü—ã –∏ —Ç—ë–ø–ª–æ–≥–æ –ª–∞–º–ø–æ–≤–æ–≥–æ —Å–≤–µ—Ç–∞; –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    batman: "–ë—ç—Ç–º–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ (1995)\n–ö–∏–Ω–æ–ø–æ–ø-–Ω–µ–æ-–≥–æ—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª—å–º—É ¬´–ë—ç—Ç–º–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞¬ª (1995): –Ω–µ–æ–Ω–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã, –∞—Ä-–¥–µ–∫–æ –∏ –≥–æ—Ç–∏—á–µ—Å–∫–∏–µ —à–ø–∏–ª–∏, –¥—ã–º/—Ç—É–º–∞–Ω, –∫–æ–Ω—Ç—Ä–æ–≤—ã–π —Å–≤–µ—Ç, –º–æ–∫—Ä—ã–π –∞—Å—Ñ–∞–ª—å—Ç, –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–Ω–∏; –ø–∞–ª–∏—Ç—Ä–∞ –±–∏—Ä—é–∑–∞/–ø—É—Ä–ø—É—Ä/–∏–∑—É–º—Ä—É–¥ + —Ç—ë–ø–ª—ã–µ —Ñ–æ–Ω–∞—Ä–∏; –ª—ë–≥–∫–æ–µ –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    ghostbusters: "–û—Ö–æ—Ç–Ω–∏–∫–∏ –∑–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è–º–∏\n–ö–∏–Ω–æ—Ä–µ–∞–ª–∏–∑–º –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ '80s –≤ –¥—É—Ö–µ —Ñ–∏–ª—å–º–æ–≤ –û—Ö–æ—Ç–Ω–∏–∫–∏ –∑–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è–º–∏: —Ç—É–º–∞–Ω, –æ–±—ä—ë–º–Ω—ã–π —Å–≤–µ—Ç, –Ω–µ–æ–Ω-–∑–µ–ª—ë–Ω—ã–µ —ç–∫—Ç–æ–ø–∞—Ä—ã, —Ç—ë–ø–ª—ã–µ —Ñ–æ–Ω–∞—Ä–∏, lens flare, –ø—Ä–∏–∑—Ä–∞–∫–∏, –ª–æ–≤—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–∑—Ä–∞–∫–æ–≤, –∏–∑ –æ—Ä—É–∂–∏—è –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤ –∫—Ä–∞—Å–Ω—ã–µ —Å –∂–µ–ª—Ç—ã–º –∫–∞–∫ –º–æ–ª–Ω–∏–∏ –ª—É—á–∏",
    gladiator: "–ì–ª–∞–¥–∏–∞—Ç–æ—Ä\n–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —ç–ø–∏–∫ –ø–æ —Ñ–∏–ª—å–º—É ¬´–ì–ª–∞–¥–∏–∞—Ç–æ—Ä¬ª: –∞—Ä–µ–Ω–∞ –≤ –ø—ã–ª–∏, –ª—É—á–∏ —Å–æ–ª–Ω—Ü–∞, –∫–æ–∂–∞/—Å—Ç–∞–ª—å/–ª—ë–Ω, –≥—É–ª —Ç–æ–ª–ø—ã, –∫–æ–Ω—Ç—Ä–æ–≤—ã–π —Å–≤–µ—Ç; –ø–∞–ª–∏—Ç—Ä–∞ –æ—Ö—Ä–∞, –ø–µ—Å–æ–∫, —Ä–∂–∞–≤–æ–µ –∑–æ–ª–æ—Ç–æ –∏ —Ö–æ–ª–æ–¥–Ω–∞—è —Å—Ç–∞–ª—å, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    sherlock: "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å\n–í–∏–∫—Ç–æ—Ä–∏–∞–Ω—Å–∫–∏–π –õ–æ–Ω–¥–æ–Ω, ¬´–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å¬ª (–†. –î–∞—É–Ω–∏ –º–ª., –ì–∞–π –†–∏—á–∏): –≥–∞–∑–æ–≤—ã–µ —Ñ–æ–Ω–∞—Ä–∏, —Ç—É–º–∞–Ω, –∫–æ–ø–æ—Ç—å, –∫–∏—Ä–ø–∏—á –∏ –ª–∞—Ç—É–Ω—å; –¥–∏–Ω–∞–º–∏—á–Ω—ã–π –º–æ–Ω—Ç–∞–∂, —Å–ª–æ—É–º–æ –∏ ¬´–ø–ª–∞–Ω –•–æ–ª–º—Å–∞¬ª; –ø–∞–ª–∏—Ç—Ä–∞ —Å–µ–ø–∏—è/—É–º–±—Ä–∞ + —Ö–æ–ª–æ–¥–Ω—ã–π —Ü–∏–∞–Ω; –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã, —Ä—É—á–Ω–∞—è –∫–∞–º–µ—Ä–∞, —à—É–º –ø–ª—ë–Ω–∫–∏, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    interstellar: "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä\n–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π hard-sci-fi —Ä–µ–∞–ª–∏–∑–º –ø–æ —Ñ–∏–ª—å–º—É –ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä: —á–∏—Å—Ç–∞—è –æ–ø—Ç–∏–∫–∞, –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –º—è–≥–∫–∞—è –¥—ã–º–∫–∞; –ø–∞–ª–∏—Ç—Ä–∞ —Ö–æ–ª–æ–¥–Ω—ã–π —Å–∏–Ω–∏–π/—Å—Ç–∞–ª—å, —É–≥–æ–ª—å–Ω—ã–π —á—ë—Ä–Ω—ã–π, –ø—ã–ª—å–Ω–∞—è –æ—Ö—Ä–∞, —è–Ω—Ç–∞—Ä–Ω–æ–µ —Å–æ–ª–Ω—Ü–µ, –±–µ–ª—ã–µ —Å–∫–∞—Ñ–∞–Ω–¥—Ä—ã; –∑–≤—ë–∑–¥–Ω—ã–µ –ø–æ–ª—è, –ª—ë–≥–∫–æ–µ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –ª–∏–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ–Ω–∫–∏–π lens flare, –æ–±—ä—ë–º–Ω—ã–π —Å–≤–µ—Ç/–ø—ã–ª—å, —à–∏—Ä–æ–∫–∏–µ –ø–ª–∞–Ω—ã, –º–∞—Å—à—Ç–∞–± –∏ –≤—Ä–µ–º—è",
    mission: "–ú–∏—Å—Å–∏—è: –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞\n–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Ç—Ä–∏–ª–ª–µ—Ä –ø–æ —Ñ–∏–ª—å–º–∞–º ¬´–ú–∏—Å—Å–∏—è: –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞¬ª: —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —ç–∫—à–µ–Ω, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ç—Ä—é–∫–∏; —Å—Ç–µ–∫–ª–æ, –±–µ—Ç–æ–Ω, –º–µ—Ç–∞–ª–ª; —Ö–æ–ª–æ–¥–Ω—ã–π —Ü–∏–∞–Ω –∏ –æ—Ä–∞–Ω–∂–µ–≤—ã–µ –æ—Ç–±–ª–µ—Å–∫–∏; –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    leon: "–õ–µ–æ–Ω\n–ù–µ–æ-–Ω—É–∞—Ä '90s –ø–æ —Ñ–∏–ª—å–º—É –õ–µ–æ–Ω, –ù—å—é-–ô–æ—Ä–∫: —Ç—ë–ø–ª—ã–π –≤–æ–ª—å—Ñ—Ä–∞–º, —Ö–æ–ª–æ–¥–Ω—ã–π —Ñ–ª—É–æ—Ä–µ—Å—Ü–µ–Ω—Ç, –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —É–∑–∫–∞—è –ì–†–ò–ü, –Ω–∏–∑–∫–∏–µ —Ä–∞–∫—É—Ä—Å—ã, –ø–æ–ª–æ—Å—ã —Å–≤–µ—Ç–∞ –æ—Ç –∂–∞–ª—é–∑–∏; –º–æ–∫—Ä—ã–π –∞—Å—Ñ–∞–ª—å—Ç, –æ—Ç—Ä–∞–∂–µ–Ω–∏—è, –¥—ã–º/–ø—ã–ª—å –≤ –ª—É—á–∞—Ö, –º—è–≥–∫–æ–µ –±–æ–∫–µ, –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ; –ø–∞–ª–∏—Ç—Ä–∞ –æ–ª–∏–≤–∫–æ–≤—ã–π/—Ö–∞–∫–∏, —á—ë—Ä–Ω—ã–π, —Å–µ—Ä—ã–π –±–µ—Ç–æ–Ω, –ª–∞—Ç—É–Ω—å; –±–µ–∑ —á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π",
    starwars: "–ó–≤—ë–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã\n–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞ –ø–æ ¬´–ó–≤—ë–∑–¥–Ω—ã–º –≤–æ–π–Ω–∞–º¬ª: ¬´–∏—Å—Ç—ë—Ä—Ç–∞—è —Ç–µ—Ö–Ω–∏–∫–∞¬ª, –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏, –≥–∏–ø–µ—Ä–ø—Ä–æ–ª—ë—Ç—ã, –¥–≤–æ–π–Ω—ã–µ —Å–æ–ª–Ω—Ü–∞; –ª–∞–∑–µ—Ä–Ω—ã–µ –º–µ—á–∏, –¥—Ä–æ–∏–¥—ã, —Ç—É–º–∞–Ω –æ–±—ä—ë–º–∞; –ø–∞–ª–∏—Ç—Ä–∞ –ø—É—Å—Ç—ã–Ω–Ω—ã—Ö –æ—Ö—Ä –∏ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –∫–æ—Å–º–æ—Å–∞, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    professionnel: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª (1981)\n–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –Ω–µ–æ-–Ω—É–∞—Ä –ø–æ —Ñ–∏–ª—å–º—É ¬´Le Professionnel¬ª (1981): –ø–∞—Ä–∏–∂—Å–∫–∏–π –∫–∞–º–µ–Ω—å –ø–æ—Å–ª–µ –¥–æ–∂–¥—è, –¥—ã–º –≤ –ª—É—á–∞—Ö, —Ç—Ä–µ–Ω—á –∏ —Ç–µ–Ω—å —à–ª—è–ø—ã; –ø–∞–ª–∏—Ç—Ä–∞ —Å–µ–ø–∏—è, –æ–ª–∏–≤–∞, –≥—Ä–∞—Ñ–∏—Ç, –ª–∞—Ç—É–Ω—å; –º—è–≥–∫–∞—è –≤–∏–Ω—å–µ—Ç–∫–∞, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    killbill: "–£–±–∏—Ç—å –ë–∏–ª–ª–∞\n–ö–∏–Ω–æ—Ä–µ–∞–ª–∏–∑–º –ø–æ —Ñ–∏–ª—å–º—É ¬´–£–±–∏—Ç—å –ë–∏–ª–ª–∞¬ª: —Ç—ë–ø–ª—ã–π ¬´–º–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∏–π¬ª –∂—ë–ª—Ç—ã–π —Ü–≤–µ—Ç–æ–∫–æ—Ä, –≤—ã–∂–∂–µ–Ω–Ω–æ–µ —Å–æ–ª–Ω—Ü–µ, –ø—ã–ª—å, —Ç—ë–º–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∏ —Å—Ç–∞–ª—å; —Ä–µ–∑–∫–∏–π –±–æ–∫–æ–≤–æ–π/–∫–æ–Ω—Ç—Ä–æ–≤—ã–π —Å–≤–µ—Ç, –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–Ω–∏, –ª—ë–≥–∫–æ–µ –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ; –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    got: "–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤\n–ú—Ä–∞—á–Ω—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Ä–µ–∞–ª–∏–∑–º –ø–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∞ –ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤; –∑–∞–º–æ–∫, –¥—Ä–∞–∫–æ–Ω; —Å—É—Ä–æ–≤–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –º—è–≥–∫–∞—è –¥—ã–º–∫–∞; –ø–∞–ª–∏—Ç—Ä–∞: —Å–ª–∞–Ω—Ü–µ–≤—ã–π —Å–µ—Ä—ã–π, —Å—Ç–∞–ª—å, —Ö–æ–ª–æ–¥–Ω—ã–π —Å–∏–Ω–∏–π, –æ—Ö—Ä–∞/—Ç–µ—Ä—Ä–∞–∫–æ—Ç–∞, –≤—ã—Ü–≤–µ—Ç—à–∏–µ —Ç–∫–∞–Ω–∏, —Ç—ë–º–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, —Ç—ë–ø–ª—ã–µ —Å–≤–µ—á–∏/—Ñ–∞–∫–µ–ª—ã; —Ñ–∞–∫—Ç—É—Ä—ã: –∫–∞–º–µ–Ω—å/—à–∏—Ñ–µ—Ä, —à–µ—Ä—Å—Ç—å/–º–µ—Ö, –∫–æ–∂–∞, –∫–æ–≤–∞–Ω–æ–µ –∂–µ–ª–µ–∑–æ; —à–∏—Ä–æ–∫–∏–π –ø–ª–∞–Ω, –º–∞—Å—à—Ç–∞–±, –±–µ–∑ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏—Ü",
    love: "–ú—ã. –í–µ—Ä–∏–º –≤ –ª—é–±–æ–≤—å\n–ò–Ω–¥–∏-—Ä–æ–º–¥—Ä–∞–º–∞ –ø–æ —Ñ–∏–ª—å–º—É ¬´–ú—ã. –í–µ—Ä–∏–º –≤ –ª—é–±–æ–≤—å¬ª: –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–≤–µ—Ç, –º—è–≥–∫–æ–µ –±–æ–∫–µ; –ø–∞—Å—Ç–µ–ª—å –∏ —Ç—ë–ø–ª—ã–π —è–Ω—Ç–∞—Ä—å –ø—Ä–æ—Ç–∏–≤ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–≥–æ —Å–µ—Ä–æ-–≥–æ–ª—É–±–æ–≥–æ; —à–æ—Ä–æ—Ö —Ç–∫–∞–Ω–∏, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    intouchables: "1+1\n–¢—ë–ø–ª–∞—è –¥—Ä–∞–º–µ–¥–∏ –ø–æ —Ñ–∏–ª—å–º—É ¬´1+1¬ª: —è–Ω—Ç–∞—Ä–Ω—ã–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä—ã –∏ –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–µ —ç–∫—Å—Ç–µ—Ä—å–µ—Ä—ã, –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –∫–∞–¥—Ä–µ, –ø–∞–ª–∏—Ç—Ä–∞ —Å–ª–æ–Ω–æ–≤–∞—è –∫–æ—Å—Ç—å, —Ç—ë–º–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, –≥—Ä–∞—Ñ–∏—Ç; –º—è–≥–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    bond: "–ê–≥–µ–Ω—Ç 007\n–ì—Ä–∏—Ç—Ç–∏-—à–ø–∏–æ–Ω–∞–∂ –ø–æ —Ñ–∏–ª—å–º–∞–º –î–∂–µ–π–º—Å–∞ –ë–æ–Ω–¥–∞ —Å –î—ç–Ω–∏–µ–ª–æ–º –ö—Ä—ç–π–≥–æ–º: —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —ç–∫—à–µ–Ω; —Å—Ç–∞–ª—å, —Å—Ç–µ–∫–ª–æ, –º–æ–∫—Ä—ã–π –∞—Å—Ñ–∞–ª—å—Ç; —Ö–æ–ª–æ–¥–Ω—ã–π —Ü–∏–∞–Ω –∏ —Ç—ë–ø–ª—ã–π –Ω–∞—Ç—Ä–∏–π; –¥–ª–∏–Ω–Ω–æ—Ñ–æ–∫—É—Å–Ω–∞—è –æ–ø—Ç–∏–∫–∞, –∂—ë—Å—Ç–∫–∏–π –∫–ª—é—á, –∞–Ω–∞–º–æ—Ä—Ñ–Ω—ã–µ –±–ª–∏–∫–∏, IMAX-—à–∏—Ä–æ–∫–∏–µ –ø–ª–∞–Ω—ã; –ø–ª—ë–Ω–æ—á–Ω–∞—è —Ñ–∞–∫—Ç—É—Ä–∞, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    pulp: "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ\n–ù–µ–æ-–Ω—É–∞—Ä '90s –ø–æ —Ñ–∏–ª—å–º—É ¬´–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ¬ª: —Ä–µ—Ç—Ä–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, –≤–∏–Ω–∏–ª, –∏—Ä–æ–Ω–∏—á–Ω—ã–π –ø–∞—Ñ–æ—Å; –ø–∞–ª–∏—Ç—Ä–∞ –≥–æ—Ä—á–∏—Ü–∞, –≤–∏—à–Ω—è, —á—ë—Ä–Ω—ã–π; –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    soviet: "–°–≤–æ–π —Å—Ä–µ–¥–∏ —á—É–∂–∏—Ö, —á—É–∂–æ–π —Å—Ä–µ–¥–∏ —Å–≤–æ–∏—Ö\n–°–æ–≤–µ—Ç—Å–∫–∏–π –æ—Å—Ç–µ—Ä–Ω –ø–æ —Ñ–∏–ª—å–º—É ¬´–°–≤–æ–π —Å—Ä–µ–¥–∏ —á—É–∂–∏—Ö, —á—É–∂–æ–π —Å—Ä–µ–¥–∏ —Å–≤–æ–∏—Ö¬ª: —Å—Ç–µ–ø—å, –º–∏—Ä–∞–∂, –ø—ã–ª—å–Ω—ã–π —ç—à–µ–ª–æ–Ω, –ª–æ—à–∞–¥–∏ –∏ –∫–æ–∂–∞–Ω–∫–∏; —à–∏—Ä–æ–∫–∏–µ –ø–∞–Ω–æ—Ä–∞–º—ã; –ø–∞–ª–∏—Ç—Ä–∞ –æ—Ö—Ä–∞, –ø–µ–ø–µ–ª, –≤—ã–≥–æ—Ä–µ–≤—à–∞—è —Å–∏–Ω—å, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω",
    pirates: "–ü–∏—Ä–∞—Ç—ã –ö–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è\n–ú—Ä–∞—á–Ω—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Ä–µ–∞–ª–∏–∑–º –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –ü–∏—Ä–∞—Ç–æ–≤ –∫–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è; –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å –ø–∞—Ä—É—Å–∞–º–∏ –∏ –ø—É—à–∫–∞–º–∏; –ø–∏—Ä–∞—Ç—ã; –º–æ—Ä—Å–∫–∞—è –¥—ã–º–∫–∞, –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —Ä–∏–º-—Å–≤–µ—Ç; –ø–∞–ª–∏—Ç—Ä–∞: —Å—Ç–∞–ª—å/—Å–≤–∏–Ω–µ—Ü –≤–æ–¥—ã, –∏–∑—É–º—Ä—É–¥/–±–∏—Ä—é–∑–∞, –º–æ—Ö, –º–æ–∫—Ä–æ–µ –¥–µ—Ä–µ–≤–æ, –ø–∞—Ç–∏–Ω–∞ –±—Ä–æ–Ω–∑—ã, —è–Ω—Ç–∞—Ä–Ω—ã–µ –±–ª–∏–∫–∏; —Ñ–∞–∫—Ç—É—Ä—ã: —Å–æ–ª—å –Ω–∞ –∫–∞–Ω–∞—Ç–∞—Ö, –∫–∞–º–µ–Ω—å, —Ä–≤–∞–Ω–∞—è –ø–∞—Ä—É—Å–∏–Ω–∞, –±—Ä—ã–∑–≥–∏; —à–∏—Ä–æ–∫–∏–π –ø–ª–∞–Ω, –º–∞—Å—à—Ç–∞–±, –±–µ–∑ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏—Ü",
    swan: "–õ–µ–±–µ–¥–∏–Ω–æ–µ –æ–∑–µ—Ä–æ (–±–∞–ª–µ—Ç)\n–ë–∞–ª–µ—Ç ¬´–õ–µ–±–µ–¥–∏–Ω–æ–µ –æ–∑–µ—Ä–æ¬ª: —Ç—É–º–∞–Ω –∏ –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è; –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Ä—É–∫ –∏ –ø–∞, —Ç—é–ª–µ–≤—ã–µ –ø–∞—á–∫–∏, –ø–µ—Ä—å—è, –ø—É–∞–Ω—Ç—ã. –ö–∏–±–µ—Ä–±–∞–ª–µ—Ä–∏–Ω–∞. –ü–∞–ª–∏—Ç—Ä–∞ —Ö–æ–ª–æ–¥–Ω—ã–π —Å–∏–Ω–∏–π –∏ —Å–µ—Ä–µ–±—Ä–æ + –º—è–≥–∫–∏–π —Ç—ë–ø–ª—ã–π —Å–≤–µ—Ç —Ä–∞–º–ø—ã; –∫–æ–Ω—Ç—Ä–æ–≤—ã–π ¬´–ª—É–Ω–Ω—ã–π¬ª —Ä–∏–º-—Å–≤–µ—Ç, –ª—ë–≥–∫–∞—è –¥—ã–º–∫–∞, –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è, –±–∞—Ä—Ö–∞—Ç –∏ –¥–µ—Ä–µ–≤–æ –¥–µ–∫–æ—Ä–∞, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω"
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è drag & drop
let draggedElement = null;
let draggedIndex = -1;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    const promptSelect = document.getElementById('base-prompt');
    const customPromptGroup = document.getElementById('custom-prompt-group');
    const promptText = document.getElementById('prompt-text');
    
    if (promptSelect && customPromptGroup && promptText) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
        promptSelect.addEventListener('change', function() {
            const selectedValue = this.value;
            
            if (selectedValue === 'custom') {
                customPromptGroup.style.display = 'block';
                promptText.textContent = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç...';
            } else {
                customPromptGroup.style.display = 'none';
                promptText.textContent = basePrompts[selectedValue] || basePrompts.pirates;
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º—Ç–∞
        const customPromptText = document.getElementById('custom-prompt-text');
        if (customPromptText) {
            customPromptText.addEventListener('input', function() {
                if (promptSelect.value === 'custom') {
                    promptText.textContent = this.value || '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç...';
                }
            });
        }
    }
});

async function updateBasePrompt() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    if (promptQueue.length === 0) {
        showNotification('–û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–º—Ç–æ–≤ –ø—É—Å—Ç–∞', 'error');
        return;
    }
    
    const currentPromptKey = promptQueue[legacyPromptIndex];
    const promptContent = basePrompts[currentPromptKey];
    
    if (!promptContent) {
        showNotification('–û—à–∏–±–∫–∞: –ø—Ä–æ–º—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    try {
        const response = await fetch('/api/admin/update-base-prompt', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt_type: currentPromptKey,
                prompt_content: promptContent
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showNotification(`–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç "${currentPromptKey}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!`, 'success');
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞', 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ–º—Ç—É
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–º—Ç–∞
function updatePromptPreview() {
    const promptText = document.getElementById('prompt-text');
    
    if (promptText && promptQueue.length > 0) {
        const currentPromptKey = promptQueue[legacyPromptIndex];
        const currentPromptContent = basePrompts[currentPromptKey];
        
        if (currentPromptContent) {
            promptText.innerHTML = currentPromptContent.replace(/\n/g, '<br>');
        }
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–æ–≤
function loadPromptList() {
    const promptList = document.getElementById('prompt-list');
    if (!promptList) return;
    
    promptList.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏
    promptQueue.forEach((key, index) => {
        const promptItem = createPromptItem(key, basePrompts[key], index === legacyPromptIndex, index);
        promptList.appendChild(promptItem);
    });
}

function createPromptItem(key, content, isCurrent = false, index) {
    const item = document.createElement('div');
    item.className = 'prompt-item';
    if (isCurrent) {
        item.classList.add('current');
    }
    item.draggable = true;
    item.dataset.index = index;
    item.dataset.key = key;
    
    const lines = content.split('\n');
    const title = lines[0];
    const description = lines.slice(1).join(' ');
    
    item.innerHTML = `
        <div class="prompt-item-header">
            <div class="prompt-item-title">${title}</div>
            <div class="prompt-item-actions">
                <button class="prompt-item-btn edit" onclick="editPrompt('${key}')">‚úèÔ∏è</button>
                <button class="prompt-item-btn delete" onclick="deletePrompt('${key}')">üóëÔ∏è</button>
            </div>
            </div>
        <div class="prompt-item-content" onclick="togglePromptContent(this)">
            ${description}
            </div>
        <div class="prompt-edit-form" id="edit-form-${key}">
            <input type="text" id="edit-title-${key}" value="${title}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞">
            <textarea id="edit-content-${key}" placeholder="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º—Ç–∞">${content}</textarea>
            <div class="prompt-edit-actions">
                <button class="save" onclick="savePrompt('${key}')">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button class="cancel" onclick="cancelEdit('${key}')">‚ùå –û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop
    item.addEventListener('dragstart', handleDragStart);
    item.addEventListener('dragend', handleDragEnd);
    item.addEventListener('dragover', handleDragOver);
    item.addEventListener('drop', handleDrop);
    
    return item;
}

function togglePromptContent(element) {
    element.classList.toggle('expanded');
}

function editPrompt(key) {
    const form = document.getElementById(`edit-form-${key}`);
    if (form) {
        form.classList.add('active');
    }
}

function cancelEdit(key) {
    const form = document.getElementById(`edit-form-${key}`);
    if (form) {
        form.classList.remove('active');
    }
}

function savePrompt(key) {
    const titleInput = document.getElementById(`edit-title-${key}`);
    const contentInput = document.getElementById(`edit-content-${key}`);
    
    if (!titleInput || !contentInput) return;
    
    const newTitle = titleInput.value.trim();
    const newContent = contentInput.value.trim();
    
    if (!newTitle || !newContent) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'warning');
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º—Ç
    basePrompts[key] = newContent;
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    loadPromptList();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç
    updatePromptSelect();
    
    showNotification(`–ü—Ä–æ–º—Ç "${newTitle}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!`, 'success');
}

function deletePrompt(key) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º—Ç?')) {
        delete basePrompts[key];
        loadPromptList();
        updatePromptSelect();
        showNotification('–ü—Ä–æ–º—Ç —É–¥–∞–ª–µ–Ω!', 'success');
    }
}

function addNewPrompt() {
    const key = 'custom_' + Date.now();
    const title = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞:');
    
    if (!title) return;
    
    const content = prompt('–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º—Ç–∞:');
    if (!content) return;
    
    basePrompts[key] = content;
    loadPromptList();
    updatePromptSelect();
    showNotification(`–ù–æ–≤—ã–π –ø—Ä–æ–º—Ç "${title}" –¥–æ–±–∞–≤–ª–µ–Ω!`, 'success');
}

function updatePromptSelect() {
    // –§—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Å–µ–ª–µ–∫—Ç —É–¥–∞–ª–µ–Ω
    // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
}

// Drag & Drop —Ñ—É–Ω–∫—Ü–∏–∏
function handleDragStart(e) {
    draggedElement = this;
    draggedIndex = parseInt(this.dataset.index);
    this.classList.add('dragging');
}

function handleDragEnd(e) {
    this.classList.remove('dragging');
    draggedElement = null;
    draggedIndex = -1;
}

function handleDragOver(e) {
    e.preventDefault();
    this.classList.add('drag-over');
}

function handleDrop(e) {
    e.preventDefault();
    this.classList.remove('drag-over');
    
    if (draggedElement && draggedElement !== this) {
        const draggedKey = draggedElement.dataset.key;
        const dropKey = this.dataset.key;
        
        if (draggedKey === dropKey) return;
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –≤ –æ—á–µ—Ä–µ–¥–∏
        const draggedIndex = promptQueue.indexOf(draggedKey);
        const dropIndex = promptQueue.indexOf(dropKey);
        
        if (draggedIndex === -1 || dropIndex === -1) return;
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏
        promptQueue.splice(draggedIndex, 1);
        promptQueue.splice(dropIndex, 0, draggedKey);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–º—Ç–∞
        if (draggedIndex === legacyPromptIndex) {
            legacyPromptIndex = dropIndex;
        } else if (dropIndex === legacyPromptIndex) {
            legacyPromptIndex = draggedIndex;
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        loadPromptList();
        updatePromptPreview();
        
        showNotification('–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–º—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    const promptSelect = document.getElementById('base-prompt');
    const customPromptGroup = document.getElementById('custom-prompt-group');
    const promptText = document.getElementById('prompt-text');
    
    if (promptSelect && customPromptGroup && promptText) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
        promptSelect.addEventListener('change', function() {
            const selectedValue = this.value;
            
            if (selectedValue === 'custom') {
                customPromptGroup.style.display = 'block';
                promptText.textContent = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç...';
            } else {
                customPromptGroup.style.display = 'none';
                promptText.textContent = basePrompts[selectedValue] || basePrompts.pirates;
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º—Ç–∞
        const customPromptText = document.getElementById('custom-prompt-text');
        if (customPromptText) {
            customPromptText.addEventListener('input', function() {
                if (promptSelect.value === 'custom') {
                    promptText.textContent = this.value || '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç...';
                }
            });
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    loadPromptList();
});

// ===== –§–£–ù–ö–¶–ò–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–ù–¶–ï–†–¢–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê =====

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function toggleEdit(fieldId) {
    console.log('üîß toggleEdit –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—è:', fieldId);
    
    const displayElement = document.getElementById(fieldId);
    const editElement = document.getElementById(fieldId + '-edit');
    const editBtn = displayElement.parentElement.querySelector('.edit-btn');
    
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', {
        displayElement: !!displayElement,
        editElement: !!editElement,
        editBtn: !!editBtn,
        displayElementId: displayElement?.id,
        editElementId: editElement?.id
    });
    
    if (!displayElement || !editElement || !editBtn) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', fieldId);
        return;
    }
    
    const isEditing = editElement.style.display !== 'none';
    
    if (isEditing) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        const newValue = editElement.value.trim();
        if (newValue) {
            displayElement.textContent = newValue;
            console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è ${fieldId}:`, newValue);
        }
        
        editElement.style.display = 'none';
        displayElement.style.display = 'flex';
        editBtn.textContent = '‚úèÔ∏è';
        editBtn.classList.remove('editing');
        
    } else {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editElement.value = displayElement.textContent;
        editElement.style.display = 'block';
        displayElement.style.display = 'none';
        editBtn.textContent = 'üíæ';
        editBtn.classList.add('editing');
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        setTimeout(() => {
            editElement.focus();
            editElement.select();
        }, 100);
        
        console.log('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è:', fieldId);
    }
    
    console.log('üéØ toggleEdit –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—è:', fieldId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
function saveAllEdits() {
    const editableFields = ['current-prompt-title', 'generated-movie-description', 'generated-movie-actors', 'concert-end-message'];
    
    editableFields.forEach(fieldId => {
        const displayElement = document.getElementById(fieldId);
        const editElement = document.getElementById(fieldId + '-edit');
        
        if (editElement && editElement.style.display !== 'none') {
            const newValue = editElement.value.trim();
            if (newValue) {
                displayElement.textContent = newValue;
                editElement.style.display = 'none';
                displayElement.style.display = 'flex';
                
                const editBtn = displayElement.parentElement.querySelector('.edit-btn');
                if (editBtn) {
                    editBtn.textContent = '‚úèÔ∏è';
                    editBtn.classList.remove('editing');
                }
            }
        }
    });
    
    console.log('üíæ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
function cancelAllEdits() {
    const editableFields = ['current-prompt-title', 'generated-movie-description', 'generated-movie-actors', 'concert-end-message'];
    
    editableFields.forEach(fieldId => {
        const displayElement = document.getElementById(fieldId);
        const editElement = document.getElementById(fieldId + '-edit');
        
        if (editElement && editElement.style.display !== 'none') {
            editElement.value = displayElement.textContent; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            editElement.style.display = 'none';
            displayElement.style.display = 'flex';
            
            const editBtn = displayElement.parentElement.querySelector('.edit-btn');
            if (editBtn) {
                editBtn.textContent = '‚úèÔ∏è';
                editBtn.classList.remove('editing');
            }
        }
    });
    
    console.log('‚ùå –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã');
}

// ===== –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–ù–¶–ï–†–¢–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê =====

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function generateConcertContent() {
    console.log('üé¨ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
    
    if (promptQueue.length === 0) {
        console.error('‚ùå –û—á–µ—Ä–µ–¥—å –ø—Ä–æ–º—Ç–æ–≤ –ø—É—Å—Ç–∞');
        updateConcertDisplay('–û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–º—Ç–æ–≤ –ø—É—Å—Ç–∞', '–û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–º—Ç–æ–≤ –ø—É—Å—Ç–∞', '–û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–º—Ç–æ–≤ –ø—É—Å—Ç–∞');
        return;
    }
    
    const currentPromptKey = promptQueue[legacyPromptIndex];
    const currentPromptContent = basePrompts[currentPromptKey];
    
    console.log('üìù –¢–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç:', currentPromptKey, currentPromptContent?.substring(0, 100));
    
    if (!currentPromptContent) {
        console.error('‚ùå –ü—Ä–æ–º—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        updateConcertDisplay('–û—à–∏–±–∫–∞: –ø—Ä–æ–º—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', '–û—à–∏–±–∫–∞: –ø—Ä–æ–º—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', '–û—à–∏–±–∫–∞: –ø—Ä–æ–º—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
    const promptTitle = currentPromptContent.split('\n')[0];
    updatePromptTitle(promptTitle);
    console.log('üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞:', promptTitle);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    updateConcertDisplay('', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...');
    
    try {
        console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∞–∫—Ç—ë—Ä–æ–≤...');
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∞–∫—Ç—ë—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [descriptionResult, actorsResult] = await Promise.all([
            generateContentByType('movie_description', currentPromptContent),
            generateContentByType('movie_actors', currentPromptContent)
        ]);
        
        console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', { descriptionResult, actorsResult });
        updateConcertDisplay('', descriptionResult, actorsResult);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
        updateConcertDisplay('', '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É
async function generateContentByType(type, promptContent) {
    let prompt = '';
    
    switch (type) {
        case 'movie_description':
            prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è: "${promptContent}"\n\n–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –æ —á–µ–º –æ–Ω, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥–Ω–∏–º–∞–µ—Ç. –°—Ç–∏–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é.`;
            break;
        case 'movie_actors':
            prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è: "${promptContent}"\n\n–ü–µ—Ä–µ—á–∏—Å–ª–∏ –∞–∫—Ç—ë—Ä–æ–≤/–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –≥–ª–∞–≤–Ω—ã—Ö —Ä–æ–ª—è—Ö (3-5 –∏–º–µ–Ω), –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –∫ —ç—Ç–æ–º—É —Å—Ç–∏–ª—é —Ñ–∏–ª—å–º–∞. –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ò–º—è –∞–∫—Ç—ë—Ä–∞ (—Ä–æ–ª—å), –ò–º—è –∞–∫—Ç—ë—Ä–∞ (—Ä–æ–ª—å)"`;
            break;
        default:
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø';
    }
    
    try {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è ${type}:`, prompt.substring(0, 100));
        
        const response = await fetch('/api/admin/generate-content', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt: prompt,
                type: type
            })
        });
        
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è ${type}:`, response.status);
        
        const data = await response.json();
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è ${type}:`, data);
        
        if (data.success) {
            return data.content;
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è ${type}:`, data);
            return '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏';
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è ${type}:`, error);
        return '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞
function updatePromptTitle(title) {
    const titleElement = document.getElementById('current-prompt-title');
    if (titleElement) {
        titleElement.textContent = title;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function updateConcertDisplay(title, description, actors) {
    const descriptionElement = document.getElementById('generated-movie-description');
    const actorsElement = document.getElementById('generated-movie-actors');
    
    if (descriptionElement) descriptionElement.textContent = description;
    if (actorsElement) actorsElement.textContent = actors;
}

// ===== –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–ù–¶–ï–†–¢–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê =====

async function generateMovieTitle() {
    if (promptQueue.length === 0) {
        showNotification('–û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–º—Ç–æ–≤ –ø—É—Å—Ç–∞', 'error');
        return;
    }
    
    const currentPromptKey = promptQueue[legacyPromptIndex];
    const currentPromptContent = basePrompts[currentPromptKey];
    
    if (!currentPromptContent) {
        showNotification('–û—à–∏–±–∫–∞: –ø—Ä–æ–º—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è: "${currentPromptContent}"\n\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å–º–∞, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;
    
    try {
        const response = await fetch('/api/admin/generate-content', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt: prompt,
                type: 'movie_title'
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            document.getElementById('movie-title').value = data.content;
            showNotification('–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞', 'error');
    }
}

async function generateMovieDescription() {
    if (promptQueue.length === 0) {
        showNotification('–û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–º—Ç–æ–≤ –ø—É—Å—Ç–∞', 'error');
        return;
    }
    
    const currentPromptKey = promptQueue[legacyPromptIndex];
    const currentPromptContent = basePrompts[currentPromptKey];
    const movieTitle = document.getElementById('movie-title').value;
    
    if (!currentPromptContent) {
        showNotification('–û—à–∏–±–∫–∞: –ø—Ä–æ–º—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è: "${currentPromptContent}"\n\n–§–∏–ª—å–º: "${movieTitle || '—Ñ–∏–ª—å–º –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ'}"\n\n–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –æ —á–µ–º –æ–Ω, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥–Ω–∏–º–∞–µ—Ç. –°—Ç–∏–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é.`;
    
    try {
        const response = await fetch('/api/admin/generate-content', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt: prompt,
                type: 'movie_description'
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            document.getElementById('movie-description').value = data.content;
            showNotification('–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞', 'error');
    }
}

async function generateMovieActors() {
    if (promptQueue.length === 0) {
        showNotification('–û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–º—Ç–æ–≤ –ø—É—Å—Ç–∞', 'error');
        return;
    }
    
    const currentPromptKey = promptQueue[legacyPromptIndex];
    const currentPromptContent = basePrompts[currentPromptKey];
    const movieTitle = document.getElementById('movie-title').value;
    
    if (!currentPromptContent) {
        showNotification('–û—à–∏–±–∫–∞: –ø—Ä–æ–º—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è: "${currentPromptContent}"\n\n–§–∏–ª—å–º: "${movieTitle || '—Ñ–∏–ª—å–º –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ'}"\n\n–ü–µ—Ä–µ—á–∏—Å–ª–∏ –∞–∫—Ç—ë—Ä–æ–≤/–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –≥–ª–∞–≤–Ω—ã—Ö —Ä–æ–ª—è—Ö (3-5 –∏–º–µ–Ω), –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –∫ —ç—Ç–æ–º—É —Å—Ç–∏–ª—é —Ñ–∏–ª—å–º–∞. –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ò–º—è –∞–∫—Ç—ë—Ä–∞ (—Ä–æ–ª—å), –ò–º—è –∞–∫—Ç—ë—Ä–∞ (—Ä–æ–ª—å)"`;
    
    try {
        const response = await fetch('/api/admin/generate-content', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt: prompt,
                type: 'movie_actors'
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            document.getElementById('movie-actors').value = data.content;
            showNotification('–ê–∫—Ç—ë—Ä—ã/–ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç—ë—Ä–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç—ë—Ä–æ–≤', 'error');
    }
}

async function generateAIComment() {
    if (promptQueue.length === 0) {
        showNotification('–û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–º—Ç–æ–≤ –ø—É—Å—Ç–∞', 'error');
        return;
    }
    
    const currentPromptKey = promptQueue[legacyPromptIndex];
    const currentPromptContent = basePrompts[currentPromptKey];
    
    if (!currentPromptContent) {
        showNotification('–û—à–∏–±–∫–∞: –ø—Ä–æ–º—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è: "${currentPromptContent}"\n\n–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π —É–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –Ω–µ–π—Ä–æ–Ω–∫–∏ –¥–ª—è –∑—Ä–∏—Ç–µ–ª–µ–π –∫–æ–Ω—Ü–µ—Ä—Ç–∞. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤—è–∑–∞–Ω —Å –∫–∏–Ω–æ–≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ —Å—Ç–∏–ª–µ–º —Ñ–∏–ª—å–º–∞, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ—Ä—Ç–∞. –î–ª–∏–Ω–∞: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.`;
    
    try {
        const response = await fetch('/api/admin/generate-content', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt: prompt,
                type: 'ai_comment'
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            document.getElementById('ai-comment').value = data.content;
            showNotification('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –Ω–µ–π—Ä–æ–Ω–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!', 'success');
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', 'error');
    }
}

// ===== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–¶–ï–†–¢–û–ú =====

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
let isSendingMessage = false;

async function sendTrackMessage() {
    console.log('sendTrackMessage –≤—ã–∑–≤–∞–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (isSendingMessage) {
        console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å');
        showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...', 'warning');
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏
    isSendingMessage = true;
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    const sendButton = document.querySelector('button[onclick="sendTrackMessage()"]');
    if (sendButton) {
        sendButton.disabled = true;
        sendButton.textContent = '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...';
    }
    
    const movieTitle = document.getElementById('current-prompt-title');
    const movieDescription = document.getElementById('generated-movie-description');
    const movieActors = document.getElementById('generated-movie-actors');
    
    console.log('–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', {
        title: movieTitle,
        description: movieDescription,
        actors: movieActors
    });
    
    if (!movieTitle || !movieDescription || !movieActors) {
        console.error('–ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
        showNotification('–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã', 'error');
        return;
    }
    
    const titleValue = movieTitle.textContent.trim();
    const descriptionValue = movieDescription.textContent.trim();
    const actorsValue = movieActors.textContent.trim();
    
    console.log('–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π:', {
        title: titleValue,
        description: descriptionValue,
        actors: actorsValue,
        titleLength: titleValue.length,
        descriptionLength: descriptionValue.length,
        actorsLength: actorsValue.length
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (titleValue === '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º—Ç' || titleValue === '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º—Ç –∏–∑ —Å–ø–∏—Å–∫–∞', 'warning');
        return;
    }
    
    if (descriptionValue === '–ó–∞–≥—Ä—É–∑–∫–∞...' || descriptionValue === '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è...') {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è', 'warning');
        return;
    }
    
    if (actorsValue === '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–µ—Ä–∞—Ö', 'warning');
        return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const fullMessage = `üìΩÔ∏è **${titleValue}**

${descriptionValue}

**–ê–∫—Ç—ë—Ä—ã/–ø–µ—Ä—Å–æ–Ω–∞–∂–∏:** ${actorsValue}

---

–ö–∞–∫–∏–µ –æ–±—Ä–∞–∑—ã –∏–ª–∏ –ø–µ–π–∑–∞–∂–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç —É –≤–∞—Å, –∫–æ–≥–¥–∞ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏?`;
    
    // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = fullMessage;
    
    try {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/admin/send-concert-message —Å –¥–∞–Ω–Ω—ã–º–∏:', {
            type: 'track_message',
            content: message
        });
        
        const response = await fetch('/api/admin/send-concert-message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'track_message',
                content: message
            })
        });
        
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
        
        const data = await response.json();
        
        console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
        
        if (data.success) {
            showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–∫–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', data.message);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ç—Ä–µ–∫–æ–º:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
    } finally {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏
        isSendingMessage = false;
        console.log('üîÑ –§–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–±—Ä–æ—à–µ–Ω');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        const sendButton = document.querySelector('button[onclick="sendTrackMessage()"]');
        if (sendButton) {
            sendButton.disabled = false;
            sendButton.textContent = 'üéµ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–∫–æ–º';
        }
    }
}

async function sendAudienceResponse() {
    const aiComment = document.getElementById('ai-comment').value.trim();
    
    if (!aiComment) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –Ω–µ–π—Ä–æ–Ω–∫–∏', 'warning');
        return;
    }
    
    const message = `${aiComment}

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Ö —É—á–µ—Å—Ç—å. 
–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –º—É–∑—ã–∫–æ–π –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–∑–∞–º–∏ –Ω–∞ —Å—Ü–µ–Ω–µ!`;
    
    try {
        const response = await fetch('/api/admin/send-concert-message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'audience_response',
                content: message
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showNotification('–û—Ç–≤–µ—Ç –∑—Ä–∏—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', 'success');
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            document.getElementById('ai-comment').value = '';
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∑—Ä–∏—Ç–µ–ª—è–º:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞', 'error');
    }
}

async function sendConcertEnd() {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø–æ–ª—è
    const messageElement = document.getElementById('concert-end-message');
    if (!messageElement) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç concert-end-message –Ω–µ –Ω–∞–π–¥–µ–Ω');
        showNotification('–û—à–∏–±–∫–∞: –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error');
        return;
    }
    
    const message = messageElement.textContent.trim();
    
    if (!message) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'warning');
        return;
    }
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
    
    try {
        const response = await fetch('/api/admin/send-concert-message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'concert_end',
                content: message
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showNotification('–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML






window.refreshMessages = refreshMessages;
window.resetStats = resetStats;
window.exportData = exportData;
window.updateBasePrompt = updateBasePrompt;
window.loadPromptList = loadPromptList;
window.editPrompt = editPrompt;
window.deletePrompt = deletePrompt;
window.addNewPrompt = addNewPrompt;
window.togglePromptContent = togglePromptContent;
window.savePrompt = savePrompt;
window.cancelEdit = cancelEdit;
window.sendTrackMessage = sendTrackMessage;
window.sendAudienceResponse = sendAudienceResponse;
window.sendConcertEnd = sendConcertEnd;
window.nextPrompt = nextPrompt;
window.generateMovieTitle = generateMovieTitle;
window.generateMovieDescription = generateMovieDescription;
window.generateMovieActors = generateMovieActors;
window.generateAIComment = generateAIComment;
window.generateConcertContent = generateConcertContent;
window.generateContentByType = generateContentByType;
window.updateConcertDisplay = updateConcertDisplay;
window.updatePromptTitle = updatePromptTitle;
window.toggleEdit = toggleEdit;
window.saveAllEdits = saveAllEdits;
window.cancelAllEdits = cancelAllEdits;

// ============================================================================
// NEW: Smart Batch System Functions
// ============================================================================

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–º–Ω—ã—Ö –±–∞—Ç—á–µ–π
async function loadSmartBatchStats() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        const isAuthenticated = await checkAdminAuth();
        if (!isAuthenticated) {
            console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            return;
        }
        
        const response = await fetch('/api/admin/smart-batches/stats');
        const data = await response.json();
        
        if (data.success) {
            updateSmartBatchStatsDisplay(data.batch_stats, data.processor_stats);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞—Ç—á–µ–π:', error);
    }
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
let isStatsDropdownOpen = false;

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function toggleStatsDropdown() {
    const dropdown = document.getElementById('stats-dropdown');
    const header = document.querySelector('.stats-dropdown-header');
    
    isStatsDropdownOpen = !isStatsDropdownOpen;
    
    if (isStatsDropdownOpen) {
        dropdown.classList.add('active');
        header.classList.add('active');
        
        setTimeout(() => {
            document.addEventListener('click', closeStatsDropdownOnOutsideClick);
        }, 100);
    } else {
        dropdown.classList.remove('active');
        header.classList.remove('active');
        document.removeEventListener('click', closeStatsDropdownOnOutsideClick);
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
function closeStatsDropdownOnOutsideClick(event) {
    const dropdown = document.getElementById('stats-dropdown');
    const header = document.querySelector('.stats-dropdown-header');
    
    if (!dropdown.contains(event.target) && !header.contains(event.target)) {
        dropdown.classList.remove('active');
        header.classList.remove('active');
        isStatsDropdownOpen = false;
        document.removeEventListener('click', closeStatsDropdownOnOutsideClick);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateSmartBatchStatsDisplay(batchStats, processorStats) {
    const statsContainer = document.getElementById('smart-batch-stats');
    const statsSummary = document.getElementById('stats-summary');
    
    if (!statsContainer) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    if (statsSummary) {
        statsSummary.textContent = `üìä –°–æ–æ–±—â–µ–Ω–∏–π: ${batchStats.total_messages} | –ë–∞—Ç—á–µ–π: ${batchStats.total_batches} | –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${batchStats.completed_batches}`;
    }
    
    const html = `
        <div class="stats-grid">
            <div class="stat-item">
                <div class="stat-label">–°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏</div>
                <div class="stat-value">${batchStats.total_messages}</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">–í—Å–µ–≥–æ –±–∞—Ç—á–µ–π</div>
                <div class="stat-value">${batchStats.total_batches}</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">–û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏</div>
                <div class="stat-value pending">${batchStats.pending_batches}</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</div>
                <div class="stat-value processing">${batchStats.processing_batches}</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">–° –º–∏–∫—Å–æ–º</div>
                <div class="stat-value mixed">${batchStats.mixed_batches}</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è</div>
                <div class="stat-value generating">${batchStats.generating_batches}</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                <div class="stat-value completed">${batchStats.completed_batches}</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">–û—à–∏–±–∫–∏</div>
                <div class="stat-value failed">${batchStats.failed_batches}</div>
            </div>
        </div>
        <div class="processor-stats">
            <p>üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processorStats.total_processed} | –û—à–∏–±–æ–∫: ${processorStats.total_failed}</p>
            <p>üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${processorStats.total_images_generated}</p>
            <p>‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processorStats.average_processing_time.toFixed(2)}s</p>
            <p>üîÑ –°—Ç–∞—Ç—É—Å: ${processorStats.is_processing ? 'üü¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è' : '‚ö™ –û–∂–∏–¥–∞–Ω–∏–µ'}</p>
        </div>
    `;
    
    statsContainer.innerHTML = html;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –±–∞—Ç—á–µ–π
async function loadSmartBatchList() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        const isAuthenticated = await checkAdminAuth();
        if (!isAuthenticated) {
            console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ø–∏—Å–∫–∞ –±–∞—Ç—á–µ–π');
            return;
        }
        
        const response = await fetch('/api/admin/smart-batches/list');
        const data = await response.json();
        
        if (data.success) {
            updateSmartBatchListDisplay(data.batches);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –±–∞—Ç—á–µ–π:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞—Ç—á–µ–π
function updateSmartBatchListDisplay(batches) {
    const listContainer = document.getElementById('smart-batch-list');
    if (!listContainer) return;
    
    if (batches.length === 0) {
        listContainer.innerHTML = '<p class="no-batches">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞—Ç—á–µ–π</p>';
        return;
    }
    
    const html = batches.map(batch => `
        <div class="batch-item status-${batch.status}">
            <div class="batch-header">
                <span class="batch-id">–ë–∞—Ç—á ${batch.id.substring(0, 8)}</span>
                <span class="batch-status status-${batch.status}">${getStatusText(batch.status)}</span>
            </div>
            <div class="batch-details">
                <p><strong>–°–æ–æ–±—â–µ–Ω–∏–π:</strong> ${batch.message_count}</p>
                ${batch.mixed_text ? `<p><strong>–ú–∏–∫—Å:</strong> ${batch.mixed_text}</p>` : ''}
                ${batch.image_path ? `<p><strong>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong> ${batch.image_path}</p>` : ''}
                ${batch.processing_time ? `<p><strong>–í—Ä–µ–º—è:</strong> ${batch.processing_time.toFixed(2)}s</p>` : ''}
                ${batch.error_message ? `<p class="error"><strong>–û—à–∏–±–∫–∞:</strong> ${batch.error_message}</p>` : ''}
            </div>
        </div>
    `).join('');
    
    listContainer.innerHTML = html;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
    const statusMap = {
        'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
        'processing': '‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞',
        'mixed': 'üé≠ –ú–∏–∫—Å –≥–æ—Ç–æ–≤',
        'generating': 'üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è',
        'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        'failed': '‚ùå –û—à–∏–±–∫–∞'
    };
    return statusMap[status] || status;
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç—á–µ–π
async function forceCreateBatches() {
    try {
        const button = document.getElementById('create-batches-btn');
        if (button) {
            button.disabled = true;
            button.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ...';
        }
        
        const response = await fetch('/api/admin/smart-batches/create', {
            method: 'POST'
        });
        const data = await response.json();
        
        if (data.success) {
            showNotification(`–°–æ–∑–¥–∞–Ω–æ ${data.batches_created} –±–∞—Ç—á–µ–π`, 'success');
            await loadSmartBatchStats();
            await loadSmartBatchList();
        } else {
            showNotification(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ç—á–µ–π', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ç—á–µ–π:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ç—á–µ–π', 'error');
    } finally {
        const button = document.getElementById('create-batches-btn');
        if (button) {
            button.disabled = false;
            button.textContent = 'üîÑ –°–æ–∑–¥–∞—Ç—å –±–∞—Ç—á–∏';
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
async function processNextBatch() {
    try {
        const button = document.getElementById('process-next-btn');
        if (button) {
            button.disabled = true;
            button.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';
        }
        
        const response = await fetch('/api/admin/smart-batches/process-next', {
            method: 'POST'
        });
        const data = await response.json();
        
        if (data.success) {
            showNotification(data.message, 'success');
            await loadSmartBatchStats();
            await loadSmartBatchList();
            await loadCurrentMixedText();
        } else {
            showNotification(data.message || '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞—Ç—á–µ–π', 'warning');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞', 'error');
    } finally {
        const button = document.getElementById('process-next-btn');
        if (button) {
            button.disabled = false;
            button.textContent = '‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π';
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async function loadCurrentMixedText() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        const isAuthenticated = await checkAdminAuth();
        if (!isAuthenticated) {
            console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞');
            return;
        }
        
        const response = await fetch('/api/admin/smart-batches/current-mixed-text');
        const data = await response.json();
        
        if (data.success) {
            const mixedTextElement = document.getElementById('current-mixed-text');
            if (mixedTextElement) {
                mixedTextElement.textContent = data.mixed_text;
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:', error);
    }
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–º–Ω—ã—Ö –±–∞—Ç—á–µ–π
function startSmartBatchAutoUpdate() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
    loadSmartBatchStats();
    loadSmartBatchList();
    loadCurrentMixedText();
    loadGeneratedImages();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(async () => {
        await loadSmartBatchStats();
        await loadSmartBatchList();
        await loadCurrentMixedText();
        await loadGeneratedImages();
    }, 5000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function loadGeneratedImages() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        const isAuthenticated = await checkAdminAuth();
        if (!isAuthenticated) {
            console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
            return;
        }
        
        console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        const response = await fetch('/api/admin/smart-batches/images');
        const data = await response.json();
        
        console.log('üìä –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', data);
        
        if (data.success) {
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
            updateImagesGridDisplay(data.images);
        } else {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', data.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function updateImagesGridDisplay(images) {
    console.log('üé® –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', images);
    const imagesGrid = document.getElementById('images-grid');
    
    if (!imagesGrid) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç images-grid –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    if (!images || images.length === 0) {
        console.log('üì≠ –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        imagesGrid.innerHTML = '<div style="text-align: center; color: #666; padding: 20px;">–ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</div>';
        return;
    }
    
    console.log(`üñºÔ∏è –°–æ–∑–¥–∞–µ–º ${images.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    imagesGrid.innerHTML = images.map(image => `
        <div class="image-card">
            <img src="${image.image_url}" alt="${image.mixed_text}" loading="lazy" onclick="openImageModal('${image.image_url}', '${image.mixed_text}')">
            <div class="image-card-content">
                <div class="image-card-title">${image.mixed_text}</div>
                <div class="image-card-meta">
                    <div class="image-card-time">${formatTime(image.completed_at)}</div>
                    <div class="image-card-stats">
                        <span class="image-card-stat messages">${image.message_count} —Å–æ–æ–±—â.</span>
                        <span class="image-card-stat time">${image.processing_time ? image.processing_time.toFixed(1) : 'N/A'}—Å</span>
                    </div>
                </div>
                <div class="image-card-actions">
                    <button class="image-download-btn" onclick="downloadImage('${image.image_url}', '${image.mixed_text}')" title="–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">
                        <svg width="16" height="16" viewBox="0 0 20 20" fill="none">
                            <path d="M3 17h14v2H3v-2zM10 2l7 7h-4v8H7V9H3l7-7z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        –°–∫–∞—á–∞—Ç—å
                    </button>
                </div>
            </div>
        </div>
    `).join('');
    
    console.log('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã');
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function downloadImage(imageUrl, imageTitle) {
    console.log('üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', imageUrl);
    
    try {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const link = document.createElement('a');
        link.href = imageUrl;
        
        // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const safeTitle = imageTitle.replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø\s]/g, '').replace(/\s+/g, '_');
        const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
        const filename = `neuroevent_${safeTitle}_${timestamp}.png`;
        
        link.download = filename;
        link.target = '_blank';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ DOM, –∫–ª–∏–∫–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ:', filename);
        showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ!', 'success');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(timestamp) {
    if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const date = new Date(timestamp * 1000);
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    
    if (diffMins < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins}–º –Ω–∞–∑–∞–¥`;
    if (diffHours < 24) return `${diffHours}—á –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function openImageModal(imageUrl, title) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        cursor: pointer;
    `;
    
    modal.innerHTML = `
        <div style="max-width: 90%; max-height: 90%; position: relative;">
            <img src="${imageUrl}" alt="${title}" style="max-width: 100%; max-height: 100%; border-radius: 8px;">
            <div style="position: absolute; top: -40px; left: 0; color: white; font-size: 18px; font-weight: bold;">
                ${title}
            </div>
            <div style="position: absolute; top: -40px; right: 0; color: white; font-size: 24px; cursor: pointer;">
                ‚úï
            </div>
        </div>
    `;
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.onclick = () => document.body.removeChild(modal);
    
    document.body.appendChild(modal);
}

// –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–º—Ç–æ–≤ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–æ–Ω—Ü–µ—Ä—Ç–∞
const concertPrompts = [
    {
        id: 1,
        title: "–†–æ–∫–∫–∏",
        description: "–ì—Ä–∏—Ç—Ç–∏-–¥—Ä–∞–º–∞ –ø–æ —Ñ–∏–ª—å–º—É ¬´–†–æ–∫–∫–∏¬ª: –Ω–∞—Ç—Ä–∏–µ–≤—ã–µ —Ñ–æ–Ω–∞—Ä–∏, —Å—ã—Ä—ã–µ —Å–ø–æ—Ä—Ç–∑–∞–ª—ã, –ø–æ—Ç –∏ –º–µ–ª; —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏; –ø–∞–ª–∏—Ç—Ä–∞ –∫–∏—Ä–ø–∏—á, —Å—Ç–∞–ª—å, –≤—ã—Ü–≤–µ—Ç—à–∏–π –∏–Ω–¥–∏–≥–æ; –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Ö–æ–ª–æ–¥–∞ —É–ª–∏—Ü—ã –∏ —Ç—ë–ø–ª–æ–≥–æ –ª–∞–º–ø–æ–≤–æ–≥–æ —Å–≤–µ—Ç–∞; –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
        duration: "4:13",
        actors: "–°–∏–ª—å–≤–µ—Å—Ç—Ä –°—Ç–∞–ª–ª–æ–Ω–µ (–†–æ–∫–∫–∏ –ë–∞–ª—å–±–æ–∞), –¢–∞–ª–∏—è –®–∞–π—Ä (–ê–¥—Ä–∏–∞–Ω), –ë–µ—Ä—Ç –Ø–Ω–≥ (–ü–æ–ª–ª–∏), –ö–∞—Ä–ª –£—ç–∑–µ—Ä—Å (–ê–ø–æ–ª–ª–æ –ö—Ä–∏–¥)"
    },
    {
        id: 2,
        title: "–ë—ç—Ç–º–µ–Ω",
        description: "–ö–∏–Ω–æ—Ä–µ–∞–ª–∏–∑–º –Ω–µ–æ-–Ω—É–∞—Ä ¬´–ë—ç—Ç–º–µ–Ω (–ù–æ–ª–∞–Ω–∞)¬ª: –¥–æ–∂–¥–ª–∏–≤—ã–π –Ω–æ—á–Ω–æ–π –º–µ–≥–∞–ø–æ–ª–∏—Å, –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Ç—ë–ø–ª—ã—Ö –Ω–∞—Ç—Ä–∏–µ–≤—ã—Ö —Ñ–æ–Ω–∞—Ä–µ–π –∏ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ —Ü–∏–∞–Ω–∞; –æ–±—ä—ë–º–Ω—ã–π —Å–≤–µ—Ç/–¥—ã–º, –Ω–µ–æ–Ω–æ–≤—ã–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–æ–∫—Ä–æ–º –∞—Å—Ñ–∞–ª—å—Ç–µ, –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–Ω–∏, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω, –ª—ë–≥–∫–æ–µ –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ.",
        duration: "3:56",
        actors: "–ö—Ä–∏—Å—Ç–∏–∞–Ω –ë–µ–π–ª (–ë—ç—Ç–º–µ–Ω), –•–∏—Ç –õ–µ–¥–∂–µ—Ä (–î–∂–æ–∫–µ—Ä), –ê–∞—Ä–æ–Ω –≠–∫—Ö–∞—Ä—Ç (–•–∞—Ä–≤–∏ –î–µ–Ω—Ç), –ì—ç—Ä–∏ –û–ª–¥–º–µ–Ω (–î–∂–µ–π–º—Å –ì–æ—Ä–¥–æ–Ω)"
    },
    {
        id: 3,
        title: "–û—Ö–æ—Ç–Ω–∏–∫–∏ –∑–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è–º–∏",
        description: "–ö–∏–Ω–æ—Ä–µ–∞–ª–∏–∑–º –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ '80s –≤ –¥—É—Ö–µ —Ñ–∏–ª—å–º–æ–≤ –û—Ö–æ—Ç–Ω–∏–∫–∏ –∑–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è–º–∏: —Ç—É–º–∞–Ω, –æ–±—ä—ë–º–Ω—ã–π —Å–≤–µ—Ç, –Ω–µ–æ–Ω-–∑–µ–ª—ë–Ω—ã–µ —ç–∫—Ç–æ–ø–∞—Ä—ã, —Ç—ë–ø–ª—ã–µ —Ñ–æ–Ω–∞—Ä–∏, lens flare, –ø—Ä–∏–∑—Ä–∞–∫–∏, –ª–æ–≤—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–∑—Ä–∞–∫–æ–≤, –∏–∑ –æ—Ä—É–∂–∏—è –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤ –∫—Ä–∞—Å–Ω—ã–µ —Å –∂–µ–ª—Ç—ã–º –∫–∞–∫ –º–æ–ª–Ω–∏–∏ –ª—É—á–∏.",
        duration: "3:09",
        actors: "–ë–∏–ª–ª –ú—é—Ä—Ä–µ–π (–ü–∏—Ç–µ—Ä –í–µ–Ω–∫–º–∞–Ω), –î—ç–Ω –≠–π–∫—Ä–æ–π–¥ (–†—ç–π–º–æ–Ω–¥ –°—Ç—ç–Ω—Ü), –•–∞—Ä–æ–ª—å–¥ –†—ç–º–∏—Å (–ò–≥–æ–Ω –°–ø–µ–Ω–≥–ª–µ—Ä), –°–∏–≥—É—Ä–Ω–∏ –£–∏–≤–µ—Ä (–î–∞–Ω–∞ –ë–∞—Ä—Ä–µ—Ç—Ç)"
    },
    {
        id: 4,
        title: "–ì–ª–∞–¥–∏–∞—Ç–æ—Ä",
        description: "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —ç–ø–∏–∫ –ø–æ —Ñ–∏–ª—å–º—É ¬´–ì–ª–∞–¥–∏–∞—Ç–æ—Ä¬ª: –∞—Ä–µ–Ω–∞ –≤ –ø—ã–ª–∏, –ª—É—á–∏ —Å–æ–ª–Ω—Ü–∞, –∫–æ–∂–∞/—Å—Ç–∞–ª—å/–ª—ë–Ω, –≥—É–ª —Ç–æ–ª–ø—ã, –∫–æ–Ω—Ç—Ä–æ–≤—ã–π —Å–≤–µ—Ç; –ø–∞–ª–∏—Ç—Ä–∞ –æ—Ö—Ä–∞, –ø–µ—Å–æ–∫, —Ä–∂–∞–≤–æ–µ –∑–æ–ª–æ—Ç–æ –∏ —Ö–æ–ª–æ–¥–Ω–∞—è —Å—Ç–∞–ª—å, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
        duration: "3:22",
        actors: "–†–∞—Å—Å–µ–ª –ö—Ä–æ—É (–ú–∞–∫—Å–∏–º—É—Å), –•–æ–∞–∫–∏–Ω –§–µ–Ω–∏–∫—Å (–ö–æ–º–º–æ–¥), –ö–æ–Ω–Ω–∏ –ù–∏–ª—å—Å–µ–Ω (–õ—É—Ü–∏–ª–ª–∞), –û–ª–∏–≤–µ—Ä –†–∏–¥ (–ü—Ä–æ–∫—Å–∏–º–æ)"
    },
    {
        id: 5,
        title: "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å",
        description: "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Ä–µ–∞–ª–∏–∑–º BBC Sherlock: –¥–æ–∂–¥–ª–∏–≤—ã–π –õ–æ–Ω–¥–æ–Ω, –º–æ–∫—Ä—ã–π –∞—Å—Ñ–∞–ª—å—Ç, –∫–∏—Ä–ø–∏—á/—Å—Ç–µ–∫–ª–æ; –ø–∞–ª–∏—Ç—Ä–∞ —Ö–æ–ª–æ–¥–Ω—ã–π —Å–∏–Ω–∏–π/—Ü–∏–∞–Ω + —Ç—ë–ø–ª—ã–µ —Ñ–æ–Ω–∞—Ä–∏; –±–µ–∑ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏—Ü; –±–æ–∫–æ–≤–æ–π/–∫–æ–Ω—Ç—Ä–æ–≤—ã–π —Å–≤–µ—Ç, –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –∏ –±–ª–∏–∫–∏, –º–µ–ª–∫–æ–µ –±–æ–∫–µ, –º–∞–ª–∞—è –ì–†–ò–ü; –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã, –ª—ë–≥–∫–æ–µ –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ.",
        duration: "4:53",
        actors: "–†–æ–±–µ—Ä—Ç –î–∞—É–Ω–∏-–º–ª–∞–¥—à–∏–π (–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å), –î–∂—É–¥ –õ–æ—É (–î–æ–∫—Ç–æ—Ä –í–∞—Ç—Å–æ–Ω), –†—ç–π—á–µ–ª –ú–∞–∫–ê–¥–∞–º—Å (–ê–π—Ä–∏–Ω –ê–¥–ª–µ—Ä), –ú–∞—Ä–∫ –°—Ç—Ä–æ–Ω–≥ (–õ–æ—Ä–¥ –ë–ª—ç–∫–≤—É–¥)"
    },
    {
        id: 6,
        title: "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä",
        description: "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π hard-sci-fi —Ä–µ–∞–ª–∏–∑–º –ø–æ —Ñ–∏–ª—å–º—É –ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä: —á–∏—Å—Ç–∞—è –æ–ø—Ç–∏–∫–∞, –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –º—è–≥–∫–∞—è –¥—ã–º–∫–∞; –ø–∞–ª–∏—Ç—Ä–∞ —Ö–æ–ª–æ–¥–Ω—ã–π —Å–∏–Ω–∏–π/—Å—Ç–∞–ª—å, —É–≥–æ–ª—å–Ω—ã–π —á—ë—Ä–Ω—ã–π, –ø—ã–ª—å–Ω–∞—è –æ—Ö—Ä–∞, —è–Ω—Ç–∞—Ä–Ω–æ–µ —Å–æ–ª–Ω—Ü–µ, –±–µ–ª—ã–µ —Å–∫–∞—Ñ–∞–Ω–¥—Ä—ã; –∑–≤—ë–∑–¥–Ω—ã–µ –ø–æ–ª—è, –ª—ë–≥–∫–æ–µ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –ª–∏–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ–Ω–∫–∏–π lens flare, –æ–±—ä—ë–º–Ω—ã–π —Å–≤–µ—Ç/–ø—ã–ª—å, —à–∏—Ä–æ–∫–∏–µ –ø–ª–∞–Ω—ã, –º–∞—Å—à—Ç–∞–± –∏ –≤—Ä–µ–º—è.",
        duration: "5:20",
        actors: "–ú—ç—Ç—Ç—å—é –ú–∞–∫–ö–æ–Ω–∞—Ö–∏ (–ö—É–ø–µ—Ä), –≠–Ω–Ω –•—ç—Ç—ç—É—ç–π (–ê–º–µ–ª–∏—è –ë—Ä–∞–Ω–¥), –î–∂–µ—Å—Å–∏–∫–∞ –ß–µ—Å—Ç–µ–π–Ω (–ú—ë—Ä—Ñ), –ú–∞–π–∫–ª –ö–µ–π–Ω (–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ë—Ä–∞–Ω–¥)"
    },
    {
        id: 7,
        title: "–ú–∏—Å—Å–∏—è: –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞",
        description: "–¢–µ—Ö–Ω–æ-—à–ø–∏–æ–Ω—Å–∫–∏–π —Ç—Ä–∏–ª–ª–µ—Ä –ø–æ —Ñ–∏–ª—å–º—É ¬´–ú–∏—Å—Å–∏—è: –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞¬ª: —Å—Ç–µ–∫–ª–æ –∏ —Å—Ç–∞–ª—å, —Ü–∏–∞–Ω–æ–≤—ã–µ —Ä–µ—Ñ–ª–µ–∫—Å—ã, —Ç—Ä–æ—Å—ã, –±–ª–∏–∫–∏; —Ä–∏—Ç–º —Ç–∏–∫–∞–µ—Ç, —á–∏—Å—Ç—ã–µ —Å–∏–ª—É—ç—Ç—ã –≥–∞–¥–∂–µ—Ç–æ–≤, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
        duration: "2:55",
        actors: "–¢–æ–º –ö—Ä—É–∑ (–ò—Ç–∞–Ω –•–∞–Ω—Ç), –î–∂–æ–Ω –í–æ–π—Ç (–î–∂–∏–º –§–µ–ª–ø—Å), –≠–º–º–∞–Ω—É—ç–ª—å –ë–µ–∞—Ä (–ö–ª—ç—Ä), –ñ–∞–Ω –†–µ–Ω–æ (–§—Ä–∞–Ω—Ü –ö—Ä–∏–≥–µ—Ä)"
    },
    {
        id: 8,
        title: "–õ–µ–æ–Ω",
        description: "–ù–µ–æ-–Ω—É–∞—Ä '90s –ø–æ —Ñ–∏–ª—å–º—É –õ–µ–æ–Ω, –ù—å—é-–ô–æ—Ä–∫: —Ç—ë–ø–ª—ã–π –≤–æ–ª—å—Ñ—Ä–∞–º, —Ö–æ–ª–æ–¥–Ω—ã–π —Ñ–ª—É–æ—Ä–µ—Å—Ü–µ–Ω—Ç, –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —É–∑–∫–∞—è –ì–†–ò–ü, –Ω–∏–∑–∫–∏–µ —Ä–∞–∫—É—Ä—Å—ã, –ø–æ–ª–æ—Å—ã —Å–≤–µ—Ç–∞ –æ—Ç –∂–∞–ª—é–∑–∏; –º–æ–∫—Ä—ã–π –∞—Å—Ñ–∞–ª—å—Ç, –æ—Ç—Ä–∞–∂–µ–Ω–∏—è, –¥—ã–º/–ø—ã–ª—å –≤ –ª—É—á–∞—Ö, –º—è–≥–∫–æ–µ –±–æ–∫–µ, –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ; –ø–∞–ª–∏—Ç—Ä–∞ –æ–ª–∏–≤–∫–æ–≤—ã–π/—Ö–∞–∫–∏, —á—ë—Ä–Ω—ã–π, —Å–µ—Ä—ã–π –±–µ—Ç–æ–Ω, –ª–∞—Ç—É–Ω—å; –±–µ–∑ —á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π.",
        duration: "4:23",
        actors: "–ñ–∞–Ω –†–µ–Ω–æ (–õ–µ–æ–Ω), –ù–∞—Ç–∞–ª–∏ –ü–æ—Ä—Ç–º–∞–Ω (–ú–∞—Ç–∏–ª—å–¥–∞), –ì—ç—Ä–∏ –û–ª–¥–º–µ–Ω (–ù–æ—Ä–º–∞–Ω –°—Ç—ç–Ω—Å—Ñ–∏–ª–¥), –î—ç–Ω–Ω–∏ –ê–π–µ–ª–ª–æ (–¢–æ–Ω–∏)"
    },
    {
        id: 9,
        title: "–ó–≤—ë–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã",
        description: "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞ –ø–æ ¬´–ó–≤—ë–∑–¥–Ω—ã–º –≤–æ–π–Ω–∞–º¬ª: ¬´–∏—Å—Ç—ë—Ä—Ç–∞—è —Ç–µ—Ö–Ω–∏–∫–∞¬ª, –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏, –≥–∏–ø–µ—Ä–ø—Ä–æ–ª—ë—Ç—ã, –¥–≤–æ–π–Ω—ã–µ —Å–æ–ª–Ω—Ü–∞; –ª–∞–∑–µ—Ä–Ω—ã–µ –º–µ—á–∏, –¥—Ä–æ–∏–¥—ã, —Ç—É–º–∞–Ω –æ–±—ä—ë–º–∞; –ø–∞–ª–∏—Ç—Ä–∞ –ø—É—Å—Ç—ã–Ω–Ω—ã—Ö –æ—Ö—Ä –∏ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –∫–æ—Å–º–æ—Å–∞, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
        duration: "3:58",
        actors: "–ú–∞—Ä–∫ –•—ç–º–∏–ª–ª (–õ—é–∫ –°–∫–∞–π—É–æ–∫–µ—Ä), –ö—ç—Ä—Ä–∏ –§–∏—à–µ—Ä (–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –õ–µ—è), –•–∞—Ä—Ä–∏—Å–æ–Ω –§–æ—Ä–¥ (–•–∞–Ω –°–æ–ª–æ), –ê–ª–µ–∫ –ì–∏–Ω–Ω–µ—Å—Å (–û–±–∏-–í–∞–Ω –ö–µ–Ω–æ–±–∏)"
    },
    {
        id: 10,
        title: "Le Professionnel (1981)",
        description: "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –Ω–µ–æ-–Ω—É–∞—Ä –ø–æ —Ñ–∏–ª—å–º—É ¬´Le Professionnel¬ª (1981): –ø–∞—Ä–∏–∂—Å–∫–∏–π –∫–∞–º–µ–Ω—å –ø–æ—Å–ª–µ –¥–æ–∂–¥—è, –¥—ã–º –≤ –ª—É—á–∞—Ö, —Ç—Ä–µ–Ω—á –∏ —Ç–µ–Ω—å —à–ª—è–ø—ã; –ø–∞–ª–∏—Ç—Ä–∞ —Å–µ–ø–∏—è, –æ–ª–∏–≤–∞, –≥—Ä–∞—Ñ–∏—Ç, –ª–∞—Ç—É–Ω—å; –º—è–≥–∫–∞—è –≤–∏–Ω—å–µ—Ç–∫–∞, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
        duration: "4:16",
        actors: "–ñ–∞–Ω-–ü–æ–ª—å –ë–µ–ª—å–º–æ–Ω–¥–æ (–ñ–æ—Å—Å–ª–µ–Ω –ë–æ–º–æ–Ω), –†–æ–±–µ—Ä—Ç –û—Å—Å–µ–π–Ω (–†–æ–∑–µ–Ω), –ú–∏—à–µ–ª—å –ë–æ–Ω (–ê–Ω–Ω–∞), –°–∏—Ä–∏–ª –ö–æ–ª–ª–∞—Ä (–ú–∞—Ä—Ç–∏–Ω)"
    },
    {
        id: 11,
        title: "–£–±–∏—Ç—å –ë–∏–ª–ª–∞",
        description: "–ì—Ä–∞—Ñ–∏—á–Ω—ã–π –≥—Ä–∏–Ω–¥—Ö–∞—É—Å –ø–æ —Ñ–∏–ª—å–º—É ¬´–£–±–∏—Ç—å –ë–∏–ª–ª–∞¬ª: –∂—ë—Å—Ç–∫–∏–π –±–æ–∫–æ–≤–æ–π –∏ –∫–æ–Ω—Ç—Ä–æ–≤—ã–π —Å–≤–µ—Ç, —Ä–µ–∑–∫–∏–µ —Ç–µ–Ω–∏; –ø–∞–ª–∏—Ç—Ä–∞ –∂—ë–ª—Ç—ã–π+—á—ë—Ä–Ω—ã–π, –∞–ª—ã–π, —Ç—ë–º–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, —Å—Ç–∞–ª—å; –∫–æ–∂–∞, —à—ë–ª–∫, –±—Ä—ã–∑–≥–∏, –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
        duration: "3:34",
        actors: "–£–º–∞ –¢—É—Ä–º–∞–Ω (–ù–µ–≤–µ—Å—Ç–∞), –î—ç–≤–∏–¥ –ö—ç—Ä—Ä–∞–¥–∞–π–Ω (–ë–∏–ª–ª), –õ—é—Å–∏ –õ—å—é (–û-–†–µ–Ω –ò—à–∏–∏), –í–∏–≤–∏–∫–∞ –ê. –§–æ–∫—Å (–í–µ—Ä–Ω–∏—Ç–∞ –ì—Ä–∏–Ω)"
    },
    {
        id: 12,
        title: "–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤",
        description: "–ú—Ä–∞—á–Ω—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Ä–µ–∞–ª–∏–∑–º –ø–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∞ –ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤; –∑–∞–º–æ–∫, –¥—Ä–∞–∫–æ–Ω; —Å—É—Ä–æ–≤–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –º—è–≥–∫–∞—è –¥—ã–º–∫–∞; –ø–∞–ª–∏—Ç—Ä–∞: —Å–ª–∞–Ω—Ü–µ–≤—ã–π —Å–µ—Ä—ã–π, —Å—Ç–∞–ª—å, —Ö–æ–ª–æ–¥–Ω—ã–π —Å–∏–Ω–∏–π, –æ—Ö—Ä–∞/—Ç–µ—Ä—Ä–∞–∫–æ—Ç–∞, –≤—ã—Ü–≤–µ—Ç—à–∏–µ —Ç–∫–∞–Ω–∏, —Ç—ë–º–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, —Ç—ë–ø–ª—ã–µ —Å–≤–µ—á–∏/—Ñ–∞–∫–µ–ª—ã; —Ñ–∞–∫—Ç—É—Ä—ã: –∫–∞–º–µ–Ω—å/—à–∏—Ñ–µ—Ä, —à–µ—Ä—Å—Ç—å/–º–µ—Ö, –∫–æ–∂–∞, –∫–æ–≤–∞–Ω–æ–µ –∂–µ–ª–µ–∑–æ; —à–∏—Ä–æ–∫–∏–π –ø–ª–∞–Ω, –º–∞—Å—à—Ç–∞–±, –±–µ–∑ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏—Ü.",
        duration: "4:30",
        actors: "–®–æ–Ω –ë–∏–Ω (–≠–¥–¥–∞—Ä–¥ –°—Ç–∞—Ä–∫), –ü–∏—Ç–µ—Ä –î–∏–Ω–∫–ª—ç–π–¥–∂ (–¢–∏—Ä–∏–æ–Ω –õ–∞–Ω–Ω–∏—Å—Ç–µ—Ä), –≠–º–∏–ª–∏—è –ö–ª–∞—Ä–∫ (–î–µ–π–µ–Ω–µ—Ä–∏—Å –¢–∞—Ä–≥–∞—Ä–∏–µ–Ω), –ö–∏—Ç –•–∞—Ä–∏–Ω–≥—Ç–æ–Ω (–î–∂–æ–Ω –°–Ω–æ—É)"
    },
    {
        id: 13,
        title: "–ú—ã. –í–µ—Ä–∏–º –≤ –ª—é–±–æ–≤—å",
        description: "–ò–Ω–¥–∏-—Ä–æ–º–¥—Ä–∞–º–∞ –ø–æ —Ñ–∏–ª—å–º—É ¬´–ú—ã. –í–µ—Ä–∏–º –≤ –ª—é–±–æ–≤—å¬ª: –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–≤–µ—Ç, –º—è–≥–∫–æ–µ –±–æ–∫–µ; –ø–∞—Å—Ç–µ–ª—å –∏ —Ç—ë–ø–ª—ã–π —è–Ω—Ç–∞—Ä—å –ø—Ä–æ—Ç–∏–≤ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–≥–æ —Å–µ—Ä–æ-–≥–æ–ª—É–±–æ–≥–æ; —à–æ—Ä–æ—Ö —Ç–∫–∞–Ω–∏, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
        duration: "4:03",
        actors: "–ê–Ω–Ω–∞ –ú–∏—Ö–∞–ª–∫–æ–≤–∞ (–ê–Ω–Ω–∞), –î–º–∏—Ç—Ä–∏–π –õ—ã—Å–µ–Ω–∫–æ–≤ (–î–º–∏—Ç—Ä–∏–π), –ï–ª–µ–Ω–∞ –õ—è–¥–æ–≤–∞ (–ï–ª–µ–Ω–∞), –í–ª–∞–¥–∏–º–∏—Ä –ú–∞—à–∫–æ–≤ (–í–ª–∞–¥–∏–º–∏—Ä)"
    },
    {
        id: 14,
        title: "1+1",
        description: "–¢—ë–ø–ª–∞—è –¥—Ä–∞–º–µ–¥–∏ –ø–æ —Ñ–∏–ª—å–º—É ¬´1+1¬ª: —è–Ω—Ç–∞—Ä–Ω—ã–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä—ã –∏ –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–µ —ç–∫—Å—Ç–µ—Ä—å–µ—Ä—ã, –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –∫–∞–¥—Ä–µ, –ø–∞–ª–∏—Ç—Ä–∞ —Å–ª–æ–Ω–æ–≤–∞—è –∫–æ—Å—Ç—å, —Ç—ë–º–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, –≥—Ä–∞—Ñ–∏—Ç; –º—è–≥–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
        duration: "4:31",
        actors: "–§—Ä–∞–Ω—Å—É–∞ –ö–ª—é–∑–µ (–§–∏–ª–∏–ø–ø), –û–º–∞—Ä –°–∏ (–î—Ä–∏—Å—Å), –ê–Ω–Ω –õ–µ –ù–∏ (–ò–≤–æ–Ω–Ω), –û–¥—Ä–∏ –§–ª–µ—Ä–æ (–ú–∞–≥–∞–ª–∏)"
    },
    {
        id: 15,
        title: "–ê–≥–µ–Ω—Ç 007",
        description: "–ì–ª—è–Ω—Ü–µ–≤—ã–π —à–ø–∏–æ–Ω–∞–∂ –ø–æ —Ñ—Ä–∞–Ω—à–∏–∑–µ ¬´–ê–≥–µ–Ω—Ç 007¬ª: —Å–º–æ–∫–∏–Ω–≥–∏, –∫–∞–∑–∏–Ω–æ, –ø–µ–Ω—Ç—Ö–∞—É—Å—ã, –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–∫–∞—Ü–∏–∏; —Ü–∏–∞–Ω –∏ –∑–æ–ª–æ—Ç–æ, –∞–Ω–∞–º–æ—Ä—Ñ–Ω—ã–µ –±–ª–∏–∫–∏, —Ç–æ—á–Ω—ã–π –∫–ª—é—á–µ–≤–æ–π —Å–≤–µ—Ç; –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
        duration: "4:32",
        actors: "–î—ç–Ω–∏–µ–ª –ö—Ä—ç–π–≥ (–î–∂–µ–π–º—Å –ë–æ–Ω–¥), –ï–≤–∞ –ì—Ä–∏–Ω (–í–µ—Å–ø–µ—Ä –õ–∏–Ω–¥), –ú–∞–¥—Å –ú–∏–∫–∫–µ–ª—å—Å–µ–Ω (–õ–µ –®–∏—Ñ—Ñ—Ä), –î–∂—É–¥–∏ –î–µ–Ω—á (M)"
    },
    {
        id: 16,
        title: "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ",
        description: "–ù–µ–æ-–Ω—É–∞—Ä '90s –ø–æ —Ñ–∏–ª—å–º—É ¬´–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ¬ª: —Ä–µ—Ç—Ä–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, –≤–∏–Ω–∏–ª, –∏—Ä–æ–Ω–∏—á–Ω—ã–π –ø–∞—Ñ–æ—Å; –ø–∞–ª–∏—Ç—Ä–∞ –≥–æ—Ä—á–∏—Ü–∞, –≤–∏—à–Ω—è, —á—ë—Ä–Ω—ã–π; –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
        duration: "2:57",
        actors: "–î–∂–æ–Ω –¢—Ä–∞–≤–æ–ª—Ç–∞ (–í–∏–Ω—Å–µ–Ω—Ç –í–µ–≥–∞), –°—ç–º—é—ç–ª –õ. –î–∂–µ–∫—Å–æ–Ω (–î–∂—É–ª—Å –í–∏–Ω–Ω—Ñ–∏–ª–¥), –£–º–∞ –¢—É—Ä–º–∞–Ω (–ú–∏–∞ –£–æ–ª–ª–µ—Å), –ë—Ä—é—Å –£–∏–ª–ª–∏—Å (–ë—É—Ç—á –ö—É–ª–∏–¥–∂)"
    },
    {
        id: 17,
        title: "–°–≤–æ–π —Å—Ä–µ–¥–∏ —á—É–∂–∏—Ö, —á—É–∂–æ–π —Å—Ä–µ–¥–∏ —Å–≤–æ–∏—Ö",
        description: "–°–æ–≤–µ—Ç—Å–∫–∏–π –æ—Å—Ç–µ—Ä–Ω –ø–æ —Ñ–∏–ª—å–º—É ¬´–°–≤–æ–π —Å—Ä–µ–¥–∏ —á—É–∂–∏—Ö, —á—É–∂–æ–π —Å—Ä–µ–¥–∏ —Å–≤–æ–∏—Ö¬ª: —Å—Ç–µ–ø—å, –º–∏—Ä–∞–∂, –ø—ã–ª—å–Ω—ã–π —ç—à–µ–ª–æ–Ω, –ª–æ—à–∞–¥–∏ –∏ –∫–æ–∂–∞–Ω–∫–∏; —à–∏—Ä–æ–∫–∏–µ –ø–∞–Ω–æ—Ä–∞–º—ã; –ø–∞–ª–∏—Ç—Ä–∞ –æ—Ö—Ä–∞, –ø–µ–ø–µ–ª, –≤—ã–≥–æ—Ä–µ–≤—à–∞—è —Å–∏–Ω—å, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
        duration: "3:03",
        actors: "–Æ—Ä–∏–π –°–æ–ª–æ–º–∏–Ω (–ï–≥–æ—Ä –®–∏–ª–æ–≤), –ê–Ω–∞—Ç–æ–ª–∏–π –ü–∞–ø–∞–Ω–æ–≤ (–ü–æ—Ä—Ñ–∏—Ä–∏–π –ü–µ—Ç—Ä–æ–≤–∏—á), –ù–∏–∫–∏—Ç–∞ –ú–∏—Ö–∞–ª–∫–æ–≤ (–ù–∏–∫–æ–ª–∞–π), –ï–≤–≥–µ–Ω–∏–π –õ–µ–æ–Ω–æ–≤ (–°—Ç–µ–ø–∞–Ω)"
    },
    {
        id: 18,
        title: "–ü–∏—Ä–∞—Ç—ã –ö–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è",
        description: "–ú—Ä–∞—á–Ω—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Ä–µ–∞–ª–∏–∑–º –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –ü–∏—Ä–∞—Ç–æ–≤ –∫–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è; –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å –ø–∞—Ä—É—Å–∞–º–∏ –∏ –ø—É—à–∫–∞–º–∏; –ø–∏—Ä–∞—Ç—ã; –º–æ—Ä—Å–∫–∞—è –¥—ã–º–∫–∞, –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —Ä–∏–º-—Å–≤–µ—Ç; –ø–∞–ª–∏—Ç—Ä–∞: —Å—Ç–∞–ª—å/—Å–≤–∏–Ω–µ—Ü –≤–æ–¥—ã, –∏–∑—É–º—Ä—É–¥/–±–∏—Ä—é–∑–∞, –º–æ—Ö, –º–æ–∫—Ä–æ–µ –¥–µ—Ä–µ–≤–æ, –ø–∞—Ç–∏–Ω–∞ –±—Ä–æ–Ω–∑—ã, —è–Ω—Ç–∞—Ä–Ω—ã–µ –±–ª–∏–∫–∏; —Ñ–∞–∫—Ç—É—Ä—ã: —Å–æ–ª—å –Ω–∞ –∫–∞–Ω–∞—Ç–∞—Ö, –∫–∞–º–µ–Ω—å, —Ä–≤–∞–Ω–∞—è –ø–∞—Ä—É—Å–∏–Ω–∞, –±—Ä—ã–∑–≥–∏; —à–∏—Ä–æ–∫–∏–π –ø–ª–∞–Ω, –º–∞—Å—à—Ç–∞–±, –±–µ–∑ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏—Ü.",
        duration: "3:13",
        actors: "–î–∂–æ–Ω–Ω–∏ –î–µ–ø–ø (–î–∂–µ–∫ –í–æ—Ä–æ–±–µ–π), –û—Ä–ª–∞–Ω–¥–æ –ë–ª—É–º (–£–∏–ª–ª –¢–µ—Ä–Ω–µ—Ä), –ö–∏—Ä–∞ –ù–∞–π—Ç–ª–∏ (–≠–ª–∏–∑–∞–±–µ—Ç –°—É–æ–Ω–Ω), –î–∂–µ—Ñ—Ñ—Ä–∏ –†–∞—à (–ì–µ–∫—Ç–æ—Ä –ë–∞—Ä–±–æ—Å—Å–∞)"
    },
    {
        id: 19,
        title: "–õ–µ–±–µ–¥–∏–Ω–æ–µ –æ–∑–µ—Ä–æ",
        description: "–ë–∞–ª–µ—Ç ¬´–õ–µ–±–µ–¥–∏–Ω–æ–µ –æ–∑–µ—Ä–æ¬ª: —Å—Ü–µ–Ω–∞ —É –ª—É–Ω–Ω–æ–≥–æ –æ–∑–µ—Ä–∞, —Ç—É–º–∞–Ω –∏ –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è; –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Ä—É–∫ –∏ –ø–∞, —Ç—é–ª–µ–≤—ã–µ –ø–∞—á–∫–∏, –ø–µ—Ä—å—è, –ø—É–∞–Ω—Ç—ã. –ü–∞–ª–∏—Ç—Ä–∞ —Ö–æ–ª–æ–¥–Ω—ã–π —Å–∏–Ω–∏–π –∏ —Å–µ—Ä–µ–±—Ä–æ + –º—è–≥–∫–∏–π —Ç—ë–ø–ª—ã–π —Å–≤–µ—Ç —Ä–∞–º–ø—ã; –∫–æ–Ω—Ç—Ä–æ–≤—ã–π ¬´–ª—É–Ω–Ω—ã–π¬ª —Ä–∏–º-—Å–≤–µ—Ç, –ª—ë–≥–∫–∞—è –¥—ã–º–∫–∞, –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è, –±–∞—Ä—Ö–∞—Ç –∏ –¥–µ—Ä–µ–≤–æ –¥–µ–∫–æ—Ä–∞, –¥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.",
        duration: "4:42",
        actors: "–ü—Ä–∏–º–∞-–±–∞–ª–µ—Ä–∏–Ω–∞ (–û–¥–µ—Ç—Ç–∞/–û–¥–∏–ª–ª–∏—è), –ü—Ä–∏–Ω—Ü –ó–∏–≥—Ñ—Ä–∏–¥, –ó–ª–æ–π –≥–µ–Ω–∏–π –†–æ—Ç–±–∞—Ä—Ç, –ö–æ—Ä–æ–ª–µ–≤–∞-–º–∞—Ç—å"
    }
];

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞–º–∏
let currentPromptIndex = 0;
let isDropdownOpen = false;
let isEditingPrompt = false;
let originalPromptText = '';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º—Ç–æ–≤
function initializePrompts() {
    console.log('üé¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º—Ç–æ–≤...');
    console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º—Ç–æ–≤:', concertPrompts.length);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ DOM –≥–æ—Ç–æ–≤
    const titleElement = document.getElementById('current-prompt-title');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–∞ current-prompt-title:', titleElement);
    
    if (!titleElement) {
        console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç current-prompt-title –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 500ms');
        setTimeout(() => {
            initializePrompts();
        }, 500);
        return;
    }
    
    loadPrompts();
    updatePromptDisplay();
    
    // –Ø–≤–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
    if (concertPrompts.length > 0) {
        selectPrompt(0);
        console.log('üéØ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º—Ç:', concertPrompts[0].title);
    } else {
        console.error('‚ùå –ú–∞—Å—Å–∏–≤ concertPrompts –ø—É—Å—Ç');
    }
    
    console.log('‚úÖ –ü—Ä–æ–º—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('üîç –≠–ª–µ–º–µ–Ω—Ç—ã DOM:', {
        dropdown: document.getElementById('prompt-dropdown'),
        header: document.querySelector('.prompt-dropdown-header'),
        list: document.getElementById('prompt-list')
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–æ–≤
function loadPrompts() {
    const promptList = document.getElementById('prompt-list');
    promptList.innerHTML = '';
    
    concertPrompts.forEach((prompt, index) => {
        const promptItem = createPromptItem(prompt, index);
        promptList.appendChild(promptItem);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ–º—Ç–∞
function createPromptItem(prompt, index) {
    const item = document.createElement('div');
    item.className = 'prompt-item';
    item.draggable = true;
    item.dataset.index = index;
    
    item.innerHTML = `
        <div class="prompt-drag-handle">‚ãÆ‚ãÆ</div>
        <div class="prompt-item-content">
            <div class="prompt-item-title">${prompt.title}</div>
            <div class="prompt-item-description">${prompt.description}</div>
            <div class="prompt-item-duration">‚è±Ô∏è ${prompt.duration}</div>
        </div>
        <div class="prompt-item-actions">
            <button class="prompt-action-btn edit" onclick="editPrompt(${index})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
            <button class="prompt-action-btn delete" onclick="deletePrompt(${index})" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
        </div>
    `;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag and drop
    item.addEventListener('dragstart', handleDragStart);
    item.addEventListener('dragover', handleDragOver);
    item.addEventListener('drop', handleDrop);
    item.addEventListener('dragend', handleDragEnd);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º—Ç–∞
    item.addEventListener('click', (e) => {
        if (!e.target.closest('.prompt-action-btn')) {
            selectPrompt(index);
        }
    });
    
    return item;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
function togglePromptDropdown() {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞...');
    console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', isDropdownOpen);
    
    const dropdown = document.getElementById('prompt-dropdown');
    const header = document.querySelector('.prompt-dropdown-header');
    
    console.log('üîç –≠–ª–µ–º–µ–Ω—Ç—ã DOM:', { dropdown, header });
    
    isDropdownOpen = !isDropdownOpen;
    
    if (isDropdownOpen) {
        dropdown.classList.add('active');
        header.classList.add('active');
        console.log('‚úÖ –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        setTimeout(() => {
            document.addEventListener('click', closeDropdownOnOutsideClick);
        }, 100);
    } else {
        dropdown.classList.remove('active');
        header.classList.remove('active');
        console.log('‚ùå –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç');
        document.removeEventListener('click', closeDropdownOnOutsideClick);
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
function closeDropdownOnOutsideClick(event) {
    const dropdown = document.getElementById('prompt-dropdown');
    const header = document.querySelector('.prompt-dropdown-header');
    
    if (!dropdown.contains(event.target) && !header.contains(event.target)) {
        dropdown.classList.remove('active');
        header.classList.remove('active');
        isDropdownOpen = false;
        document.removeEventListener('click', closeDropdownOnOutsideClick);
    }
}

// –í—ã–±–æ—Ä –ø—Ä–æ–º—Ç–∞
function selectPrompt(index) {
    console.log('üéØ selectPrompt –≤—ã–∑–≤–∞–Ω–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º:', index);
    console.log('üìä –ú–∞—Å—Å–∏–≤ concertPrompts:', concertPrompts);
    console.log('üìä –î–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞:', concertPrompts.length);
    
    if (!concertPrompts || concertPrompts.length === 0) {
        console.error('‚ùå –ú–∞—Å—Å–∏–≤ concertPrompts –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        return;
    }
    
    if (index < 0 || index >= concertPrompts.length) {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–º—Ç–∞:', index);
        return;
    }
    
    currentPromptIndex = index;
    const prompt = concertPrompts[index];
    
    console.log('üìù –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º—Ç:', prompt);
    
    const titleElement = document.getElementById('current-prompt-title');
    const promptTextElement = document.getElementById('prompt-text');
    
    console.log('üîç –≠–ª–µ–º–µ–Ω—Ç—ã DOM:', {
        titleElement: titleElement,
        promptTextElement: promptTextElement,
        titleElementExists: !!titleElement,
        promptTextElementExists: !!promptTextElement
    });
    
    if (titleElement) {
        titleElement.textContent = prompt.title;
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:', prompt.title);
    } else {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç current-prompt-title –Ω–µ –Ω–∞–π–¥–µ–Ω');
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            const retryElement = document.getElementById('current-prompt-title');
            if (retryElement) {
                retryElement.textContent = prompt.title;
                console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞):', prompt.title);
            } else {
                console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç current-prompt-title –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        }, 100);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ dropdown
    const dropdownTitleElement = document.getElementById('current-prompt-dropdown-title');
    if (dropdownTitleElement) {
        dropdownTitleElement.textContent = prompt.title;
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ dropdown:', prompt.title);
    } else {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç current-prompt-dropdown-title –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    if (promptTextElement) {
        promptTextElement.innerHTML = `
            <strong>${prompt.title}</strong><br>
            <span style="color: #007bff; font-weight: 600;">‚è±Ô∏è ${prompt.duration}</span><br><br>
            ${prompt.description}
        `;
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä');
    } else {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç prompt-text –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∞–∫—Ç–µ—Ä–æ–≤
    const actorsElement = document.getElementById('generated-movie-actors');
    console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –∞–∫—Ç–µ—Ä–æ–≤:', actorsElement);
    console.log('üìù –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –∞–∫—Ç–µ—Ä–æ–≤:', {
        hasActors: !!prompt.actors,
        actors: prompt.actors,
        title: prompt.title
    });
    
    if (actorsElement) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ actors –∏–∑ –ø—Ä–æ–º—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (prompt.actors) {
            actorsElement.textContent = prompt.actors;
            console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ –∞–∫—Ç–µ—Ä–æ–≤ –∏–∑ –ø—Ä–æ–º—Ç–∞:', prompt.actors);
        } else {
            // Fallback –Ω–∞ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –ø–æ–ª–µ actors –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            actorsElement.textContent = `–ö–∞–∫–∏–µ –æ–±—Ä–∞–∑—ã –∏ –ø–µ–π–∑–∞–∂–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç —É –≤–∞—Å –≤ —Å–æ–∑–Ω–∞–Ω–∏–∏, –∫–æ–≥–¥–∞ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ?`;
            console.log('‚ö†Ô∏è –ü–æ–ª–µ actors –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback');
        }
    } else {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç generated-movie-actors –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —á–µ—Ä–µ–∑ LLM
    generateFilmDescription(prompt.title, prompt.description);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞
function togglePromptEdit() {
    if (isEditingPrompt) {
        cancelPromptEdit();
        return;
    }
    
    const promptText = document.getElementById('prompt-text');
    const editBtn = document.getElementById('edit-prompt-btn');
    const saveBtn = document.getElementById('save-prompt-btn');
    const cancelBtn = document.getElementById('cancel-prompt-btn');
    
    if (!promptText || !editBtn || !saveBtn || !cancelBtn) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    originalPromptText = promptText.innerHTML;
    
    // –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
    promptText.contentEditable = true;
    promptText.classList.add('editing');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    editBtn.style.display = 'none';
    saveBtn.style.display = 'inline-block';
    cancelBtn.style.display = 'inline-block';
    
    isEditingPrompt = true;
    
    // –§–æ–∫—É—Å –Ω–∞ —Ç–µ–∫—Å—Ç–µ
    promptText.focus();
    
    console.log('‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞ –≤–∫–ª—é—á–µ–Ω');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ–º—Ç–∞
function savePromptEdit() {
    const promptText = document.getElementById('prompt-text');
    const editBtn = document.getElementById('edit-prompt-btn');
    const saveBtn = document.getElementById('save-prompt-btn');
    const cancelBtn = document.getElementById('cancel-prompt-btn');
    
    if (!promptText || !editBtn || !saveBtn || !cancelBtn) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    const newText = promptText.innerHTML;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (newText === originalPromptText) {
        console.log('üìù –¢–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
        cancelPromptEdit();
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º—Ç –≤ –º–∞—Å—Å–∏–≤–µ
    if (currentPromptIndex >= 0 && currentPromptIndex < concertPrompts.length) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏)
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = newText;
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏
        const timeElement = tempDiv.querySelector('span[style*="color: #007bff"]');
        let description = '';
        
        if (timeElement) {
            // –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            const timeParent = timeElement.parentNode;
            const textNodes = [];
            let foundTime = false;
            
            for (let node of timeParent.childNodes) {
                if (node === timeElement) {
                    foundTime = true;
                    continue;
                }
                if (foundTime && node.nodeType === Node.TEXT_NODE) {
                    textNodes.push(node.textContent);
                } else if (foundTime && node.nodeType === Node.ELEMENT_NODE) {
                    textNodes.push(node.textContent);
                }
            }
            
            description = textNodes.join('').trim();
        } else {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            description = tempDiv.textContent.trim();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞
        concertPrompts[currentPromptIndex].description = description;
        
        console.log('üíæ –ü—Ä–æ–º—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', {
            title: concertPrompts[currentPromptIndex].title,
            description: description.substring(0, 100) + '...'
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification('–ü—Ä–æ–º—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞
        updatePromptDisplay();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞"
        const titleElement = document.getElementById('current-prompt-title');
        if (titleElement) {
            titleElement.textContent = concertPrompts[currentPromptIndex].title;
            console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', concertPrompts[currentPromptIndex].title);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ dropdown
        const dropdownTitleElement = document.getElementById('current-prompt-dropdown-title');
        if (dropdownTitleElement) {
            dropdownTitleElement.textContent = concertPrompts[currentPromptIndex].title;
            console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ dropdown –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', concertPrompts[currentPromptIndex].title);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∞–∫—Ç–µ—Ä–æ–≤
        const actorsElement = document.getElementById('generated-movie-actors');
        if (actorsElement && concertPrompts[currentPromptIndex].actors) {
            actorsElement.textContent = concertPrompts[currentPromptIndex].actors;
            console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ –∞–∫—Ç–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —á–µ—Ä–µ–∑ LLM
        generateFilmDescription(concertPrompts[currentPromptIndex].title, concertPrompts[currentPromptIndex].description);
    }
    
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    exitEditMode();
}

// –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞
function cancelPromptEdit() {
    const promptText = document.getElementById('prompt-text');
    const editBtn = document.getElementById('edit-prompt-btn');
    const saveBtn = document.getElementById('save-prompt-btn');
    const cancelBtn = document.getElementById('cancel-prompt-btn');
    
    if (!promptText || !editBtn || !saveBtn || !cancelBtn) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    promptText.innerHTML = originalPromptText;
    
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    exitEditMode();
    
    console.log('‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
}

// –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function exitEditMode() {
    const promptText = document.getElementById('prompt-text');
    const editBtn = document.getElementById('edit-prompt-btn');
    const saveBtn = document.getElementById('save-prompt-btn');
    const cancelBtn = document.getElementById('cancel-prompt-btn');
    
    if (promptText) {
        promptText.contentEditable = false;
        promptText.classList.remove('editing');
    }
    
    if (editBtn) editBtn.style.display = 'inline-block';
    if (saveBtn) saveBtn.style.display = 'none';
    if (cancelBtn) cancelBtn.style.display = 'none';
    
    isEditingPrompt = false;
    originalPromptText = '';
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
async function generateFilmDescription(filmTitle, technicalPrompt) {
    const descriptionElement = document.getElementById('generated-movie-description');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    descriptionElement.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è...';
    descriptionElement.style.color = '#007bff';
    
    try {
        const response = await fetch('/api/admin/generate-film-description', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                film_title: filmTitle,
                technical_prompt: technicalPrompt
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            let description = data.description.trim();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä—ã–≤–∞–µ—Ç—Å—è –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if (description.length > 200) {
                // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫
                const lastSentenceEnd = Math.max(
                    description.lastIndexOf('.'),
                    description.lastIndexOf('!'),
                    description.lastIndexOf('?')
                );
                
                if (lastSentenceEnd > 50) {
                    // –û–±—Ä–µ–∑–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
                    description = description.substring(0, lastSentenceEnd + 1);
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –æ–±—Ä–µ–∑–∞–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
                    description = description.substring(0, 197) + '...';
                }
            }
            
            descriptionElement.textContent = description;
            descriptionElement.style.color = '#333';
            console.log('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:', description);
        } else {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è:', data.message);
            // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –µ—Å—Ç—å
            let fallbackDescription = technicalPrompt.trim();
            if (fallbackDescription.length > 200) {
                fallbackDescription = fallbackDescription.substring(0, 197) + '...';
            }
            descriptionElement.textContent = fallbackDescription;
            descriptionElement.style.color = '#666';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞:', error);
        // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –µ—Å—Ç—å
        let fallbackDescription = technicalPrompt.trim();
        if (fallbackDescription.length > 200) {
            fallbackDescription = fallbackDescription.substring(0, 197) + '...';
        }
        descriptionElement.textContent = fallbackDescription;
        descriptionElement.style.color = '#666';
    }
}

// –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞ (—Ä—É—á–Ω–∞—è)
async function regenerateFilmDescription() {
    if (currentPromptIndex >= 0 && currentPromptIndex < concertPrompts.length) {
        const prompt = concertPrompts[currentPromptIndex];
        console.log('üîÑ –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è:', prompt.title);
        await generateFilmDescription(prompt.title, prompt.description);
    } else {
        console.error('‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
        showNotification('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º—Ç', 'warning');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞
function updatePromptDisplay() {
    if (concertPrompts.length > 0) {
        selectPrompt(currentPromptIndex);
    }
}

// Drag and Drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
function handleDragStart(e) {
    e.target.classList.add('dragging');
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', e.target.outerHTML);
}

function handleDragOver(e) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    
    const dragging = document.querySelector('.dragging');
    const afterElement = getDragAfterElement(e.target.closest('.prompt-list'), e.clientY);
    
    if (afterElement == null) {
        e.target.closest('.prompt-list').appendChild(dragging);
    } else {
        e.target.closest('.prompt-list').insertBefore(dragging, afterElement);
    }
}

function handleDrop(e) {
    e.preventDefault();
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –ø—Ä–æ–º—Ç–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
}

function handleDragEnd(e) {
    e.target.classList.remove('dragging');
}

function getDragAfterElement(container, y) {
    const draggableElements = [...container.querySelectorAll('.prompt-item:not(.dragging)')];
    
    return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        
        if (offset < 0 && offset > closest.offset) {
            return { offset: offset, element: child };
        } else {
            return closest;
        }
    }, { offset: Number.NEGATIVE_INFINITY }).element;
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞
function editPrompt(index) {
    const prompt = concertPrompts[index];
    const newTitle = window.prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ:', prompt.title);
    if (newTitle !== null) {
        prompt.title = newTitle;
        loadPrompts();
        updatePromptDisplay();
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞
function deletePrompt(index) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º—Ç?')) {
        concertPrompts.splice(index, 1);
        if (currentPromptIndex >= concertPrompts.length) {
            currentPromptIndex = Math.max(0, concertPrompts.length - 1);
        }
        loadPrompts();
        updatePromptDisplay();
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞
function addNewPrompt() {
    const title = window.prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞:');
    if (title) {
        const newPrompt = {
            id: concertPrompts.length + 1,
            title: title,
            description: '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞...',
            duration: '0:00'
        };
        concertPrompts.push(newPrompt);
        loadPrompts();
        selectPrompt(concertPrompts.length - 1);
    }
}

// –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–º—Ç
function nextPrompt() {
    if (concertPrompts.length > 0) {
        currentPromptIndex = (currentPromptIndex + 1) % concertPrompts.length;
        selectPrompt(currentPromptIndex);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞
function updateBasePrompt() {
    if (concertPrompts.length > 0) {
        const prompt = concertPrompts[currentPromptIndex];
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞:', prompt.title);
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–º—Ç–æ–≤
window.togglePromptDropdown = togglePromptDropdown;
window.selectPrompt = selectPrompt;
window.editPrompt = editPrompt;
window.deletePrompt = deletePrompt;
window.addNewPrompt = addNewPrompt;
window.nextPrompt = nextPrompt;
window.updateBasePrompt = updateBasePrompt;
window.initializePrompts = initializePrompts;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function clearAllMessages() {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const confirmed = confirm('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n–ù–∞–∂–º–∏—Ç–µ OK –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
        
        if (!confirmed) {
            console.log('–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const clearBtn = document.getElementById('clear-messages-btn');
        const originalText = clearBtn.textContent;
        clearBtn.disabled = true;
        clearBtn.textContent = 'üîÑ –û—á–∏—Å—Ç–∫–∞...';
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É
        const response = await fetch('/api/admin/clear-messages', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            alert('‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å–ø–∏—Å–æ–∫ –±–∞—Ç—á–µ–π
            await loadSmartBatchStats();
            await loadSmartBatchList();
            
            console.log('–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã');
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            alert(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${data.message}`);
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', data.message);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        const clearBtn = document.getElementById('clear-messages-btn');
        clearBtn.disabled = false;
        clearBtn.textContent = 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è';
    }
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function clearAllChats() {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        const confirmed = confirm('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –î–ï–ô–°–¢–í–ò–ï!\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤?\n\n–≠—Ç–æ —É–¥–∞–ª–∏—Ç:\n‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚Ä¢ –í—Å–µ –±–∞—Ç—á–∏\n‚Ä¢ –í—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–õ–¨–ó–Ø –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n–ù–∞–∂–º–∏—Ç–µ OK –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
        
        if (!confirmed) {
            console.log('–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const clearBtn = document.getElementById('clear-all-chats-btn');
        const originalText = clearBtn.textContent;
        clearBtn.disabled = true;
        clearBtn.textContent = 'üîÑ –û—á–∏—Å—Ç–∫–∞...';
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        const response = await fetch('/api/admin/clear-all-chats', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            alert('‚úÖ –í—Å—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!\n\n–£–¥–∞–ª–µ–Ω–æ:\n‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n‚Ä¢ –í—Å–µ –±–∞—Ç—á–∏\n‚Ä¢ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            await loadSmartBatchStats();
            await loadSmartBatchList();
            await loadGeneratedImages();
            await refreshMessages();
            
            console.log('–í—Å—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞');
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            alert(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤: ${data.message}`);
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤:', data.message);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤:', error);
        alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        const clearBtn = document.getElementById('clear-all-chats-btn');
        clearBtn.disabled = false;
        clearBtn.textContent = 'üí• –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤';
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.loadSmartBatchStats = loadSmartBatchStats;
window.loadSmartBatchList = loadSmartBatchList;
window.forceCreateBatches = forceCreateBatches;
window.processNextBatch = processNextBatch;
window.loadCurrentMixedText = loadCurrentMixedText;
window.loadGeneratedImages = loadGeneratedImages;
window.startSmartBatchAutoUpdate = startSmartBatchAutoUpdate;
window.openImageModal = openImageModal;
window.toggleStatsDropdown = toggleStatsDropdown;
window.clearAllMessages = clearAllMessages;
window.clearAllChats = clearAllChats;
window.regenerateFilmDescription = regenerateFilmDescription;
window.togglePromptEdit = togglePromptEdit;
window.savePromptEdit = savePromptEdit;
window.cancelPromptEdit = cancelPromptEdit;
window.downloadImage = downloadImage;

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
async function logoutAdmin() {
    const confirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?');
    
    if (confirmed) {
        try {
            const response = await fetch('/api/admin/logout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                console.log('üëã –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                window.location.href = '/admin/login';
            } else {
                console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', data.message);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞
window.logoutAdmin = logoutAdmin;

// ===== –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =====

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function loadBasePrompt() {
    try {
        const response = await fetch('/api/admin/get-base-prompt');
        const data = await response.json();
        
        if (data.success) {
            document.getElementById('current-base-prompt').textContent = data.prompt;
        } else {
            document.getElementById('current-base-prompt').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞:', error);
        document.getElementById('current-base-prompt').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞';
    }
}

// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞
function previewFullPrompt() {
    const customPrompt = document.getElementById('custom-prompt').value.trim();
    const basePrompt = document.getElementById('current-base-prompt').textContent;
    
    if (!customPrompt) {
        document.getElementById('full-prompt-preview').textContent = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...';
        return;
    }
    
    const fullPrompt = `–°–æ–∑–¥–∞–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${customPrompt} ${basePrompt}`;
    document.getElementById('full-prompt-preview').textContent = fullPrompt;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function generateCustomImage() {
    const customPrompt = document.getElementById('custom-prompt').value.trim();
    
    if (!customPrompt) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'warning');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
    const statusDiv = document.getElementById('image-generation-status');
    const generateBtn = document.getElementById('generate-image-btn');
    const previewBtn = document.getElementById('preview-btn');
    
    statusDiv.style.display = 'flex';
    generateBtn.disabled = true;
    previewBtn.disabled = true;
    
    try {
        const response = await fetch('/api/admin/generate-custom-image', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                custom_prompt: customPrompt
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const imageContainer = document.getElementById('generated-image-container');
            const imageElement = document.getElementById('generated-image');
            
            imageElement.src = data.image_url;
            imageElement.alt = '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
            imageContainer.style.display = 'block';
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            imageElement.dataset.downloadUrl = data.image_url;
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML
            const imageInfoDiv = document.getElementById('image-info');
            if (imageInfoDiv) {
                let infoText = '';
                if (data.image_size) {
                    infoText += `üìê –†–∞–∑–º–µ—Ä: ${data.image_size}`;
                }
                if (data.processed) {
                    infoText += ' | ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–∂–∞—Ç–æ';
                }
                imageInfoDiv.textContent = infoText;
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            let successMessage = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!';
            if (data.image_size) {
                successMessage += ` (${data.image_size})`;
            }
            if (data.processed) {
                successMessage += ' [–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–∂–∞—Ç–æ]';
            }
            
            showNotification(successMessage, 'success');
        } else {
            showNotification(data.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
    } finally {
        // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
        statusDiv.style.display = 'none';
        generateBtn.disabled = false;
        previewBtn.disabled = false;
    }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function downloadGeneratedImage() {
    const imageElement = document.getElementById('generated-image');
    const downloadUrl = imageElement.dataset.downloadUrl;
    
    if (!downloadUrl) {
        showNotification('–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è', 'error');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const link = document.createElement('a');
    link.href = downloadUrl;
    link.download = `generated_image_${Date.now()}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è...', 'success');
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞
const originalLoadInitialData = loadInitialData;
loadInitialData = async function() {
    await originalLoadInitialData();
    await loadBasePrompt();
};

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ
document.addEventListener('DOMContentLoaded', function() {
    const customPromptTextarea = document.getElementById('custom-prompt');
    if (customPromptTextarea) {
        customPromptTextarea.addEventListener('input', previewFullPrompt);
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.loadBasePrompt = loadBasePrompt;
window.previewFullPrompt = previewFullPrompt;
window.generateCustomImage = generateCustomImage;
window.downloadGeneratedImage = downloadGeneratedImage;
