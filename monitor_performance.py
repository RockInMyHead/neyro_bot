#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã Neuroevent Bot –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import aiohttp
import time
import json
import statistics
from datetime import datetime
import threading
import sys

BASE_URL = "https://neuroevent.ru"

class PerformanceMonitor:
    def __init__(self):
        self.metrics = {
            'response_times': [],
            'success_count': 0,
            'error_count': 0,
            'total_requests': 0,
            'start_time': time.time()
        }
        self.lock = threading.Lock()
        self.running = True
    
    def log(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
    
    async def check_endpoint(self, session, endpoint, method='GET', data=None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç endpoint –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏"""
        start_time = time.time()
        
        try:
            if method == 'GET':
                async with session.get(f"{BASE_URL}{endpoint}", timeout=aiohttp.ClientTimeout(total=10)) as response:
                    response_time = time.time() - start_time
                    success = response.status < 400
            elif method == 'POST':
                async with session.post(f"{BASE_URL}{endpoint}", json=data, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    response_time = time.time() - start_time
                    success = response.status < 400
            
            with self.lock:
                self.metrics['total_requests'] += 1
                self.metrics['response_times'].append(response_time)
                
                if success:
                    self.metrics['success_count'] += 1
                else:
                    self.metrics['error_count'] += 1
            
            return {
                'endpoint': endpoint,
                'response_time': response_time,
                'success': success,
                'status': response.status if 'response' in locals() else 'ERROR'
            }
            
        except Exception as e:
            response_time = time.time() - start_time
            with self.lock:
                self.metrics['total_requests'] += 1
                self.metrics['error_count'] += 1
                self.metrics['response_times'].append(response_time)
            
            return {
                'endpoint': endpoint,
                'response_time': response_time,
                'success': False,
                'error': str(e)
            }
    
    async def monitor_critical_endpoints(self, session):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ endpoints"""
        endpoints = [
            ('GET', '/api/mini-app/latest-message'),
            ('GET', '/api/check-chat-clear-status'),
            ('GET', '/api/admin/check-auth'),
            ('GET', '/api/admin/smart-batches/stats'),
            ('GET', '/api/admin/smart-batches/list')
        ]
        
        tasks = []
        for method, endpoint in endpoints:
            task = self.check_endpoint(session, endpoint, method)
            tasks.append(task)
        
        return await asyncio.gather(*tasks, return_exceptions=True)
    
    async def simulate_user_activity(self, session, user_id):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.check_endpoint(session, '/api/mini-app/latest-message')
            await asyncio.sleep(0.1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
            await self.check_endpoint(session, '/api/check-chat-clear-status')
            await asyncio.sleep(0.1)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_data = {
                'message': f'Monitor test message from user {user_id}',
                'user_id': f'monitor_user_{user_id}'
            }
            await self.check_endpoint(session, '/api/message', 'POST', message_data)
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def run_monitoring(self, duration=300):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        self.log(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥")
        
        connector = aiohttp.TCPConnector(limit=50, limit_per_host=25)
        timeout = aiohttp.ClientTimeout(total=30)
        
        async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
            start_time = time.time()
            end_time = start_time + duration
            
            while time.time() < end_time and self.running:
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ endpoints
                await self.monitor_critical_endpoints(session)
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_tasks = []
                for i in range(10):  # 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    task = self.simulate_user_activity(session, i)
                    user_tasks.append(task)
                
                await asyncio.gather(*user_tasks, return_exceptions=True)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(5)
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                elapsed = time.time() - start_time
                if int(elapsed) % 30 == 0 and int(elapsed) > 0:
                    self.print_current_stats()
    
    def print_current_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        with self.lock:
            if not self.metrics['response_times']:
                return
            
            elapsed = time.time() - self.metrics['start_time']
            rps = self.metrics['total_requests'] / elapsed if elapsed > 0 else 0
            success_rate = (self.metrics['success_count'] / self.metrics['total_requests'] * 100) if self.metrics['total_requests'] > 0 else 0
            
            response_times = self.metrics['response_times']
            avg_time = statistics.mean(response_times)
            median_time = statistics.median(response_times)
            p95_time = sorted(response_times)[int(len(response_times) * 0.95)]
            
            self.log(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.metrics['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤, "
                    f"{rps:.1f} RPS, {success_rate:.1f}% —É—Å–ø–µ—à–Ω—ã—Ö, "
                    f"—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f}s, "
                    f"–º–µ–¥–∏–∞–Ω–∞: {median_time:.3f}s, "
                    f"95%: {p95_time:.3f}s")
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        if not self.metrics['response_times']:
            self.log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        elapsed = time.time() - self.metrics['start_time']
        rps = self.metrics['total_requests'] / elapsed if elapsed > 0 else 0
        success_rate = (self.metrics['success_count'] / self.metrics['total_requests'] * 100) if self.metrics['total_requests'] > 0 else 0
        
        response_times = self.metrics['response_times']
        avg_time = statistics.mean(response_times)
        median_time = statistics.median(response_times)
        p95_time = sorted(response_times)[int(len(response_times) * 0.95)]
        p99_time = sorted(response_times)[int(len(response_times) * 0.99)]
        
        print("\n" + "="*80)
        print("üìä –û–¢–ß–ï–¢ –û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("="*80)
        print(f"üéØ –¶–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä: {BASE_URL}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {elapsed:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìà –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {rps:.2f}")
        print()
        
        print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.metrics['total_requests']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {self.metrics['success_count']} ({success_rate:.2f}%)")
        print(f"   –û—à–∏–±–æ–∫: {self.metrics['error_count']} ({100-success_rate:.2f}%)")
        print()
        
        print("‚è±Ô∏è  –í–†–ï–ú–Ø –û–¢–í–ï–¢–ê:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_time:.3f}s")
        print(f"   –ú–µ–¥–∏–∞–Ω–∞: {median_time:.3f}s")
        print(f"   95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {p95_time:.3f}s")
        print(f"   99-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {p99_time:.3f}s")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max(response_times):.3f}s")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {min(response_times):.3f}s")
        print()
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("üéØ –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        
        issues = []
        if success_rate < 95:
            issues.append(f"–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_rate:.1f}%")
        
        if avg_time > 2.0:
            issues.append(f"–í—ã—Å–æ–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.3f}s")
        
        if p95_time > 5.0:
            issues.append(f"–í—ã—Å–æ–∫–∏–π 95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {p95_time:.3f}s")
        
        if rps < 50:
            issues.append(f"–ù–∏–∑–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {rps:.1f} RPS")
        
        if issues:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
            for issue in issues:
                print(f"   ‚Ä¢ {issue}")
        else:
            print("‚úÖ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –í –ù–û–†–ú–ï!")
            print("   ‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            print("   ‚Ä¢ –ü—Ä–∏–µ–º–ª–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞")
            print("   ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã")
        
        print("="*80)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.running = False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä NEUROEVENT BOT - –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("="*60)
    
    monitor = PerformanceMonitor()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ 5 –º–∏–Ω—É—Ç
        await monitor.run_monitoring(300)
        monitor.generate_final_report()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        monitor.stop()
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    finally:
        print("\nüèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    try:
        import aiohttp
    except ImportError:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å aiohttp: pip install aiohttp")
        sys.exit(1)
    
    asyncio.run(main())
