from flask import Flask, render_template, send_from_directory, request, jsonify
from flask_cors import CORS
import time
import os
import logging
import asyncio
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Import existing handlers
from simple_message_db import message_db
from openai_client import get_openai_response
from gemini_client import generate_image_with_retry, GeminiQuotaError
from content_filter import check_content_safety, sanitize_image_prompt

# OLD: Keep legacy imports for compatibility with old endpoints
from image_queue_manager import queue_manager
from batch_image_generator import batch_generator

# NEW: Import smart batch management system
from smart_batch_manager import smart_batch_manager, BatchStatus
from sequential_batch_processor import sequential_processor
from PIL import Image, ImageOps
from io import BytesIO
import threading
import time
import asyncio
import requests
import base64
from config import BOT_TOKEN, GENERATED_IMAGES_FOLDER, NEW_BOT_TOKEN

def auto_generation_worker():
    """
    –ù–æ–≤—ã–π —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π
    
    –õ–æ–≥–∏–∫–∞:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    2. –°–æ–∑–¥–∞–µ—Ç –±–∞—Ç—á–∏ (10 –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–ª–∏ –ø–æ 1 —Å–æ–æ–±—â–µ–Ω–∏—é)
    3. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π –±–∞—Ç—á:
       - –°–æ–∑–¥–∞–µ—Ç –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ LLM
       - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
       - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    4. –ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ü–∏–∫–ª
    """
    logger.info("üöÄ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π –∑–∞–ø—É—â–µ–Ω–∞")
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            stats = smart_batch_manager.get_statistics()
            
            if stats['total_messages'] > 0:
                logger.info(f"üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {stats['total_messages']} —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–∑–¥–∞–µ–º –±–∞—Ç—á–∏...")
                
                # –°–æ–∑–¥–∞–µ–º –±–∞—Ç—á–∏ –∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                created_batches = smart_batch_manager.create_batches()
                
                if created_batches:
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_batches)} –±–∞—Ç—á–µ–π")
                    
                    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –±–∞—Ç—á–∏
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    try:
                        result = loop.run_until_complete(sequential_processor.process_all_batches())
                        logger.info(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['processed']} —É—Å–ø–µ—à–Ω–æ, {result['failed']} –æ—à–∏–±–æ–∫")
                    finally:
                        loop.close()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±–∞—Ç—á–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
            smart_batch_manager.clear_completed_batches(older_than_hours=1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            time.sleep(5)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}", exc_info=True)
            time.sleep(10)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª

def send_telegram_message(user_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API"""
    try:
        url = f"https://api.telegram.org/bot{NEW_BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': user_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result.get('description')}")
                return False
        else:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

app = Flask(__name__, static_folder='static', template_folder='templates')
# Enable CORS for API routes
CORS(app, resources={r"/api/*": {"origins": "*"}})

# Serve Mini App
@app.route('/')
def mini_app():
    return render_template('mini_app.html')

# Serve Admin Panel
@app.route('/admin')
def admin_app():
    return render_template('admin_mini_app.html')

# Mini App API endpoint
@app.route('/api/message', methods=['POST', 'OPTIONS'])
def api_message():
    if request.method == 'OPTIONS':
        response = jsonify({})
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Methods', 'POST, OPTIONS')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type')
        return response
    data = request.get_json()
    message = data.get('message', '').strip()
    user_id = data.get('user_id', 0)
    username = data.get('username', 'MiniApp')
    first_name = data.get('first_name', 'MiniApp')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ Mini App –≤ –±–∞–∑—É
    try:
        message_db.add_message(
            user_id=user_id,
            username=username,
            first_name=first_name,
            message=message,
            source='mini_app'
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ Mini App —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: user_id={user_id}, username={username}")
        
        # NEW: –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É —É–º–Ω—ã—Ö –±–∞—Ç—á–µ–π
        try:
            msg_id = smart_batch_manager.add_message(user_id, username, first_name, message)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ SmartBatchManager: {msg_id}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ SmartBatchManager: {e}")
            
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ Mini App: {e}")
    conversation_history = data.get('history', [])
    
    if not message:
        return jsonify(success=False, error="Message is required"), 400
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ async —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        ai_response = loop.run_until_complete(get_openai_response(message, conversation_history))
        loop.close()
    except RuntimeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ event loop –≤ api_message: {e}")
        ai_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
    
    response_data = {
        'success': True,
        'response': ai_response,
        'timestamp': int(time.time() * 1000)
    }
    
    response = jsonify(response_data)
    response.headers.add('Access-Control-Allow-Origin', '*')
    return response

# Alias endpoint for compatibility
@app.route('/api/chat', methods=['POST', 'OPTIONS'])
def api_chat():
    """Alias for /api/message"""
    return api_message()

# Admin stats endpoint
@app.route('/api/admin/stats', methods=['GET'])
def admin_stats():
    message_db.load_messages()
    stats = message_db.get_stats()
    response = jsonify(success=True, stats=stats, timestamp=int(time.time()*1000))
    response.headers.add('Access-Control-Allow-Origin', '*')
    return response

# Admin messages endpoint
@app.route('/api/admin/messages', methods=['GET'])
def admin_messages():
    message_db.load_messages()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Mini App (–∏—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∏ –±–æ—Ç)
    all_user_msgs = message_db.get_user_messages_only(200)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 200 —Å–æ–æ–±—â–µ–Ω–∏–π
    msgs = [msg for msg in all_user_msgs if msg.get('source') == 'mini_app'][-50:]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
    response = jsonify(success=True, messages=msgs, count=len(msgs), timestamp=int(time.time()*1000))
    response.headers.add('Access-Control-Allow-Origin', '*')
    return response

# Admin export endpoint
@app.route('/api/admin/export', methods=['GET'])
def admin_export():
    message_db.load_messages()
    stats = message_db.get_stats()
    recent = message_db.get_messages(60)
    export_data = {'export_info':{'timestamp':int(time.time()*1000),'export_time': time.strftime('%Y-%m-%d %H:%M:%S'),'total_messages': len(message_db.messages)}, 'statistics': stats, 'recent_messages': recent}
    response = jsonify(success=True, data=export_data, timestamp=int(time.time()*1000))
    response.headers.add('Access-Control-Allow-Origin', '*')
    return response

# Admin reset endpoint
@app.route('/api/admin/reset', methods=['POST'])
def admin_reset():
    message_db.reset_stats()
    response = jsonify(success=True, message='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞', timestamp=int(time.time()*1000))
    response.headers.add('Access-Control-Allow-Origin', '*')
    return response

# Admin mixed-text endpoint
@app.route('/api/admin/mixed-text', methods=['POST'])
def admin_mixed_text():
    # Accept empty request body
    content = request.get_json(silent=True) or {}
    message_db.load_messages()
    recent = message_db.get_user_messages_only(15)
    texts = [m['message'] for m in recent]
    if not texts:
        mixed = '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.'
    else:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        filtered_texts = []
        for text in texts:
            is_safe, _ = check_content_safety(text)
            if is_safe:
                filtered_texts.append(text)
            else:
                logger.warning(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
        
        if not filtered_texts:
            mixed = '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –±—ã–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã.'
        else:
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(filtered_texts) == 1:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
                single_text = filtered_texts[0]
                mixed = single_text[:97] + "..." if len(single_text) > 100 else single_text
            else:
                # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                prompt = f"""–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤) –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:

–°–æ–æ–±—â–µ–Ω–∏—è: {'; '.join(filtered_texts)}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤
- –û–±—ä–µ–¥–∏–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –æ–±—Ä–∞–∑—ã
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –°–æ–∑–¥–∞–π –µ–¥–∏–Ω—ã–π –∫—Ä–∞—Ç–∫–∏–π –æ–±—Ä–∞–∑

–ü—Ä–∏–º–µ—Ä: "–ú–æ—Ä–µ, —à—Ç–æ—Ä–º, –∫–æ—Ä–∞–±–ª—å, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è" """
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ async —Ñ—É–Ω–∫—Ü–∏–∏
                try:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    mixed = loop.run_until_complete(get_openai_response(prompt))
                    loop.close()
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
                    if len(mixed) > 100:
                        mixed = mixed[:97] + "..."
                        
                except RuntimeError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ event loop: {e}")
                    # Fallback: –ø—Ä–æ—Å—Ç–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    mixed = " ".join(filtered_texts[:3])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                    if len(mixed) > 100:
                        mixed = mixed[:97] + "..."
    
    response = jsonify(success=True, mixed_text=mixed, timestamp=int(time.time()*1000))
    response.headers.add('Access-Control-Allow-Origin', '*')
    return response

# Admin add to queue endpoint
@app.route('/api/admin/queue/add', methods=['POST'])
def admin_queue_add():
    data = request.get_json(force=True)
    try:
        req_id = queue_manager.add_request(
            data.get('user_id'), data.get('username'), data.get('first_name'), data.get('message')
        )
        resp = jsonify(success=True, request_id=req_id, message='–ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å', timestamp=int(time.time()*1000))
    except Exception as e:
        resp = jsonify(success=False, error=str(e), timestamp=int(time.time()*1000))
        resp.status_code = 500
    resp.headers.add('Access-Control-Allow-Origin', '*')
    return resp

# Admin queue stats endpoint
@app.route('/api/admin/queue/stats', methods=['GET'])
def admin_queue_stats():
    stats = queue_manager.get_queue_stats()
    resp = jsonify(success=True, stats=stats, timestamp=int(time.time()*1000))
    resp.headers.add('Access-Control-Allow-Origin', '*')
    return resp

# Admin process batch endpoint
@app.route('/api/admin/queue/process', methods=['POST'])
def admin_queue_process():
    try:
        success = batch_generator.process_next_batch()
        resp = jsonify(success=success, message='–ë–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω' if success else '–ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –±–∞—Ç—á–µ–π', timestamp=int(time.time()*1000))
    except Exception as e:
        resp = jsonify(success=False, error=str(e), timestamp=int(time.time()*1000))
        resp.status_code = 500
    resp.headers.add('Access-Control-Allow-Origin', '*')
    return resp

# Admin batch status endpoint
@app.route('/api/admin/queue/batch-status', methods=['GET'])
def admin_batch_status():
    batch_id = request.args.get('batch_id')
    try:
        if batch_id:
            status = batch_generator.get_batch_status(batch_id)
            if not status:
                raise Exception('–ë–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω')
        else:
            current = queue_manager.get_current_batch()
            status = batch_generator.get_batch_status(current.id) if current else None
        resp = jsonify(success=True, batch_status=status, timestamp=int(time.time()*1000))
    except Exception as e:
        resp = jsonify(success=False, error=str(e), timestamp=int(time.time()*1000))
        resp.status_code = 500
    resp.headers.add('Access-Control-Allow-Origin', '*')
    return resp

# ============================================================================
# NEW: Smart Batch System Endpoints
# ============================================================================

@app.route('/api/admin/smart-batches/stats', methods=['GET'])
def smart_batches_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–∞—Ç—á–µ–π"""
    try:
        batch_stats = smart_batch_manager.get_statistics()
        processor_stats = sequential_processor.get_stats()
        
        response = jsonify(
            success=True,
            batch_stats=batch_stats,
            processor_stats=processor_stats,
            timestamp=int(time.time() * 1000)
        )
        response.headers.add('Access-Control-Allow-Origin', '*')
        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞—Ç—á–µ–π: {e}")
        return jsonify(success=False, error=str(e)), 500

@app.route('/api/admin/smart-batches/list', methods=['GET'])
def smart_batches_list():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞—Ç—á–µ–π"""
    try:
        batches = smart_batch_manager.get_all_batches_info()
        
        response = jsonify(
            success=True,
            batches=batches,
            count=len(batches),
            timestamp=int(time.time() * 1000)
        )
        response.headers.add('Access-Control-Allow-Origin', '*')
        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞—Ç—á–µ–π: {e}")
        return jsonify(success=False, error=str(e)), 500

@app.route('/api/admin/smart-batches/create', methods=['POST'])
def smart_batches_create():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –±–∞—Ç—á–∏ –∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        created_batches = smart_batch_manager.create_batches()
        
        response = jsonify(
            success=True,
            message=f'–°–æ–∑–¥–∞–Ω–æ {len(created_batches)} –±–∞—Ç—á–µ–π',
            batches_created=len(created_batches),
            timestamp=int(time.time() * 1000)
        )
        response.headers.add('Access-Control-Allow-Origin', '*')
        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ç—á–µ–π: {e}")
        return jsonify(success=False, error=str(e)), 500

@app.route('/api/admin/smart-batches/process-next', methods=['POST'])
def smart_batches_process_next():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            success = loop.run_until_complete(sequential_processor.process_next_batch())
            
            response = jsonify(
                success=success,
                message='–ë–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ' if success else '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞—Ç—á–µ–π',
                timestamp=int(time.time() * 1000)
            )
        finally:
            loop.close()
        
        response.headers.add('Access-Control-Allow-Origin', '*')
        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {e}")
        return jsonify(success=False, error=str(e)), 500

@app.route('/api/admin/smart-batches/current-mixed-text', methods=['GET'])
def smart_batches_current_mixed_text():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞"""
    try:
        batches = smart_batch_manager.get_all_batches_info()
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ç—á —Å –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        mixed_text = None
        for batch in reversed(batches):
            if batch.get('mixed_text'):
                mixed_text = batch['mixed_text']
                break
        
        if not mixed_text:
            mixed_text = '–ù–µ—Ç –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞'
        
        response = jsonify(
            success=True,
            mixed_text=mixed_text,
            timestamp=int(time.time() * 1000)
        )
        response.headers.add('Access-Control-Allow-Origin', '*')
        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
        return jsonify(success=False, error=str(e)), 500

@app.route('/api/admin/smart-batches/images', methods=['GET'])
def smart_batches_images():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        batches = smart_batch_manager.get_all_batches_info()
        completed_batches = [b for b in batches if b['status'] == 'completed' and b.get('image_path')]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        completed_batches.sort(key=lambda x: x.get('completed_at', 0), reverse=True)
        
        images_data = []
        for batch in completed_batches:
            image_path = batch.get('image_path')
            if image_path and os.path.exists(image_path):
                # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_url = f"/static/generated_images/{os.path.basename(image_path)}"
                images_data.append({
                    'batch_id': batch['id'],
                    'mixed_text': batch.get('mixed_text', ''),
                    'image_url': image_url,
                    'image_path': image_path,
                    'completed_at': batch.get('completed_at'),
                    'processing_time': batch.get('processing_time', 0),
                    'message_count': batch.get('message_count', 0)
                })
        
        response = jsonify({
            'success': True,
            'images': images_data,
            'count': len(images_data),
            'timestamp': int(time.time() * 1000)
        })
        response.headers.add('Access-Control-Allow-Origin', '*')
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'timestamp': int(time.time() * 1000)
        }), 500

# ============================================================================

@app.route('/static/generated_images/<filename>')
def serve_generated_image(filename):
    """–°–ª—É–∂–∏—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        return send_from_directory(GENERATED_IMAGES_FOLDER, filename)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {filename}: {e}")
        return "Image not found", 404

@app.route('/api/admin/latest-track', methods=['GET'])
def admin_latest_track():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–∫-—Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        message_db.load_messages()
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
        admin_msgs = [m for m in message_db.messages if m.get('source')=='admin']
        if not admin_msgs:
            return jsonify(success=True, message='', timestamp=int(time.time()*1000))
        last = admin_msgs[-1]['message']
        resp = jsonify(success=True, message=last, timestamp=int(time.time()*1000))
        resp.headers.add('Access-Control-Allow-Origin', '*')
        return resp
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞")
        return jsonify(success=False, message=str(e)), 500

# Admin generate image endpoint
@app.route('/api/admin/generate-image', methods=['POST'])
def admin_generate_image():
    data = request.get_json(force=True) or {}
    prompt = data.get('prompt')
    if not prompt:
        # derive prompt from mixed text
        recent = message_db.get_user_messages_only(15)
        msgs = [m['message'] for m in recent]
        if not msgs:
            return jsonify(success=False, error='–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', timestamp=int(time.time()*1000)), 400
        prompt = ' '.join(msgs)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    is_safe, reason = check_content_safety(prompt)
    if not is_safe:
        logger.warning(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {reason}")
        resp = jsonify(success=False, error=f'–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {reason}', timestamp=int(time.time()*1000))
        resp.status_code = 400
        resp.headers.add('Access-Control-Allow-Origin', '*')
        return resp
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–ø—Ç –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    clean_prompt = sanitize_image_prompt(prompt)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ async —Ñ—É–Ω–∫—Ü–∏–∏
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            image_b64 = loop.run_until_complete(generate_image_with_retry(clean_prompt))
            loop.close()
        except RuntimeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ event loop –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            
        img_data = base64.b64decode(image_b64)
        filename = f"image_{int(time.time())}.png"
        folder = os.getenv('GENERATED_IMAGES_FOLDER','generated_images')
        os.makedirs(folder, exist_ok=True)
        path = os.path.join(folder, filename)
        with Image.open(BytesIO(img_data)) as img:
            img = ImageOps.fit(img, (1920,1280), Image.Resampling.LANCZOS)
            img.save(path)
        resp = jsonify(success=True, filename=filename, filepath=f'/generated_images/{filename}', original_prompt=prompt, clean_prompt=clean_prompt, timestamp=int(time.time()*1000))
    except GeminiQuotaError as e:
        resp = jsonify(success=False, error=f'–ö–≤–æ—Ç–∞ –∏—Å—Ç–µ–∫–ª–∞: {e}', timestamp=int(time.time()*1000))
        resp.status_code = 429
    except Exception as e:
        resp = jsonify(success=False, error=str(e), timestamp=int(time.time()*1000))
        resp.status_code = 500
    resp.headers.add('Access-Control-Allow-Origin', '*')
    return resp

# Serve generated images
@app.route('/generated_images/<path:filename>')
def generated_images(filename):
    return send_from_directory(os.getenv('GENERATED_IMAGES_FOLDER','generated_images'), filename)

# Telegram Webhook endpoint
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        update_data = request.get_json()
        
        if not update_data:
            logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π webhook –æ—Ç Telegram")
            return jsonify({"status": "error", "message": "Empty data"}), 400
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {json.dumps(update_data, ensure_ascii=False)}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º OK
        if 'message' in update_data:
            message = update_data['message']
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.get('from', {}).get('id')}: {message.get('text')}")
        
        return jsonify({"status": "ok"}), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/api/admin/generate-content', methods=['POST'])
def admin_generate_content():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é ChatGPT"""
    try:
        data = request.get_json()
        
        if not data or 'prompt' not in data:
            return jsonify({"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}), 400
        
        prompt = data['prompt']
        content_type = data.get('type', 'general')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        import asyncio
        from openai_client import get_openai_response
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            generated_content = loop.run_until_complete(get_openai_response(prompt))
            loop.close()
        except RuntimeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ event loop –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            generated_content = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}"
        
        if generated_content:
            logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({content_type}): {generated_content[:100]}...")
            return jsonify({
                "success": True,
                "content": generated_content,
                "type": content_type
            })
        else:
            return jsonify({"success": False, "message": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"}), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        return jsonify({"success": False, "message": str(e)}), 500

@app.route('/api/admin/clear-messages', methods=['POST'])
def admin_clear_messages():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_db.clear_all_messages()
        
        logger.info("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
        
        return jsonify({
            "success": True,
            "message": "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã",
            "timestamp": int(time.time() * 1000)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return jsonify({
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}",
            "timestamp": int(time.time() * 1000)
        }), 500

@app.route('/api/mini-app/latest-message', methods=['GET'])
def get_latest_message():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ mini_app"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
        message_db.load_messages()
        admin_messages = [msg for msg in message_db.messages if msg.get('source') == 'admin']
        
        if admin_messages:
            latest_message = max(admin_messages, key=lambda x: x.get('timestamp', 0))
            return jsonify({
                "success": True,
                "message": latest_message.get('message', ''),
                "timestamp": latest_message.get('timestamp', 0)
            })
        else:
            return jsonify({
                "success": True,
                "message": "",
                "timestamp": 0
            })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/api/admin/send-concert-message', methods=['POST'])
def admin_send_concert_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
    try:
        data = request.get_json(silent=True) or {}
        logger.info(f"/api/admin/send-concert-message payload: {data}")
        
        if 'type' not in data:
            return jsonify({"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}), 400
        
        message_type = data['type']
        content = data.get('content', {}) or {}
        
        if message_type == 'track_message':
            # content –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ —Å—Ç—Ä–æ–∫–æ–π (–≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ), –ª–∏–±–æ –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏
            if isinstance(content, str):
                message = content.strip()
            else:
                title = (content.get('title') or '').strip()
                description = (content.get('description') or '').strip()
                actors = (content.get('actors') or '').strip()

                # –î–æ–ø. –∑–∞—â–∏—Ç–∞: –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
                if not title:
                    title = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                if not description:
                    description = '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                if not actors:
                    actors = '‚Äî'

                message = f"""üìΩÔ∏è **{title}**

{description}

**–ê–∫—Ç—ë—Ä—ã/–ø–µ—Ä—Å–æ–Ω–∞–∂–∏:** {actors}

---

–ö–∞–∫–∏–µ –æ–±—Ä–∞–∑—ã –∏–ª–∏ –ø–µ–π–∑–∞–∂–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç —É –≤–∞—Å, –∫–æ–≥–¥–∞ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏?"""
            
        elif message_type == 'concert_end':
            message = """–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏ ‚Äî Main Strings Orchestra √ó Neuroevent.
–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ!
P.S. –û—Ç–≤–µ—Ç—ã –∞–Ω–æ–Ω–∏–º–Ω—ã."""
            
        else:
            return jsonify({"success": False, "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"}), 400
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Mini App
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ({message_type}) –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message[:200].replace(chr(10), ' ')}")
        
        sent_count = 0
        failed_count = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            message_db.load_messages()
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Mini App
            mini_app_users = set()
            all_messages = message_db.messages
            logger.info(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î: {len(all_messages)}")
            
            for msg in all_messages:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: source={msg.get('source')}, user_id={msg.get('user_id')}")
                if msg.get('source') == 'mini_app' and msg.get('user_id') is not None:
                    # –í–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å user_id = 0 –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                    mini_app_users.add(msg['user_id'])
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(mini_app_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Mini App –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            logger.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {list(mini_app_users)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot
            for user_id in mini_app_users:
                try:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                    # –ï—Å–ª–∏ user_id = 0, —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                    if user_id == 0:
                        logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è user_id = 0 (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")
                        sent_count += 1  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                        continue
                    
                    success = send_telegram_message(user_id, message)
                    if success:
                        sent_count += 1
                    else:
                        failed_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    failed_count += 1
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_count}, –æ—à–∏–±–æ–∫: {failed_count}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # Save admin message to DB
        try:
            message_db.add_message(
                user_id=0,
                username='Admin',
                first_name='Admin',
                message=message,
                source='admin'
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        return jsonify({
            "success": True, 
            "message": f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ '{message_type}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "sent_count": sent_count,
            "failed_count": failed_count,
            "total_users": len(mini_app_users)
        })
        
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return jsonify({"success": False, "message": f"Server error: {str(e)}"}), 500

@app.route('/api/admin/update-base-prompt', methods=['POST'])
def admin_update_base_prompt():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è AI"""
    try:
        data = request.get_json()
        
        if not data or 'prompt_type' not in data or 'prompt_content' not in data:
            return jsonify({"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}), 400
        
        prompt_type = data['prompt_type']
        prompt_content = data['prompt_content']
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞ ({prompt_type}): {prompt_content[:100]}...")
        
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        
        return jsonify({
            "success": True, 
            "message": f"–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç '{prompt_type}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞: {e}")
        return jsonify({"success": False, "message": str(e)}), 500

@app.route('/api/admin/generate-film-description', methods=['POST'])
def generate_film_description():
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–º—Ç–∞"""
    try:
        data = request.get_json()
        technical_prompt = data.get('technical_prompt', '')
        film_title = data.get('film_title', '')
        
        if not technical_prompt:
            return jsonify({"success": False, "message": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"}), 400
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        description_prompt = f"""
–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è —Å–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤–æ–µ, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –∑—Ä–∏—Ç–µ–ª–µ–π –∫–æ–Ω—Ü–µ—Ä—Ç–∞:

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {technical_prompt}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ù–∞–ø–∏—à–∏ 2-3 –∞–±–∑–∞—Ü–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ –æ–±—Ä–∞–∑–Ω—ã–µ —Å–ª–æ–≤–∞
- –û–ø–∏—à–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã
- –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑—Ä–∏—Ç–µ–ª–µ–π (–Ω–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º)
- –í–¥–æ—Ö–Ω–æ–≤–ª—è–π –Ω–∞ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —ç–º–æ—Ü–∏–∏
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫

–ü—Ä–∏–º–µ—Ä —Å—Ç–∏–ª—è:
"–ü–æ–≥—Ä—É–∂–∞—è—Å—å –≤ –º—Ä–∞—á–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –ü–∏—Ä–∞—Ç–æ–≤ –ö–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è, –∑—Ä–∏—Ç–µ–ª—å –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞ –±–æ—Ä—Ç –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π, –æ–∫—É—Ç–∞–Ω–Ω—ã—Ö –º–æ—Ä—Å–∫–æ–π –¥—ã–º–∫–æ–π, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —ç–ø–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ –ø–æ –≤–æ–ª–Ω–∞–º –±—É—Ä–Ω–æ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. –§–∏–ª—å–º –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã —Å–≤–æ–±–æ–¥—ã, –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –≤–µ—á–Ω–æ–π –±–æ—Ä—å–±—ã –∑–∞ —Å–æ–∫—Ä–æ–≤–∏—â–∞, –ø–æ–≥—Ä—É–∂–∞—è –∑—Ä–∏—Ç–µ–ª—è –≤ —Å–∫–∞–∑–æ—á–Ω—ã–π –º–∏—Ä –ø–∏—Ä–∞—Ç—Å—Ç–≤–∞ –∏ —Å—É—Ä–æ–≤–æ–π –º–æ—Ä—Å–∫–æ–π —Å—É–¥—å–±—ã."
"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
        from openai_client import get_openai_response
        import asyncio
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            description = loop.run_until_complete(get_openai_response(description_prompt))
            if not description:
                description = technical_prompt  # Fallback
            
            return jsonify({
                "success": True,
                "description": description.strip()
            })
        finally:
            loop.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞: {e}")
        return jsonify({"success": False, "message": str(e)}), 500

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    # Debug: print registered routes
    print('Registered routes:')
    for rule in app.url_map.iter_rules():
        print(f"{rule.endpoint}: {rule}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    auto_thread = threading.Thread(target=auto_generation_worker, daemon=True)
    auto_thread.start()
    logger.info("üöÄ –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω")
    
    port = int(os.getenv('PORT', 8000))
    app.run(host='0.0.0.0', port=port, debug=True)
