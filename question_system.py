#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–æ—Ç–∞
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import json
import os

logger = logging.getLogger(__name__)

class QuestionSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.questions = [
            "–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —É –≤–∞—Å –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–∞ –º—É–∑—ã–∫–∞? üéµ",
            "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è —É –≤–∞—Å —Å —ç—Ç–æ–π –º–µ–ª–æ–¥–∏–µ–π? üåà",
            "–ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å –Ω–∞ —Å—Ü–µ–Ω–µ? üé≠"
        ]
        self.question_interval = 180  # 3 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.user_states_file = "user_question_states.json"
        self.user_states = self.load_user_states()
        
    def load_user_states(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.user_states_file):
                with open(self.user_states_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {}
    
    def save_user_states(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.user_states_file, 'w', encoding='utf-8') as f:
                json.dump(self.user_states, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def get_user_state(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_states:
            self.user_states[user_id] = {
                'current_question_index': 0,
                'last_question_time': None,
                'questions_asked_today': 0,
                'last_reset_date': datetime.now().strftime('%Y-%m-%d')
            }
        return self.user_states[user_id]
    
    def should_ask_question(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        state = self.get_user_state(user_id)
        now = datetime.now()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        today = now.strftime('%Y-%m-%d')
        if state['last_reset_date'] != today:
            state['questions_asked_today'] = 0
            state['current_question_index'] = 0
            state['last_reset_date'] = today
            state['last_question_time'] = None
        
        # –ï—Å–ª–∏ —É–∂–µ –∑–∞–¥–∞–ª–∏ 3 –≤–æ–ø—Ä–æ—Å–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 3 –º–∏–Ω—É—Ç—ã
        if state['questions_asked_today'] >= 3:
            if state['last_question_time'] is None:
                return True
            
            last_question_time = datetime.fromisoformat(state['last_question_time'])
            time_since_last = now - last_question_time
            
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 3 –º–∏–Ω—É—Ç—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            if time_since_last.total_seconds() >= self.question_interval:
                state['questions_asked_today'] = 0
                state['current_question_index'] = 0
                state['last_question_time'] = None
                self.save_user_states()
                return True
            
            return False
        
        # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–¥–∞–ª–∏ 3 –≤–æ–ø—Ä–æ—Å–∞, –∑–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        return True
    
    def get_next_question(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        state = self.get_user_state(user_id)
        
        # –ï—Å–ª–∏ —É–∂–µ –∑–∞–¥–∞–ª–∏ 3 –≤–æ–ø—Ä–æ—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if state['questions_asked_today'] >= 3:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ—à–ª–æ 3 –º–∏–Ω—É—Ç—ã)
        if not self.should_ask_question(user_id):
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        question_index = state['current_question_index']
        question = self.questions[question_index]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state['current_question_index'] = (question_index + 1) % len(self.questions)
        state['questions_asked_today'] += 1
        state['last_question_time'] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.save_user_states()
        
        logger.info(f"–ó–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å {state['questions_asked_today']}/3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {question}")
        return question
    
    def get_question_status(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        state = self.get_user_state(user_id)
        return f"–í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {state['questions_asked_today']}/3"
    
    def reset_user_questions(self, user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_states:
            self.user_states[user_id]['questions_asked_today'] = 0
            self.user_states[user_id]['current_question_index'] = 0
            self.user_states[user_id]['last_reset_date'] = datetime.now().strftime('%Y-%m-%d')
            self.save_user_states()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤
question_system = QuestionSystem()
