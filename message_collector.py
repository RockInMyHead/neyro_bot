"""
–°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import asyncio
import json
import time
from datetime import datetime, timedelta
from typing import List, Dict, Any
from dataclasses import dataclass
from openai_client import get_openai_response
import logging

logger = logging.getLogger(__name__)

@dataclass
class UserMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    username: str
    first_name: str
    message: str
    timestamp: float
    source: str  # 'telegram' –∏–ª–∏ 'mini_app'

class MessageCollector:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.messages: List[UserMessage] = []
        self.stats = {
            'total_messages': 0,
            'unique_users': set(),
            'messages_by_hour': {},
            'last_reset': time.time()
        }
        self.is_running = False
        self.task = None
    
    def add_message(self, user_id: int, username: str, first_name: str, 
                   message: str, source: str = 'telegram'):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        print(f"üîç MessageCollector.add_message –≤—ã–∑–≤–∞–Ω: user_id={user_id}, message='{message[:30]}...'")
        
        user_message = UserMessage(
            user_id=user_id,
            username=username or f"user_{user_id}",
            first_name=first_name or "Unknown",
            message=message,
            timestamp=time.time(),
            source=source
        )
        
        self.messages.append(user_message)
        self.stats['total_messages'] += 1
        self.stats['unique_users'].add(user_id)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º
        hour = datetime.fromtimestamp(user_message.timestamp).hour
        self.stats['messages_by_hour'][hour] = self.stats['messages_by_hour'].get(hour, 0) + 1
        
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['total_messages']}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
        if len(self.messages) > 1000:
            self.messages = self.messages[-500:]  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500
        
        logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {first_name} ({user_id}): {message[:50]}...")
    
    def get_recent_messages(self, minutes: int = 15) -> List[UserMessage]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç"""
        cutoff_time = time.time() - (minutes * 60)
        return [msg for msg in self.messages if msg.timestamp >= cutoff_time]
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        recent_messages = self.get_recent_messages(15)
        
        return {
            'total_messages': self.stats['total_messages'],
            'unique_users_count': len(self.stats['unique_users']),
            'recent_messages_count': len(recent_messages),
            'messages_by_hour': self.stats['messages_by_hour'],
            'last_reset': self.stats['last_reset'],
            'uptime_hours': (time.time() - self.stats['last_reset']) / 3600
        }
    
    async def generate_mixed_text(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç"""
        recent_messages = self.get_recent_messages(15)
        
        if not recent_messages:
            return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç"
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
        all_messages = [msg.message for msg in recent_messages]
        combined_text = " ".join(all_messages)
        
        if len(combined_text) > 2000:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            combined_text = combined_text[:2000] + "..."
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            prompt = f"–°–æ–∑–¥–∞–π –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–µ —Å–º—ã—Å–ª –≤—Å–µ—Ö —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {combined_text}"
            mixed_text = await get_openai_response(prompt)
            
            logger.info(f"üé≠ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {mixed_text[:100]}...")
            return mixed_text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
            return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
    
    async def start_periodic_analysis(self, callback_func=None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.is_running = True
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        while self.is_running:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                mixed_text = await self.generate_mixed_text()
                
                # –í—ã–∑—ã–≤–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if callback_func:
                    await callback_func(mixed_text, self.get_stats())
                
                # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(15)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
                await asyncio.sleep(5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop_periodic_analysis(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
        self.is_running = False
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    def reset_stats(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.stats = {
            'total_messages': 0,
            'unique_users': set(),
            'messages_by_hour': {},
            'last_reset': time.time()
        }
        self.messages = []
        logger.info("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
_message_collector_instance = None

def get_message_collector():
    """–ü–æ–ª—É—á–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä MessageCollector (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
    global _message_collector_instance
    if _message_collector_instance is None:
        _message_collector_instance = MessageCollector()
    return _message_collector_instance

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
message_collector = get_message_collector()
