#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è Neuroevent
–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–µ–∑ Mini App
"""

import logging
import asyncio
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN
from openai_client import get_openai_response, test_openai_connection
from message_collector import message_collector
from simple_message_db import message_db
from question_system import question_system
from smart_batch_manager import smart_batch_manager
from mock_responses import get_friendly_response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_chat_history = {}

class UserState:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self, user_id):
        self.user_id = user_id
        self.is_waiting_for_response = False
        self.last_message_time = 0
        self.message_count = 0
        self.chat_history = []
        self.current_question = None
        self.is_typing = False

    def add_message(self, message, is_user=True):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.chat_history.append({
            'message': message,
            'is_user': is_user,
            'timestamp': time.time()
        })
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(self.chat_history) > 10:
            self.chat_history = self.chat_history[-10:]

def get_user_state(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_states:
        user_states[user_id] = UserState(user_id)
    return user_states[user_id]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–µ—Å—Ç—Ä
def save_user_to_registry(user_id, username, first_name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–µ—Å—Ç—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
    import json
    import os
    
    registry_file = 'user_registry.json'
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–µ—Å—Ç—Ä
        if os.path.exists(registry_file):
            with open(registry_file, 'r', encoding='utf-8') as f:
                registry = json.load(f)
        else:
            registry = {'users': []}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = next((u for u in registry['users'] if u['user_id'] == user_id), None)
        
        if not existing_user:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            registry['users'].append({
                'user_id': user_id,
                'username': username or f'user_{user_id}',
                'first_name': first_name or 'User',
                'registered_at': time.time()
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–µ—Å—Ç—Ä
            with open(registry_file, 'w', encoding='utf-8') as f:
                json.dump(registry, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–µ—Å—Ç—Ä: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    user = update.effective_user
    user_state = get_user_state(user.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–µ—Å—Ç—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
    save_user_to_registry(user.id, user.username, user.first_name)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    reply_markup = None
    
    welcome_text = f"""
üéµ **–ö–æ–º–∞–Ω–¥–∞ Neuroevent –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—Å!** üéµ

–Ø ‚Äî –í–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–µ Main Strings Orchestra.

–ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç—Ä–µ–∫–æ–º —è –ø—Ä–∏—à–ª—é –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–æ–Ω—Å –∫–∏–Ω–æ–≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å.
–í–∞—à –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –ø–æ–º–æ–∂–µ—Ç –ò–ò –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã.

**–í–∞–∂–Ω–æ:** –æ–¥–∏–Ω —Ç—Ä–µ–∫ ‚Äî –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç. –ü–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–º –Ω–∞ —Å—Ü–µ–Ω–µ ‚Äî –≥–ª–∞–≤–Ω–æ–µ —ç–º–æ—Ü–∏–∏, –∞ –Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω üòä

–°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë–º! ‚ú®
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_state.add_message("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Neuroevent Bot!", is_user=False)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/questions - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–æ–≤
/reset_questions - –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ **–û–±—â–µ–Ω–∏–µ** - –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ
‚Ä¢ **–¢–µ–º—ã** - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ **–ò—Å–∫—É—Å—Å—Ç–≤–æ** - –û–±—Å—É–∂–¥–∞–µ–º —Ñ–∏–ª—å–º—ã, –º—É–∑—ã–∫—É, –∫–Ω–∏–≥–∏
‚Ä¢ **–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ** - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–∏ –∏ –ø–æ–º–æ–≥–∞–µ–º —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
‚Ä¢ –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã

üé≠ **–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏!**
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    info_text = """
ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Neuroevent Bot:**

‚Ä¢ **–ù–∞–∑–≤–∞–Ω–∏–µ:** Neuroevent Bot
‚Ä¢ **–í–µ—Ä—Å–∏—è:** 3.0 (Enhanced)
‚Ä¢ **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** AI Assistant
‚Ä¢ **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω ‚úÖ

üîß **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
‚Ä¢ –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é AI
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π

üì± **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ–º—ã
‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
‚Ä¢ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏

üéØ **–ì–æ—Ç–æ–≤ –∫ –ª—é–±—ã–º –∑–∞–¥–∞—á–∞–º!**
    """
    await update.message.reply_text(info_text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    user_state = get_user_state(user.id)
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    user_state.chat_history = []
    user_state.message_count = 0
    
    await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ
    user_state.add_message("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞", is_user=False)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    user = update.effective_user
    user_state = get_user_state(user.id)
    
    status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.first_name}
üÜî **ID:** {user.id}
üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏:** {user_state.message_count}
üìù **–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:** {len(user_state.chat_history)} —Å–æ–æ–±—â–µ–Ω–∏–π
‚è∞ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {time.strftime('%H:%M:%S')}

ü§ñ **–ë–æ—Ç:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω ‚úÖ
‚Ä¢ OpenAI: –ü–æ–¥–∫–ª—é—á–µ–Ω ‚úÖ
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –†–∞–±–æ—Ç–∞–µ—Ç ‚úÖ
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: –ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ

üéØ **–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!**
    """
    await update.message.reply_text(status_text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /questions
async def questions_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–æ–≤"""
    user = update.effective_user
    status = question_system.get_question_status(user.id)
    await update.message.reply_text(f"üìä **–°—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–æ–≤:**\n\n{status}", parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset_questions
async def reset_questions_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    user = update.effective_user
    question_system.reset_user_questions(user.id)
    await update.message.reply_text("üîÑ –°—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OpenAI"""
    user_message = update.message.text
    user = update.effective_user
    user_state = get_user_state(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
    current_time = time.time()
    if current_time - user_state.last_message_time < 2:  # –ú–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        return  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    user_state.last_message_time = current_time
    user_state.message_count += 1
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (ID: {user.id}): {user_message}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–µ—Å—Ç—Ä (–¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫)
    save_user_to_registry(user.id, user.username, user.first_name)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–∫–∞–ª—å–Ω–æ)
    user_state.add_message(user_message, is_user=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –î–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    context_message = None
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º chat_history –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_state.chat_history:
        for msg in reversed(user_state.chat_history):
            if not msg['is_user'] and ('üìΩÔ∏è' in msg['message'] or 'üé¨' in msg['message'] or '—Ñ–∏–ª—å–º' in msg['message'].lower() or '**' in msg['message']):
                context_message = msg['message']
                break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ chat_history, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not context_message:
        try:
            message_db.load_messages()
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
            # –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ –∏–º–µ—é—Ç user_id=0 –∏ source='admin'
            admin_messages = [msg for msg in message_db.messages 
                            if msg.get('source') == 'admin' and 
                               ('üìΩÔ∏è' in msg.get('message', '') or 'üé¨' in msg.get('message', '') or '—Ñ–∏–ª—å–º' in msg.get('message', '').lower() or '**' in msg.get('message', ''))]
            
            if admin_messages:
                # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                latest_admin_msg = max(admin_messages, key=lambda x: x.get('timestamp', 0))
                context_message = latest_admin_msg.get('message', '')
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ –≤ –ë–î: {context_message[:100]}...")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –ë–î: {e}")
    
    if context_message:
        # –ï—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç - —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        # –°–û–•–†–ê–ù–Ø–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∞–¥–º–∏–Ω –±–æ—Ç–∞
        message_collector.add_message(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            message=user_message,
            source='telegram'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª–æ–≤—É—é –ë–î –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        message_db.add_message(
            user_id=user.id,
            username=user.username or f"user_{user.id}",
            first_name=user.first_name,
            message=user_message,
            source='telegram'
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º—É —É–º–Ω—ã—Ö –±–∞—Ç—á–µ–π
        try:
            msg_id = smart_batch_manager.add_message(user.id, user.username, user.first_name, user_message)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ SmartBatchManager: {msg_id}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ SmartBatchManager: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 1-3 —Å–ª–æ–≤–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            words = user_message.split()[:3]
            short_user_text = ' '.join(words)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤
            if len(short_user_text) > 30:
                short_user_text = short_user_text[:27] + '...'
            
            simple_response = f"{short_user_text} - –∑–¥–æ—Ä–æ–≤–æ, —Å–ø–∞—Å–∏–±–æ! üòä"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(simple_response)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state.add_message(simple_response, is_user=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–æ–≤—É—é –ë–î
            message_db.add_message(
                user_id=user.id,
                username=user.username or f"user_{user.id}",
                first_name=user.first_name,
                message=simple_response,
                source='bot'
            )
            
            logger.info(f"–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name} (ID: {user.id})")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            # Fallback - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
            fallback_response = "–°–ø–∞—Å–∏–±–æ! üëç"
            await update.message.reply_text(fallback_response)
            
            # –î–æ–±–∞–≤–ª—è–µ–º fallback –≤ –∏—Å—Ç–æ—Ä–∏—é
            user_state.add_message(fallback_response, is_user=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback –≤ –ë–î
            message_db.add_message(
                user_id=user.id,
                username=user.username or f"user_{user.id}",
                first_name=user.first_name,
                message=fallback_response,
                source='bot'
            )
    else:
        # –ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        logger.info(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞) - –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î")
        logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {user_message[:100]}...")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        standard_response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ, —è –ø—Ä–∏—à–ª—é –∞–Ω–æ–Ω—Å –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ üòå"
        await update.message.reply_text(standard_response)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–∫–∞–ª—å–Ω–æ)
        user_state.add_message(standard_response, is_user=False)
        
        # –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–æ–≤—É—é –ë–î –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        logger.info(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name} (ID: {user.id})")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω - –∫–Ω–æ–ø–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
    logger.warning(f'Update {update} caused error {context.error}')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if update and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "üòÖ –£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–±–æ–ª—å—à–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Failed to send error message: {e}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI...")
    if test_openai_connection():
        print("‚úÖ OpenAI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ OpenAI. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("clear", clear_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("questions", questions_command))
    application.add_handler(CommandHandler("reset_questions", reset_questions_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω - –∫–Ω–æ–ø–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ Enhanced Neuroevent Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("üé≠ –ì–æ—Ç–æ–≤ –∫ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º –æ–±—Å—É–∂–¥–µ–Ω–∏—è–º!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
