import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import BOT_TOKEN
from openai_client import get_openai_response, test_openai_connection
from message_collector import message_collector
from simple_message_db import message_db  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
from question_system import question_system

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è Mini App
    mini_app_button = InlineKeyboardButton(
        "–ù–∞—á–∞—Ç—å", 
        web_app=WebAppInfo(url="https://neuroevent.ru/")  # Production URL
    )
    
    keyboard = [[mini_app_button]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å Mini App
/app - –û—Ç–∫—Ä—ã—Ç—å Mini App –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/web - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Mini App
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/echo <—Ç–µ–∫—Å—Ç> - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç
/questions - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–æ–≤
/reset_questions - –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤

üì± Mini App –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π

‚ùì –°–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:
‚Ä¢ –ë–æ—Ç –∑–∞–¥–∞–µ—Ç 3 –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è—Ö
‚Ä¢ –°—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!
    """
    await update.message.reply_text(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /app
async def app_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç Mini App –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    mini_app_button = InlineKeyboardButton(
        "–ù–∞—á–∞—Ç—å", 
        web_app=WebAppInfo(url="https://neuroevent.ru/")  # Production URL
    )
    reply_markup = InlineKeyboardMarkup([[mini_app_button]])
    
    await update.message.reply_text(
        "–û—Ç–∫—Ä–æ–π—Ç–µ Mini App:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /web
async def web_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Mini App"""
    web_text = """
üåê –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ Mini App:

üîó Production URL: https://neuroevent.ru/
üîó –õ–æ–∫–∞–ª—å–Ω—ã–π: http://localhost:8000

üì± –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
2. Mini App –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å Mini App" –≤ –±–æ—Ç–µ

‚úÖ Production —Å–µ—Ä–≤–µ—Ä –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è Telegram Mini App
    """
    await update.message.reply_text(web_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    info_text = """
ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:

‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: –ù–µ–π—Ä–æ-–±–æ—Ç
‚Ä¢ –í–µ—Ä—Å–∏—è: 2.0 (—Å Mini App)
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: AI Assistant
‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω ‚úÖ

üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
‚Ä¢ Mini App –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π

üì± Mini App —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    await update.message.reply_text(info_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /echo
async def echo_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /echo"""
    if context.args:
        text = ' '.join(context.args)
        await update.message.reply_text(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /echo <–≤–∞—à —Ç–µ–∫—Å—Ç>")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /questions
async def questions_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–æ–≤"""
    user = update.effective_user
    status = question_system.get_question_status(user.id)
    await update.message.reply_text(f"üìä –°—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n{status}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset_questions
async def reset_questions_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    user = update.effective_user
    question_system.reset_user_questions(user.id)
    await update.message.reply_text("üîÑ –°—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OpenAI"""
    user_message = update.message.text
    user = update.effective_user
    
    # 1. –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (ID: {user.id}): {user_message}")
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∞–¥–º–∏–Ω –±–æ—Ç–∞ (–≤ –ø–∞–º—è—Ç—å)
    message_collector.add_message(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        message=user_message,
        source='telegram'
    )
    
    # 2.1. –í–ê–ñ–ù–û: –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª–æ–≤—É—é –ë–î –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    message_db.add_message(
        user_id=user.id,
        username=user.username or f"user_{user.id}",
        first_name=user.first_name,
        message=user_message,
        source='telegram'
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await update.message.chat.send_action("typing")
    
    try:
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM —Å –ø—Ä–æ–º–ø—Ç–æ–º "–£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–æ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
        summarization_prompt = f"–£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–æ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {user_message}"
        summarized_message = await get_openai_response(summarization_prompt)
        
        # 4. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"üìù –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {summarized_message}")
        
        # 5. –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ai_response = await get_openai_response(user_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(ai_response)
        
        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î (—Å source='bot' —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞–¥–∞–ª –≤ –º–∏–∫—Å)
        message_db.add_message(
            user_id=0,  # ID –±–æ—Ç–∞ = 0
            username="neyro_bot",
            first_name="–ù–µ–π—Ä–æ-–±–æ—Ç",
            message=ai_response,
            source='bot'
        )
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
        next_question = question_system.get_next_question(user.id)
        if next_question:
            # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –≤–æ–ø—Ä–æ—Å–æ–º
            await asyncio.sleep(2)
            await update.message.reply_text(next_question)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
            message_db.add_message(
                user_id=0,  # ID –±–æ—Ç–∞ = 0
                username="neyro_bot",
                first_name="–ù–µ–π—Ä–æ-–±–æ—Ç",
                message=next_question,
                source='bot'
            )
        
        logger.info(f"OpenAI response sent to user {user.first_name} (ID: {user.id})")
        
    except Exception as e:
        logger.error(f"Error processing message: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # Fallback –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        from mock_responses import get_friendly_response
        fallback_response = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n{get_friendly_response()}"
        await update.message.reply_text(fallback_response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'stats':
        await query.edit_message_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1\n‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: 1\n‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ê–∫—Ç–∏–≤–µ–Ω")
    elif query.data == 'settings':
        await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n‚Ä¢ –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n‚Ä¢ –†–µ–∂–∏–º: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
    elif query.data == 'help':
        await help_command(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
    logger.warning(f'Update {update} caused error {context.error}')

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI...")
    if test_openai_connection():
        print("‚úÖ OpenAI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ OpenAI. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("app", app_command))
    application.add_handler(CommandHandler("web", web_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("echo", echo_command))
    application.add_handler(CommandHandler("questions", questions_command))
    application.add_handler(CommandHandler("reset_questions", reset_questions_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
